<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Angular2 从搭建环境到开发</title>
    <url>/2016/10/15/angular2-development/</url>
    <content><![CDATA[<p><img src="/uploads/angular2-development1.png" alt=""></p>
<p>Angular2 的发布带来了一阵热议，很久之前就在筹备了，当时的官方答复就是彻底推翻重写，问世之后大家的呼声就是学习成本太高，虽然去掉了 1.x 里的一部分概念，但是加进了 typescript，虽然不强制使用，但是我推荐大家都试一试，毕竟此次改版是谷歌和微软两大家的产物。</p>
<p>对于会部署环境的可以尝试本文最后一节加入 Angular material2 ，个人认为对高度个性化的项目不推荐使用，对企业级的 CMS 省去了写样式的时间，直接开始正文。</p>
<a id="more"></a>

<h2 id="Angular-CLI"><a href="#Angular-CLI" class="headerlink" title="Angular-CLI"></a>Angular-CLI</h2><p>说到 cli 大家不陌生，没出一个框架都会有对应的 cli ，俗称脚手架。angular2 本身提供了起步项目 <a href="https://github.com/valor-software/angular2-quickstart" target="_blank" rel="noopener">angular2-quickstart</a>，我尝试了一下，发现不是很好用，其它的大部分扩展需要自行安装，之后看了一下 angular-cli 部署简单易用，还提供了快捷搭建项目的目录。</p>
<p>Github地址： <a href="https://github.com/angular/angular-cli" target="_blank" rel="noopener">https://github.com/angular/angular-cli</a></p>
<p>我就简单说下 Github 里的文档吧，细部的大家扩展阅读。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先，最好先升级 node 到 6.x 可以避免 node 版本过低带来的不必要的麻烦。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g angular-cli</span><br></pre></td></tr></table></figure>

<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>

<p>查看所有用法</p>
<h3 id="创建本地开发环境生成和运行angular2项目"><a href="#创建本地开发环境生成和运行angular2项目" class="headerlink" title="创建本地开发环境生成和运行angular2项目"></a>创建本地开发环境生成和运行angular2项目</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new PROJECT_NAME</span><br><span class="line"><span class="built_in">cd</span> PROJECT_NAME</span><br><span class="line">ng serve</span><br></pre></td></tr></table></figure>

<p>PROJECT_NAME 是你自己的项目名</p>
<p>部署成功后不报错的情况下到浏览器 <a href="http://localhost:4200/，修改项目中文件后会自动部署" target="_blank" rel="noopener">http://localhost:4200/，修改项目中文件后会自动部署</a></p>
<p>您可以配置默认的 HTTP 端口和一个 LiveReload server 用 <code>--</code>， 形如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve --host 0.0.0.0 --port 4201 --live-reload-port 49153</span><br></pre></td></tr></table></figure>

<h3 id="生成组件、指令、管道和服务"><a href="#生成组件、指令、管道和服务" class="headerlink" title="生成组件、指令、管道和服务"></a>生成组件、指令、管道和服务</h3><p>命令以 <code>ng generate</code> 开头，可以缩写为 <code>ng g</code>，下面给出创建 component 的几种方式。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng generate component my-new-component</span><br><span class="line">ng g component my-new-component <span class="comment"># using the alias</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># components support relative path generation</span></span><br><span class="line"><span class="comment"># if in the directory src/app/feature/ and you run</span></span><br><span class="line">ng g component new-cmp</span><br><span class="line"><span class="comment"># your component will be generated in src/app/feature/new-cmp</span></span><br><span class="line"><span class="comment"># but if you were to run</span></span><br><span class="line">ng g component ../newer-cmp</span><br><span class="line"><span class="comment"># your component will be generated in src/app/newer-cmp</span></span><br></pre></td></tr></table></figure>

<p>下表里是所有的命令：</p>
<table>
<thead>
<tr>
<th>Scaffold</th>
<th>Usage</th>
</tr>
</thead>
<tbody><tr>
<td>Component</td>
<td>ng g component my-new-component</td>
</tr>
<tr>
<td>Directive</td>
<td>ng g directive my-new-directive</td>
</tr>
<tr>
<td>Pipe</td>
<td>ng g pipe my-new-pipe</td>
</tr>
<tr>
<td>Service</td>
<td>ng g service my-new-service</td>
</tr>
<tr>
<td>Class</td>
<td>ng g class my-new-class</td>
</tr>
<tr>
<td>Interface</td>
<td>ng g interface my-new-interface</td>
</tr>
<tr>
<td>Enum</td>
<td>ng g enum my-new-enum</td>
</tr>
<tr>
<td>Module</td>
<td>ng g module my-module</td>
</tr>
</tbody></table>
<h3 id="创建路由"><a href="#创建路由" class="headerlink" title="创建路由"></a>创建路由</h3><p>这里 cli 暂时禁用了创建路由，新的路由生成器即将到来，您可以在这里阅读新路由器的官方文档：<a href="https://angular.io/docs/ts/latest/guide/router.html" target="_blank" rel="noopener">https://angular.io/docs/ts/latest/guide/router.html</a></p>
<h3 id="建立一个-build"><a href="#建立一个-build" class="headerlink" title="建立一个 build"></a>建立一个 build</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng build</span><br></pre></td></tr></table></figure>

<p>会生成到 <code>dist/</code> 目录下，其它关于测试，配置文件请大家去 Github 仔细阅读，这里只给最基本的搭建流程。</p>
<h2 id="组件实战"><a href="#组件实战" class="headerlink" title="组件实战"></a>组件实战</h2><p>看到这你可能已经开始尝试了，创建项目的步骤相信大家参照上文可以轻松解决，这里我先尝试创建一个 component，命令如下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ng g component nav</span><br></pre></td></tr></table></figure>

<p>这里我创建了一个 nav 组件。执行成功后，后台会自动部署。我们看一下文件目录有什么改变</p>
<p><img src="/uploads/angular2-development2.png" alt=""></p>
<p>多了一个叫做 nav 的文件夹，看一看文件目录</p>
<p><img src="/uploads/angular2-development3.png" alt=""></p>
<p>我们发现与项目创建时自带的 app component 目录结构相同，内容也大同小异，大家可以尝试去创建一个自己的组件，组件的样式可以去对应的 css 文件中修改。</p>
<p>这时我的 <code>app.module.ts</code> 变成了如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpModule &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NavComponent &#125; <span class="keyword">from</span> <span class="string">'./nav/nav.component'</span>;</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    NavComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>这里不难看出全局自动引入了 nav.component 组件。我们现在关心的问题是组件之间的引用和数据传输，这里为了简单起见，只给引入的方法，而数据传输、路由机制这里不做解释大家自行官网。</p>
<p>下面说一下 app 内引入 nav 组件，只需要改变 <code>app.component.html</code> 如下。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  &#123;&#123;title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-nav</span>&gt;</span><span class="tag">&lt;/<span class="name">app-nav</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的 class 在对应的 <code>app.component.css</code> 如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时页面自动刷新字号变大 ，那么这里的 <code>app-nav</code> 标签从哪里得到的呢？</p>
<p>我们去 <code>nav.component.ts</code> 里看一眼</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-nav'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./nav.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./nav.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">NavComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的 <code>selector: &#39;app-nav&#39;</code> 说明我们的选择器选择的是 <code>app-nav</code> 标签，同样的可以通过 <code>[app-nav]</code> 选择属性。</p>
<blockquote>
<p>注：这里 selector 类似 css 中的选择器，大家也可以根据 1.x 中的 directive 来理解这里的组件</p>
</blockquote>
<p>此时页面会呈现成这样</p>
<p><img src="/uploads/angular2-development4.png" alt=""></p>
<p>好，到这里简单的组件引用已经实现。</p>
<h2 id="引入-Angular-material2"><a href="#引入-Angular-material2" class="headerlink" title="引入 Angular material2"></a>引入 Angular material2</h2><p>文章开头已经阐述了引入 Angular material2 的优点，用过其它组件样式框架的都明白。</p>
<p>安装命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save @angular/material</span><br></pre></td></tr></table></figure>

<p>在 <code>src/app/app.module.ts</code> 中引入框架</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; MaterialModule &#125; <span class="keyword">from</span> <span class="string">'@angular/material'</span>;</span><br><span class="line"><span class="comment">// other imports</span></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [MaterialModule.forRoot()],</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaPartyAppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>引入核心和主体风格，较 Angular material 1.x 的改进在于可以选择不同的色系。具体看文档链接：<a href="https://github.com/angular/material2/blob/master/docs/theming.md" target="_blank" rel="noopener">https://github.com/angular/material2/blob/master/docs/theming.md</a></p>
<p>我们这里用的是 Angular CLI 这里又可以钻空子啦，添加下面一行到 <code>style.css</code>，注意是 <code>src</code> 目录下的文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">'~@angular/material/core/theming/prebuilt/deeppurple-amber.css'</span>;</span><br></pre></td></tr></table></figure>

<p><code>deeppurple-amber</code> 主题颜色是可变的，具体看上文的文档链接。</p>
<p>到这里一直打开控制台（是个好习惯）的朋友会发现类似下面的报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">client:<span class="number">49</span> [<span class="keyword">default</span>] J:\workspace\angular2\ts\epimss\node_modules\@angular2-material\slide-toggle\slide-toggle.d.ts:<span class="number">67</span>:<span class="number">19</span></span><br><span class="line">Cannot find name <span class="string">'HammerInput'</span>.</span><br><span class="line"></span><br><span class="line">client:<span class="number">49</span> [<span class="keyword">default</span>] J:\workspace\angular2\ts\epimss\node_modules\@angular2-material\core\gestures\MdGestureConfig.d.ts:<span class="number">4</span>:<span class="number">39</span></span><br><span class="line">Cannot find name <span class="string">'HammerManager'</span>.</span><br></pre></td></tr></table></figure>

<p>文档也给出了解释，因为框架中 <code>md-slide-toggle</code> 和 <code>md-slider</code> 两个组件依赖外部第三方组件 <a href="http://hammerjs.github.io/" target="_blank" rel="noopener">HammerJS</a> 需要额外的配置。</p>
<p>我们不急着用文档给的 npm 或引入 cdn 路径，因为亲测还是会报错，可能我引入方式有误，为了大家少走弯路直接给亲测有效的方法</p>
<p>我们先去命令行工具运行 <code>npm i --save-dev @types/hammerjs</code></p>
<p>然后编辑 <code>tsconfig.json</code> 文件将 hammerjs 添加到 types 下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"types"</span>: [</span><br><span class="line">  <span class="string">"jasmine"</span>, <span class="string">"hammerjs"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>到这里发现页面自动刷新后报错消失了，如果需要字体图标可以在 <code>src/index.html</code> 中引入</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://fonts.googleapis.com/icon?family=Material+Icons"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>目前为止，整个 Angular material2 已经整装待发。全部语法看这里：<a href="https://github.com/angular/material2#feature-status" target="_blank" rel="noopener">https://github.com/angular/material2#feature-status</a></p>
<p>我们尝试着添加多个按钮组件测试一下，修改 <code>app.component.html</code> 文件，完整代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">  &#123;&#123;title&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">app-nav</span>&gt;</span><span class="tag">&lt;/<span class="name">app-nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-button</span>&gt;</span>FLAT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-raised-button</span>&gt;</span>RAISED<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-icon-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">md-icon</span> <span class="attr">class</span>=<span class="string">"md-24"</span>&gt;</span>favorite<span class="tag">&lt;/<span class="name">md-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">md-icon</span> <span class="attr">class</span>=<span class="string">"md-24"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">md-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-mini-fab</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">md-icon</span> <span class="attr">class</span>=<span class="string">"md-24"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">md-icon</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-raised-button</span> <span class="attr">color</span>=<span class="string">"primary"</span>&gt;</span>PRIMARY<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-raised-button</span> <span class="attr">color</span>=<span class="string">"accent"</span>&gt;</span>ACCENT<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-raised-button</span> <span class="attr">color</span>=<span class="string">"warn"</span>&gt;</span>WARN<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-button</span> <span class="attr">disabled</span>&gt;</span>OFF<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-raised-button</span> [<span class="attr">disabled</span>]=<span class="string">"isDisabled"</span>&gt;</span>OFF<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">md-mini-fab</span> [<span class="attr">disabled</span>]=<span class="string">"isDisabled"</span>&gt;</span><span class="tag">&lt;<span class="name">md-icon</span>&gt;</span>check<span class="tag">&lt;/<span class="name">md-icon</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>没问题这里手懒不写布局样式了，直接给 br 换行大家方便看些，待页面部署完成后我们会看到以下效果</p>
<p><img src="/uploads/angular2-development5.png" alt=""></p>
<p>炫酷的组件，更多组件语法参考上面给的链接，到这里相信大家学习 angular2 的信心倍增，真对已有组件可以完成快速开发，下一步就是大家去 Angular2 官网看其它概念的时候啦，处理数据实现与后端对接。项目上线，大功告成。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>orange 最近也是在学习新技术，更底层框架方面的知识还再学习，当今前端框架层出不穷，不要盲从，要根据公司需求和员工的工作经验选择框架，真说到性能方面哪个框架快的话，我虽然没测试过，但我确定 React、Vue、Angular2 几个之间相差无几，除非在实现的时候代码存在问题，因为这几个框架都经过了大型项目的考验。</p>
]]></content>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 5 服务端渲染实战</title>
    <url>/2018/01/03/angular5-udao-ssr/</url>
    <content><![CDATA[<p><img src="/uploads/angular5-udao-ssr1.jpg" alt=""></p>
<a id="more"></a>

<p>本文基于上一篇 Angular5 的文章继续进行开发，上文中讲了搭建 Angular5 有道翻译的过程，以及遇到问题的解决方案。</p>
<p>随后改了 UI，从 bootstrap4 改到 angular material，这里不详细讲，服务端渲染也与修改 UI 无关。</p>
<p>看过之前文章的人会发现，文章内容都偏向于服务端渲染，vue 的 nuxt，react 的 next。</p>
<p>在本次改版前也尝试去找类似 nuxt.js 与 next.js 的顶级封装库，可以大大节省时间，但是未果。</p>
<p>最后决定使用从 Angular2 开始就可用的前后端同构解决方案 <a href="https://github.com/angular/universal" target="_blank" rel="noopener">Angular Universal</a>（Universal (isomorphic) JavaScript support for Angular.）</p>
<p>在这里不详细介绍文档内容，本文也尽量使用通俗易懂的语言带入 Angular 的 SSR</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>前面写的 udao 这个项目是完全遵从于 angular-cli 的，从搭建到打包，这也使得本文通用于所有 angular-cli 搭建的 angular5 项目。</p>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><p>首先安装服务端的依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add @angular/platform-server express</span><br><span class="line">yarn add -D ts-loader webpack-node-externals npm-run-all</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里需要注意的是 <code>@angular/platform-server</code> 的版本号最好根据当前 angular 版本进行安装，如: <code>@angular/platform-server@5.1.0</code>，避免与其它依赖有版本冲突。</p>
</blockquote>
<p>创建文件: <code>src/app/app.server.module.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; ServerModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-server'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app.module'</span></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    AppModule,</span><br><span class="line">    ServerModule</span><br><span class="line">  ],</span><br><span class="line">  bootstrap: [AppComponent],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppServerModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>更新文件: <code>src/app/app.module.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span></span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule.withServerTransition(&#123; <span class="attr">appId</span>: <span class="string">'udao'</span> &#125;)</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>我们需要一个主文件来导出服务端模块</p>
<p>创建文件: <code>src/main.server.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; AppServerModule &#125; <span class="keyword">from</span> <span class="string">'./app/app.server.module'</span></span><br></pre></td></tr></table></figure>

<p>现在来更新 <code>@angular/cli</code> 的配置文件 <code>.angular-cli.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"./node_modules/@angular/cli/lib/config/schema.json"</span>,</span><br><span class="line">  <span class="attr">"project"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"udao"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"apps"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"root"</span>: <span class="string">"src"</span>,</span><br><span class="line">      <span class="attr">"outDir"</span>: <span class="string">"dist/browser"</span>,</span><br><span class="line">      <span class="attr">"assets"</span>: [</span><br><span class="line">        <span class="string">"assets"</span>,</span><br><span class="line">        <span class="string">"favicon.ico"</span></span><br><span class="line">      ]</span><br><span class="line">      // ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"platform"</span>: <span class="string">"server"</span>,</span><br><span class="line">      <span class="attr">"root"</span>: <span class="string">"src"</span>,</span><br><span class="line">      <span class="attr">"outDir"</span>: <span class="string">"dist/server"</span>,</span><br><span class="line">      <span class="attr">"assets"</span>: [],</span><br><span class="line">      <span class="attr">"index"</span>: <span class="string">"index.html"</span>,</span><br><span class="line">      <span class="attr">"main"</span>: <span class="string">"main.server.ts"</span>,</span><br><span class="line">      <span class="attr">"test"</span>: <span class="string">"test.ts"</span>,</span><br><span class="line">      <span class="attr">"tsconfig"</span>: <span class="string">"tsconfig.server.json"</span>,</span><br><span class="line">      <span class="attr">"testTsconfig"</span>: <span class="string">"tsconfig.spec.json"</span>,</span><br><span class="line">      <span class="attr">"prefix"</span>: <span class="string">"app"</span>,</span><br><span class="line">      <span class="attr">"scripts"</span>: [],</span><br><span class="line">      <span class="attr">"environmentSource"</span>: <span class="string">"environments/environment.ts"</span>,</span><br><span class="line">      <span class="attr">"environments"</span>: &#123;</span><br><span class="line">        <span class="attr">"dev"</span>: <span class="string">"environments/environment.ts"</span>,</span><br><span class="line">        <span class="attr">"prod"</span>: <span class="string">"environments/environment.prod.ts"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的 <code>// ...</code> 代表省略掉，但是 json 没有注释一说，看着怪怪的….</p>
<p>当然 <code>.angular-cli.json</code> 的配置不是固定的，根据需求自行修改</p>
<p>我们需要为服务端创建 <code>tsconfig</code> 配置文件: <code>src/tsconfig.server.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"../tsconfig.json"</span>,</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"../out-tsc/app"</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"./"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"types"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"test.ts"</span>,</span><br><span class="line">    <span class="string">"**/*.spec.ts"</span>,</span><br><span class="line">    <span class="string">"server.ts"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"angularCompilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"entryModule"</span>: <span class="string">"app/app.server.module#AppServerModule"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后更新: <code>src/tsconfig.app.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"../tsconfig.json"</span>,</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"../out-tsc/app"</span>,</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"./"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"es2015"</span>,</span><br><span class="line">    <span class="attr">"types"</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"test.ts"</span>,</span><br><span class="line">    <span class="string">"**/*.spec.ts"</span>,</span><br><span class="line">    <span class="string">"server.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在可以执行以下命令，看配置是否有效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng build -prod --build-optimizer --app 0</span><br><span class="line">ng build --aot --app 1</span><br></pre></td></tr></table></figure>

<p>运行结果应该如下图所示</p>
<p><img src="/uploads/angular5-udao-ssr2.png" alt=""></p>
<p>然后就是创建 <code>Express.js</code> 服务, 创建文件: <code>src/server.ts</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/zone-node'</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderModuleFactory &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-server'</span></span><br><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">'express'</span></span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">'path'</span></span><br><span class="line"><span class="keyword">import</span> &#123; readFileSync &#125; <span class="keyword">from</span> <span class="string">'fs'</span></span><br><span class="line"></span><br><span class="line">enableProdMode();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">4200</span></span><br><span class="line"><span class="keyword">const</span> DIST_FOLDER = join(process.cwd(), <span class="string">'dist'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> template = readFileSync(join(DIST_FOLDER, <span class="string">'browser'</span>, <span class="string">'index.html'</span>)).toString()</span><br><span class="line"><span class="keyword">const</span> &#123; AppServerModuleNgFactory &#125; = <span class="built_in">require</span>(<span class="string">'main.server'</span>)</span><br><span class="line"></span><br><span class="line">app.engine(<span class="string">'html'</span>, (_, options, callback) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> opts = &#123; <span class="attr">document</span>: template, <span class="attr">url</span>: options.req.url &#125;</span><br><span class="line"></span><br><span class="line">  renderModuleFactory(AppServerModuleNgFactory, opts)</span><br><span class="line">    .then(<span class="function"><span class="params">html</span> =&gt;</span> callback(<span class="literal">null</span>, html))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>)</span><br><span class="line">app.set(<span class="string">'views'</span>, <span class="string">'src'</span>)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'*.*'</span>, express.static(join(DIST_FOLDER, <span class="string">'browser'</span>)))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; req &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`listening on http://localhost:<span class="subst">$&#123;PORT&#125;</span>!`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>理所当然需要一个 webpack 配置文件来打包 <code>server.ts</code> 文件: <code>webpack.config.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> nodeExternals = <span class="built_in">require</span>(<span class="string">'webpack-node-externals'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    server: <span class="string">'./src/server.ts'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">'.ts'</span>, <span class="string">'.js'</span>],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">'main.server'</span>: path.join(__dirname, <span class="string">'dist'</span>, <span class="string">'server'</span>, <span class="string">'main.bundle.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  target: <span class="string">'node'</span>,</span><br><span class="line">  externals: [nodeExternals()],</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">loader</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为了打包方便最好在 <code>package.json</code> 里面加几行脚本，如下：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "ng": "ng",</span><br><span class="line">  "start": "ng serve",</span><br><span class="line">  "build": "run-s build:client build:aot build:server",</span><br><span class="line">  "build:client": "ng build -prod --build-optimizer --app 0",</span><br><span class="line">  "build:aot": "ng build --aot --app 1",</span><br><span class="line">  "build:server": "webpack -p",</span><br><span class="line">  "test": "ng test",</span><br><span class="line">  "lint": "ng lint",</span><br><span class="line">  "e2e": "ng e2e"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在尝试运行 <code>npm run build</code>，将会看到如下输出：</p>
<p><img src="/uploads/angular5-udao-ssr3.png" alt=""></p>
<p>node 运行刚刚打包好的 <code>node dist/server.js</code> 文件</p>
<p>打开 <code>http://localhost:4200/</code> 会正常显示项目主页面</p>
<p><img src="/uploads/angular5-udao-ssr4.png" alt=""></p>
<p>从上面的开发者工具可以看出 html 文档是服务端渲染直出的，接下来尝试请求数据试一下。</p>
<blockquote>
<p>注意：本项目显式（菜单可点击）的几个路由初始化都没有请求数据，但是单词解释的详情页是会在 <code>ngOnInit()</code> 方法里获取数据，例如：<code>http://localhost:4200/detail/add</code> 直接打开时会发生奇怪的现象，请求在服务端和客户端分别发送一次，正常的服务端渲染项目首屏初始化数据的请求在服务端执行，在客户端不会二次请求!</p>
</blockquote>
<p>发现问题后，就来踩平这个坑</p>
<p>试想如果采用一个标记来区分服务端是否已经拿到了数据，如果没拿到数据就在客户端请求，如果已经拿到数据就不发请求</p>
<p>当然 Angular 早有一手准备，那就是 <code>Angular Modules for Transfer State</code></p>
<p>那么如何真实运用呢？见下文</p>
<h2 id="请求填坑"><a href="#请求填坑" class="headerlink" title="请求填坑"></a>请求填坑</h2><p>在服务端入口和客户端入口分别引入 <code>TransferStateModule</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ServerModule, ServerTransferStateModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-server'</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    ServerModule,</span><br><span class="line">    ServerTransferStateModule</span><br><span class="line">  ]</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppServerModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule, BrowserTransferStateModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule.withServerTransition(&#123; <span class="attr">appId</span>: <span class="string">'udao'</span> &#125;),</span><br><span class="line">    BrowserTransferStateModule</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  ]</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<p>以本项目为例在 <code>detail.component.ts</code> 里面，修改如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; HttpClient &#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span></span><br><span class="line"><span class="keyword">import</span> &#123; Router,  ActivatedRoute, NavigationEnd &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span></span><br><span class="line"><span class="keyword">import</span> &#123; TransferState, makeStateKey &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DETAIL_KEY = makeStateKey(<span class="string">'detail'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  details: any</span><br><span class="line"></span><br><span class="line">  <span class="comment">// some variable</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    private http: HttpClient,</span><br><span class="line">    private state: TransferState,</span><br><span class="line">    private route: ActivatedRoute,</span><br><span class="line">    private router: Router</span><br><span class="line">  ) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  transData (res) &#123;</span><br><span class="line">    <span class="comment">// translate res data</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit () &#123;</span><br><span class="line">    <span class="keyword">this</span>.details = <span class="keyword">this</span>.state.get(DETAIL_KEY, <span class="literal">null</span> <span class="keyword">as</span> any)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.details) &#123;</span><br><span class="line">      <span class="keyword">this</span>.route.params.subscribe(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.loading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> apiURL = <span class="string">`https://dict.youdao.com/jsonapi?q=<span class="subst">$&#123;params[<span class="string">'word'</span>]&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.http.get(<span class="string">`/?url=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(apiURL)&#125;</span>`</span>)</span><br><span class="line">        .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.transData(res)</span><br><span class="line">          <span class="keyword">this</span>.state.set(DETAIL_KEY, res <span class="keyword">as</span> any)</span><br><span class="line">          <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.transData(<span class="keyword">this</span>.details)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码够简单清晰，和上面描述的原理一致</p>
<p>现在我们只需要对 <code>main.ts</code> 文件进行小小的调整，以便在 <code>DOMContentLoaded</code> 时运行我们的代码，以使 <code>TransferState</code> 正常工作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span></span><br><span class="line"><span class="keyword">import</span> &#123; platformBrowserDynamic &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser-dynamic'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppModule &#125; <span class="keyword">from</span> <span class="string">'./app/app.module'</span></span><br><span class="line"><span class="keyword">import</span> &#123; environment &#125; <span class="keyword">from</span> <span class="string">'./environments/environment'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (environment.production) &#123;</span><br><span class="line">  enableProdMode()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">  platformBrowserDynamic().bootstrapModule(AppModule)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>到这里运行 <code>npm run build &amp;&amp; node dist/server.js</code> 然后刷新 <code>http://localhost:4200/detail/add</code> 到控制台查看 network 如下：</p>
<p><img src="/uploads/angular5-udao-ssr5.png" alt=""></p>
<p>发现 XHR 分类里面没有发起任何请求，只有 service-worker 的 cache 命中。</p>
<p>到这里坑都踩完了，项目运行正常，没发现其它 bug。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>2018 第一篇，目的就是探索所有流行框架服务端渲染的实现，开辟了 angular 这个最后没尝试的框架。</p>
<p>当然 Orange 还是前端小学生一枚，只知道实现，原理说的不是很清楚，源码看的不是很明白，如有纰漏还望指教。</p>
<p>最后 Github 地址和之前文章一样：<a href="https://github.com/OrangeXC/udao" target="_blank" rel="noopener">https://github.com/OrangeXC/udao</a></p>
<p>Github 附有在线链接，好的就说到这了</p>
]]></content>
      <tags>
        <tag>Angular</tag>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 5 开发一个有道翻译</title>
    <url>/2017/11/02/angular5-udao/</url>
    <content><![CDATA[<p><img src="/uploads/angular5-udao1.png" alt=""></p>
<p>力争国内 Angular 5 第一篇轮子</p>
<blockquote>
<p>Github：<a href="https://github.com/OrangeXC/udao" target="_blank" rel="noopener">https://github.com/OrangeXC/udao</a></p>
</blockquote>
<a id="more"></a>

<p>最近轮子造的比较多，意在给初学者一个参考例子，目前反馈来看，如果技术栈不符，很少有人会点进来读，以后可以考虑转换博文类型了。</p>
<p>之前写过一篇 <a href="https://orangexc.xyz/2016/10/15/Angular2-from-the-build-environment-to-the-development/">Angular2 从搭建环境到开发</a>，在 segmentfault 上得到了 2016 年第四季度的 <a href="https://segmentfault.com/a/1190000008093993" target="_blank" rel="noopener">top writer</a> 文章表里第四名，如今已经 angular 5</p>
<p>给大家的常规印象就是，大版本跳跃会带来 breaking change，因为 angular 从 1.x 到 2.x 简直是两个框架，不对，就是两个框架。</p>
<p>angular 1.x 叫 angular.js 而 angular 2.x 以后就叫 angular，两个版本分别托管在两个 github repo。</p>
<p>更让我比较惊讶的是 angular.js 的 star 近乎 angular 的 double，而且社区更繁荣，本文苦在找能配合 angular 5 使用的组件，因为框架刚升级，相应的组件都还未更新，下文会告诉大家一个小技巧。</p>
<p>angular 2 到 4 到 5，的组件数成幂指数递减，但是好在可以轻松向后扩展，如果熟悉 angular 2 那么本项目完全可以看懂。</p>
<p>其实写轮子看文档谁都会写，我尽量多说些坑点，让开发者少踩坑。</p>
<p>撸起袖子开整。</p>
<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g @angular/cli@1.5.0</span><br></pre></td></tr></table></figure>

<p>这里直接把版本指向 1.5.0</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng new PROJECT-NAME</span><br><span class="line"><span class="built_in">cd</span> PROJECT-NAME</span><br></pre></td></tr></table></figure>

<p>这时依赖已经安装完成，执行 <code>ng -v</code>，可以看到如下</p>
<p><img src="/uploads/angular5-udao2.png" alt=""></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng serve</span><br></pre></td></tr></table></figure>

<p>默认 4200 端口，就可以看到初始化页面了。</p>
<p>安装过程可能较长，建议本地先安装 yarn，安装依赖的时候 cli 会自动使用 yarn 装依赖，会快不少。</p>
<p>到这就可以开发了。</p>
<h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><p>udao 词典的公开接口已经废弃，这里拿来的接口是非官方的，支持的功能有限</p>
<p>这里明确要用的 UI 库是 <a href="https://github.com/ng-bootstrap/ng-bootstrap" target="_blank" rel="noopener">ng-bootstrap</a>，loading 用的是 <a href="https://github.com/Zak-C/ngx-loading" target="_blank" rel="noopener">ngx-loading</a></p>
<p>安装时会有依赖版本不符的警告，如下</p>
<p><img src="/uploads/angular5-udao3.png" alt=""></p>
<p>但是勉强能用，前面说想找到合适的组件库比较困难，这里讲个小技巧，去 google 搜 <code>angular [some component]</code> 基本都是 angular 1.x 的组件，那么根据历史分析组件命名有 <code>ng-</code> <code>ng2-</code>，到了 4 大家感觉心累所以干脆叫 <code>ngx-</code>，搜索直接搜 <code>ngx-[some component]</code>。</p>
<p>这里为什么是 <code>ng-bootstrap</code> 而没选 <code>ngx-bootstrap</code> 呢，这里真的有 <code>ngx-bootstrap</code>，因为 <code>ng-bootstrap</code> 只支持 <code>bootstrap4</code>，后者支持 3 和 4，为了避免版本纠纷，直接用了 <code>ng-bootstrap</code>。</p>
<p>说到这远远不能证明 angular 5 可以用这个库，我的评判标准是 angular 4，如果支持 angular 4，那么 90% 支持 angular 5，因为改动确实不大。</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>目前此项目只涉及到 4 个路由。</p>
<ul>
<li><code>/</code> 主页</li>
<li><code>/translate</code> 翻译</li>
<li><code>/search</code> 模糊搜索</li>
<li><code>/detail/:word</code> 单词详情</li>
</ul>
<p>在 <code>app.module.ts</code> 下面定义路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">''</span>,</span><br><span class="line">    component: HomeComponent</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'translate'</span>,</span><br><span class="line">    component: TranslateComponent</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'search'</span>,</span><br><span class="line">    component: SearchComponent</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'detail/:word'</span>,</span><br><span class="line">    component: DetailComponent</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这里说下路由跳转相关的问题，在 angular 5 里依然分为 a 标签的跳转和 js 跳转</p>
<ul>
<li>a 标签的写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Directive(&#123; <span class="attr">selector</span>: <span class="string">':not(a)[routerLink]'</span> &#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RouterLink</span> </span>&#123;</span><br><span class="line">  queryParams: &#123;[k: string]: any&#125;</span><br><span class="line">  fragment: string</span><br><span class="line">  queryParamsHandling: QueryParamsHandling</span><br><span class="line">  preserveFragment: boolean</span><br><span class="line">  skipLocationChange: boolean</span><br><span class="line">  replaceUrl: boolean</span><br><span class="line">  <span class="keyword">set</span> routerLink: any[]|string</span><br><span class="line">  <span class="keyword">set</span> preserveQueryParams: boolean</span><br><span class="line">  onClick(): boolean</span><br><span class="line">  <span class="keyword">get</span> urlTree: UrlTree</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本项目例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">routerLink</span>=<span class="string">"/"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span> [<span class="attr">routerLinkActiveOptions</span>]=<span class="string">"&#123;exact: true&#125;"</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">routerLink</span>=<span class="string">"/translate"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>翻译<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">routerLink</span>=<span class="string">"/search"</span> <span class="attr">routerLinkActive</span>=<span class="string">"active"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>这里注意一个坑，第一个 <code>li</code> 标签，多了 <code>[routerLinkActiveOptions]=&quot;{exact: true}&quot;</code>，如果不加的话，会导致 <code>/</code> 路由下，active 不触发的情况。</p>
</blockquote>
<ul>
<li>js 写法</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(rootComponentType: Type&lt;any&gt;|null, urlSerializer: UrlSerializer, rootContexts: ChildrenOutletContexts, location: Location, injector: Injector, loader: NgModuleFactoryLoader, compiler: Compiler, config: Routes)</span><br><span class="line">  <span class="keyword">get</span> events: Observable&lt;Event&gt;</span><br><span class="line">  <span class="keyword">get</span> routerState: RouterState</span><br><span class="line">  errorHandler: ErrorHandler</span><br><span class="line">  navigated: boolean</span><br><span class="line">  urlHandlingStrategy: UrlHandlingStrategy</span><br><span class="line">  routeReuseStrategy: RouteReuseStrategy</span><br><span class="line">  onSameUrlNavigation: 'reload'|'ignore'</span><br><span class="line">  config: Routes</span><br><span class="line">  initialNavigation(): void</span><br><span class="line">  setUpLocationChangeListener(): void</span><br><span class="line">  <span class="keyword">get</span> url: string</span><br><span class="line">  resetConfig(config: Routes): void</span><br><span class="line">  ngOnDestroy(): void</span><br><span class="line">  dispose(): void</span><br><span class="line">  createUrlTree(commands: any[], navigationExtras: NavigationExtras = &#123;&#125;): UrlTree</span><br><span class="line">  navigateByUrl(url: string|UrlTree, <span class="attr">extras</span>: NavigationExtras = &#123;<span class="attr">skipLocationChange</span>: <span class="literal">false</span>&#125;): <span class="built_in">Promise</span>&lt;boolean&gt;</span><br><span class="line">  navigate(commands: any[], <span class="attr">extras</span>: NavigationExtras = &#123;<span class="attr">skipLocationChange</span>: <span class="literal">false</span>&#125;): <span class="built_in">Promise</span>&lt;boolean&gt;</span><br><span class="line">  serializeUrl(url: UrlTree): string</span><br><span class="line">  parseUrl(url: string): UrlTree</span><br><span class="line">  isActive(url: string|UrlTree, <span class="attr">exact</span>: boolean): boolean</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本项目例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">gotoDetail (&#123; entry &#125;) &#123;</span><br><span class="line">  <span class="keyword">this</span>.router.navigate([<span class="string">`/detail/<span class="subst">$&#123;entry&#125;</span>`</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两个例子相比文档的概览都是最简单的用法，有需要的话可以看下其它方法，基本可以满足所有的路由需求。</p>
<h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p>这里不同于 vue 和 react，angular 提供了前端全栈的解决方案，包含了 http 模块，只需要在 <code>app.module.ts</code> 里面引入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; HttpClientModule &#125; from &#39;@angular&#x2F;common&#x2F;http&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; ...</span><br><span class="line">imports: [</span><br><span class="line">  HttpClientModule</span><br><span class="line">]</span><br><span class="line">&#x2F;&#x2F; ...</span><br></pre></td></tr></table></figure>

<p>请求的语法也很简单，具体可以到 github 看代码。</p>
<p>这里说一个小坑，在实现 <code>detail</code> 路由的时候在 <code>ngOnInit</code> 钩子里拿到当前路由参数进行请求，改变路由时没有触发请求更新，最后改版如下。</p>
<p>代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ngOnInit () &#123;</span><br><span class="line">  <span class="keyword">this</span>.route.params.subscribe(<span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.loading = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> apiURL = <span class="string">`https://dict.youdao.com/jsonapi?q=<span class="subst">$&#123;params[<span class="string">'word'</span>]&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.http.get(<span class="string">`/?url=<span class="subst">$&#123;<span class="built_in">encodeURIComponent</span>(apiURL)&#125;</span>`</span>)</span><br><span class="line">    .subscribe(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// set component data</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.loading = <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>之前无效是因为没写 <code>this.route.params.subscribe((params) =&gt; {})</code>，所以每次不会触发监听</p>
<p>这里的 <code>subscribe</code> 会一直监听 <code>this.route.params</code> 的变化。</p>
<h2 id="请求路径"><a href="#请求路径" class="headerlink" title="请求路径"></a>请求路径</h2><p>如同 axios 的 baseURL，在请求时我们不希望每个请求都写完整路径，需要配置全局的 baseURL 来使得请求路径简短。</p>
<p>angular 里面需要一个 <code>@Injectable</code>，熟悉的概念——依赖注入，关于细则有跟多文章介绍，这里说下针对此需求的解决方案</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">ExampleInterceptor</span> <span class="title">implements</span> <span class="title">HttpInterceptor</span> </span>&#123;</span><br><span class="line">  intercept(req: HttpRequest&lt;any&gt;, <span class="attr">next</span>: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">'https://proxy-oagpwnbkpe.now.sh'</span></span><br><span class="line"></span><br><span class="line">    req = req.clone(&#123;</span><br><span class="line">      url: url + req.url</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next.handle(req)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">providers: [</span><br><span class="line">  AppComponent,</span><br><span class="line">  &#123; <span class="attr">provide</span>: HTTP_INTERCEPTORS, <span class="attr">useClass</span>: ExampleInterceptor, <span class="attr">multi</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<p>这段代码解决了 baseURL 的问题。</p>
<h2 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h2><p>注意到上一节的这里 <code>const url = &#39;https://proxy-oagpwnbkpe.now.sh&#39;</code>，根路径不是有道的路径。</p>
<p>还是做了一层 node 的 proxy 处理。跨域问题还是要处理。</p>
<p>node 服务的代码也十分简单，这里使用了 <a href="https://github.com/wendux/fly" target="_blank" rel="noopener">fly</a> 进行 node 端请求</p>
<p>代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> fly = <span class="built_in">require</span>(<span class="string">'flyio'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> data = <span class="keyword">await</span> fly.get(req.query.url).then(<span class="function"><span class="params">res</span> =&gt;</span> res.data)</span><br><span class="line"></span><br><span class="line">  res.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>)</span><br><span class="line"></span><br><span class="line">  res.send(data)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(process.env.PORT || <span class="number">3001</span>)</span><br></pre></td></tr></table></figure>

<p>重点是在返回头 set 一个 <code>Access-Control-Allow-Origin: *</code>，这样浏览器就不会拦截请求了。</p>
<h2 id="数据流动"><a href="#数据流动" class="headerlink" title="数据流动"></a>数据流动</h2><p>在 <code>detail</code> 页面，拆分了 5 个子组件，当然父子组件是十分简单的单向数据流</p>
<p>例：父组件的 html 如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-detail-phrs-list-tab</span> [<span class="attr">simple</span>]=<span class="string">"simple"</span> [<span class="attr">ec</span>]=<span class="string">"ec"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-detail-phrs-list-tab</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>子组件的 <code>component.ts</code> 如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailPhrsListTabComponent</span> </span>&#123;</span><br><span class="line">  @Input() simple</span><br><span class="line">  @Input() ec</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就可以使用 <code>@Input</code> 取到父组件传进来的值了，说到这里全局的状态管理怎么做，要看下项目的复杂度</p>
<p>简单的全局状态管理可以创建一个 <code>global.ts</code>，再创建依赖注入，如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// globals.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Globals</span> </span>&#123;</span><br><span class="line">  role: string = <span class="string">'test'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在组件中可以这样调用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// hello.component.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Globals &#125; <span class="keyword">from</span> <span class="string">'./globals'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'hello'</span>,</span><br><span class="line">  template: <span class="string">'The global role is &#123;&#123;globals.role&#125;&#125;'</span>,</span><br><span class="line">  providers: [Globals]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloComponent</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(private globals: Globals) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另一种方式是 SPA 开发者熟悉的全局状态管理库，如 flex, redux</p>
<p>angular 也提供了 <a href="https://github.com/angular-redux/store" target="_blank" rel="noopener">angular-redux</a>，复杂应用中建议使用。</p>
<h2 id="打包上线"><a href="#打包上线" class="headerlink" title="打包上线"></a>打包上线</h2><p>打包命令围绕 <code>ng build</code>，提供几种配置参数，这里不赘述，</p>
<p>部署这里使用的是 <a href="http://surge.sh/" target="_blank" rel="noopener">surge</a></p>
<p>友情提示：不要将私有项目部署到此类公开服务，弊端很多。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>不论哪种前端框架，都有它的长处，由于此项目较小，到这里没机会释放 <code>rxjs</code> 的威力，angular-cli 默认装了这个库，处理复杂的异步数据流非常高效，写了好多轮子，毕竟还是样例，但是，折腾不能停。</p>
<h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><p>本次 angular 5 更新相关文档如下</p>
<p>官方文档：<a href="https://next.angular.io/docs" target="_blank" rel="noopener">https://next.angular.io/docs</a><br>官方博客：<a href="https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced" target="_blank" rel="noopener">https://blog.angular.io/version-5-0-0-of-angular-now-available-37e414935ced</a><br>官方cli：<a href="https://github.com/angular/angular-cli/releases/tag/v1.5.0" target="_blank" rel="noopener">https://github.com/angular/angular-cli/releases/tag/v1.5.0</a></p>
<blockquote>
<p>尽量翻墙查看，国内 <a href="https://angular.cn/" target="_blank" rel="noopener">https://angular.cn/</a> 文档还没更新。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Angular</tag>
      </tags>
  </entry>
  <entry>
    <title>Angular 6 服务端渲染之 udao 终章</title>
    <url>/2018/05/10/angular6-udao-ssr/</url>
    <content><![CDATA[<p><img src="/uploads/angular6-udao-ssr1.png" alt=""></p>
<a id="more"></a>

<p>先介绍下小朋友 <strong>udao</strong>，首先是一个开源项目，代码足够简单，其次是跟随 Angular 大小版本一起成长的项目，会定期更新所有依赖包以及兼容最新版本的写法</p>
<p>Github 地址也贴出来好多次了：<a href="https://github.com/OrangeXC/udao" target="_blank" rel="noopener">https://github.com/OrangeXC/udao</a></p>
<p>本来行文目的只是新框架推出，本着学习的目的自己搞个东西出来玩，文章只是记录项目的开发更迭过程，以及遇到的坑。</p>
<p>udao 系列文章有</p>
<ul>
<li><a href="https://orangexc.xyz/2017/11/02/Angular5-udao/">Angular 5 开发一个有道翻译</a></li>
<li><a href="https://orangexc.xyz/2018/01/03/Angular5-udao-ssr/">Angular 5 服务端渲染实战</a></li>
</ul>
<p>从 Angular 5 写到 6，逐步扩展 PWA，SSR 等，今天有读者提了一个 issue，跟着历史文章一步一步学习发现文章写的是 Angular 5，但是 github 项目已经升级到了 Angular 6，是不是要保留多个版本分支？</p>
<p>我的回答是否定的，Angular 版本更迭之快想必大家都了解，每次大小版本的更新我都会在 github 上修改代码，但是不会一直出更新文章，因为每次更新的可能就几行代码，循序渐进的更迭，更希望读者能多一分敏锐的嗅觉，与框架相关的的实战类文章总有退出江湖的一天，取决于框架的升级更新和框架的衰亡，相信当今翻阅 jquery 的实战文章的人寥寥无几，Angular 目前正处于半年一大版的节奏，既然观察到 Angular 6 推出了，准备学习 Angular 5 文章之前就应该先看下作者的项目链接是不是 Angular 5 的项目，况且项目只是参考，写文章想引出更多的是踩坑的过程。</p>
<p>唠叨了这么多之后，正如标题 <strong>终章</strong> udao 系列文章到本篇结束，以后每个版本会持续更新迭代到 github 上，升级的代码变化可以顺着 git commit 记录查到</p>
<h2 id="升级依赖"><a href="#升级依赖" class="headerlink" title="升级依赖"></a>升级依赖</h2><p>首先升级 angular-cli 到最新版本的 6.0，升级之前记得先卸载清 cache</p>
<p>全局</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm uninstall -g @angular/cli</span><br><span class="line">npm cache verify</span><br><span class="line"><span class="comment"># if npm version is &lt; 5 then use `npm cache clean`</span></span><br><span class="line">npm install -g @angular/cli@latest</span><br></pre></td></tr></table></figure>

<p>本地</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rf node_modules dist # use rmdir &#x2F;S&#x2F;Q node_modules dist in Windows Command Prompt; use rm -r -fo node_modules,dist in Windows PowerShell</span><br><span class="line">yarn add @angular&#x2F;cli@latest</span><br><span class="line">yarn</span><br></pre></td></tr></table></figure>

<p>运行 <code>ng update --all</code>，从 angular-cli 1.7 开始支持 update，具体参数见<a href="https://github.com/angular/angular-cli/wiki/update" target="_blank" rel="noopener">https://github.com/angular/angular-cli/wiki/update</a></p>
<p>运行 <code>--all</code> 目的是修改 package.json，否则只提示不修改，亲测这个 <code>--all</code> 参数有坑，会报各种异常，升级版本后还会重复提示升级，遇到警告可以采用降级方案，直接 <code>ng update</code>，根据提示一个一个去 package.json 里修改，再报错就是和这个方法无缘了，采用远古时期方案去 npm 官网一个个查出最新版本更新上去。</p>
<blockquote>
<p>注：typescript 停留在 2.7.2，即可不要升级到 2.8+，yarn 会报警高，也就是 angular-cli 的无脑 bug，<code>ng update --all</code> 建议升级到 2.8.3 不升级它就不往下跑，升级完 2.8.3 安装 yarn 又警告被依赖的 typescript 版本应该 &gt;2.7 &amp; &lt;2.8。</p>
</blockquote>
<p>顺利升级完所有依赖后，别忘了加几个依赖上去</p>
<ul>
<li>yarn add @nguniversal/express-engine</li>
<li>yarn add @nguniversal/module-map-ngfactory-loader</li>
<li>yarn add @angular-devkit/build-angular -D</li>
<li>yarn add webpack -D</li>
<li>yarn add webpack-cli -D</li>
</ul>
<h2 id="服务端入口"><a href="#服务端入口" class="headerlink" title="服务端入口"></a>服务端入口</h2><p>本次升级服务端渲染借助 @nguniversal 实现</p>
<p>首先将 <code>server.ts</code> 从 src 目录移动到根路径，并修改如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// These are important and needed before anything else</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zone.js/dist/zone-node'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'reflect-metadata'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; enableProdMode &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> express <span class="keyword">from</span> <span class="string">'express'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Faster server renders w/ Prod mode (dev mode never needed)</span></span><br><span class="line">enableProdMode();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Express server</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> PORT = process.env.PORT || <span class="number">4000</span>;</span><br><span class="line"><span class="keyword">const</span> DIST_FOLDER = join(process.cwd(), <span class="string">'dist'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// * NOTE :: leave this as require() since this file is built Dynamically from webpack</span></span><br><span class="line"><span class="keyword">const</span> &#123; AppServerModuleNgFactory, LAZY_MODULE_MAP &#125; = <span class="built_in">require</span>(<span class="string">'./dist/server/main'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Express Engine</span></span><br><span class="line"><span class="keyword">import</span> &#123; ngExpressEngine &#125; <span class="keyword">from</span> <span class="string">'@nguniversal/express-engine'</span>;</span><br><span class="line"><span class="comment">// Import module map for lazy loading</span></span><br><span class="line"><span class="keyword">import</span> &#123; provideModuleMap &#125; <span class="keyword">from</span> <span class="string">'@nguniversal/module-map-ngfactory-loader'</span>;</span><br><span class="line"></span><br><span class="line">app.engine(<span class="string">'html'</span>, ngExpressEngine(&#123;</span><br><span class="line">  bootstrap: AppServerModuleNgFactory,</span><br><span class="line">  providers: [</span><br><span class="line">    provideModuleMap(LAZY_MODULE_MAP)</span><br><span class="line">  ]</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'html'</span>);</span><br><span class="line">app.set(<span class="string">'views'</span>, join(DIST_FOLDER, <span class="string">'browser'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> implement data requests securely</span></span><br><span class="line">app.get(<span class="string">'/api/*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.status(<span class="number">404</span>).send(<span class="string">'data requests are not supported'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server static files from /browser</span></span><br><span class="line">app.get(<span class="string">'*.*'</span>, express.static(join(DIST_FOLDER, <span class="string">'browser'</span>)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// All regular routes use the Universal engine</span></span><br><span class="line">app.get(<span class="string">'*'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; req &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Start up the Node server</span></span><br><span class="line">app.listen(PORT, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Node server listening on http://localhost:<span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>此文件需要 webpack 单独打包，由于升级到了 webpack 4，原来的 webpack 3.x 语法需要稍作修改</p>
<p><code>webpack.config.js</code> 更名为 <code>webpack.server.config.js</code>，准确表达打包的目标</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123; <span class="attr">server</span>: <span class="string">'./server.ts'</span> &#125;,</span><br><span class="line">  resolve: &#123; <span class="attr">extensions</span>: [<span class="string">'.js'</span>, <span class="string">'.ts'</span>] &#125;,</span><br><span class="line">  target: <span class="string">'node'</span>,</span><br><span class="line">  mode: <span class="string">'none'</span>,</span><br><span class="line">  <span class="comment">// this makes sure we include node_modules and other 3rd party libraries</span></span><br><span class="line">  externals: [<span class="regexp">/node_modules/</span>],</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [&#123; <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>, <span class="attr">loader</span>: <span class="string">'ts-loader'</span> &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// Temporary Fix for issue: https://github.com/angular/angular/issues/11580</span></span><br><span class="line">    <span class="comment">// for 'WARNING Critical dependency: the request of a dependency is an expression'</span></span><br><span class="line">    <span class="keyword">new</span> webpack.ContextReplacementPlugin(</span><br><span class="line">      /(.+)?angular(\\|\/)core(.+)?<span class="regexp">/,</span></span><br><span class="line"><span class="regexp">      path.join(__dirname, 'src'), /</span><span class="regexp">/ location of your src</span></span><br><span class="line"><span class="regexp">      &#123;&#125; /</span><span class="regexp">/ a map of your routes</span></span><br><span class="line"><span class="regexp">    ),</span></span><br><span class="line"><span class="regexp">    new webpack.ContextReplacementPlugin(</span></span><br><span class="line"><span class="regexp">      /</span>(.+)?express(\\|\/)(.+)?<span class="regexp">/,</span></span><br><span class="line"><span class="regexp">      path.join(__dirname, 'src'),</span></span><br><span class="line"><span class="regexp">      &#123;&#125;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  ]</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br></pre></td></tr></table></figure>

<p>整个服务端入口完成了，下面搞一下服务端打包</p>
<h2 id="服务端打包"><a href="#服务端打包" class="headerlink" title="服务端打包"></a>服务端打包</h2><p>服务端渲染项目，大家印象比较深刻的地方就是，客户端和服务端分别打两个 bundle，分别供浏览器和服务器执行。</p>
<p>这里也不例外</p>
<p>src 下面的 <code>main.server.ts</code> 指向了打包入口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> &#123; AppServerModule &#125; <span class="keyword">from</span> <span class="string">'./app/app.server.module'</span>;</span><br></pre></td></tr></table></figure>

<p>看下 <code>src/app/app.server.module</code> 里面有哪些修改</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ModuleMapLoaderModule &#125; <span class="keyword">from</span> <span class="string">'@nguniversal/module-map-ngfactory-loader'</span>;</span><br><span class="line">...</span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    ...</span><br><span class="line">    ModuleMapLoaderModule</span><br><span class="line">  ]</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>增加了 <code>ModuleMapLoaderModule</code> 作用是使用模块映射代替原来的模块懒加载，加快 node 环境下的运行速度，整个 bundle 打包下来只有一个 js 文件 6M 多</p>
<h2 id="客户端入口"><a href="#客户端入口" class="headerlink" title="客户端入口"></a>客户端入口</h2><p>客户端部分和上一版 Angular 5 的项目差不多，这里面优化了 module 的拆分，将 router 和 ui 部分抽离到单独的文件再引入，使得 app.module 文件不那么臃肿。</p>
<p>添加了 console 记录页面的渲染环境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(</span><br><span class="line">    @Inject(PLATFORM_ID) private platformId: Object,</span><br><span class="line">    @Inject(APP_ID) private appId: string) &#123;</span><br><span class="line">    <span class="keyword">const</span> platform = isPlatformBrowser(platformId) ?</span><br><span class="line">      <span class="string">'in the browser'</span> : <span class="string">'on the server'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Running <span class="subst">$&#123;platform&#125;</span> with appId=<span class="subst">$&#123;appId&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>代码层面的修改，上面介绍的差不多了，接下来是配置文件，从命名到写法都是 breaking change</p>
<p>首先根路径下 <code>.angular-cli.json</code> 更名为 <code>angular.json</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"$schema"</span>: <span class="string">"./node_modules/@angular/cli/lib/config/schema.json"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"newProjectRoot"</span>: <span class="string">"projects"</span>,</span><br><span class="line">  <span class="attr">"projects"</span>: &#123;</span><br><span class="line">    <span class="attr">"udao"</span>: &#123;</span><br><span class="line">      <span class="attr">"root"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"sourceRoot"</span>: <span class="string">"src"</span>,</span><br><span class="line">      <span class="attr">"projectType"</span>: <span class="string">"application"</span>,</span><br><span class="line">      <span class="attr">"prefix"</span>: <span class="string">"app"</span>,</span><br><span class="line">      <span class="attr">"schematics"</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">"architect"</span>: &#123;</span><br><span class="line">        <span class="attr">"build"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"serve"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"extract-i18n"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"test"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"lint"</span>: &#123;&#125;,</span><br><span class="line">        <span class="attr">"server"</span>: &#123;</span><br><span class="line">          <span class="attr">"builder"</span>: <span class="string">"@angular-devkit/build-angular:server"</span>,</span><br><span class="line">          <span class="attr">"options"</span>: &#123;</span><br><span class="line">            <span class="attr">"outputPath"</span>: <span class="string">"dist/server"</span>,</span><br><span class="line">            <span class="attr">"main"</span>: <span class="string">"src/main.server.ts"</span>,</span><br><span class="line">            <span class="attr">"tsConfig"</span>: <span class="string">"src/tsconfig.server.json"</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"udao-e2e"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"defaultProject"</span>: <span class="string">"udao"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个文件具体怎么从 angular 5 版本迁移过来的，因为没有迁移文档说明，干脆用最新的 cli 新建一个项目，把对应的值和入口替换，上面经过精简的 json 关键是 architect 里的 server，作用是指明服务端构建的工具，入口，出口，配置项。</p>
<p>一眼看上去与原来的配置文件相比，多了一层 projects，也就是支持多项目构建。</p>
<h2 id="PWA-升级"><a href="#PWA-升级" class="headerlink" title="PWA 升级"></a>PWA 升级</h2><p>这也是 udao 进阶 PWA 的点睛之笔，升级过程更是 angular-cli 本次升级的精华所在。</p>
<p>升级之前把原来所有与 PWA 配置相关的代码全部删除，切忌保留任何相关代码，否则会带来不必要的麻烦，事先最好先卸载已有的 <code>@angular/pwa</code> 包，清理完毕后只需要一行代码搞定 PWA</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ng add @angular/pwa --project *project-name*</span><br></pre></td></tr></table></figure>

<p>没错，项目里 PWA 相关的代码都填充到对应位置了，什么都不用修改。</p>
<blockquote>
<p>这个 PWA 和 SSR 本身有那么一点冲突，怎么讲呢，两者同样是为了加快页面首屏速度，<code>@angular/pwa</code> 中的 service-worker 扩展默认会把 html 文件缓存到本地，这个 html 的内容部分是空的，每次访问网页时 service-worker 先进行请求拦截，把空内容页面抛出来，数据请求完全发生在前端，而我们希望的 SSR 是首屏请求在 node 端完成，直出完整 html，页面也不会 loading 和白屏，但是不加 PWA 又不能离线和缓存其它资源，好吧，这些细节上的问题可能没那么多人关心，当然有更好的解决方案欢迎交流。</p>
</blockquote>
<h2 id="语法变化"><a href="#语法变化" class="headerlink" title="语法变化"></a>语法变化</h2><p>rxjs 升级到 6.x 引入方式和用法需要调整，项目太大不想调整的话 rxjs 提供了降级兼容方案 <code>rxjs-compat</code>，直接 npm 安装即可。</p>
<h2 id="更新脚本"><a href="#更新脚本" class="headerlink" title="更新脚本"></a>更新脚本</h2><p>既然入口文件和配置文件都做了相应的修改，那 npm 的 script 命令也要跟着更新一波了</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"ng serve"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node dist/server.js"</span>,</span><br><span class="line">    <span class="attr">"build:ssr"</span>: <span class="string">"run-s build:client-and-server-bundles webpack:server"</span>,</span><br><span class="line">    <span class="attr">"build:client-and-server-bundles"</span>: <span class="string">"ng build --prod &amp;&amp; ng run udao:server"</span>,</span><br><span class="line">    <span class="attr">"webpack:server"</span>: <span class="string">"webpack --config webpack.server.config.js --progress --colors"</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：到这里运行 <code>npm run build:ssr</code> 即可整体打包，不可将 <code>build:client-and-server-bundles</code> 和 <code>webpack:server</code> 调换位置，因为 server.ts 入口文件中有对打包好的 server bundle 的引用 <code>require(&#39;./dist/server/main&#39;)</code></p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里 udao 小朋友成功的从 Angular 5 成功迈向了 Angular 6，也是本系列的最后一篇终章，总之 Angular 6 也有被历史淘汰的一天，拥抱变化吧，喜欢玩 Angular 最新版本的欢迎关注一波 Github，这里并没有鼓吹大家 fork 和 star，感兴趣就随便看看，也没达到让大家作为范例的程度，整体来讲版本的更新非常及时，功能的更新非常缓慢。</p>
]]></content>
      <tags>
        <tag>Angular</tag>
        <tag>SSR</tag>
      </tags>
  </entry>
  <entry>
    <title>返回顶部的几种实现</title>
    <url>/2016/12/07/back-to-top/</url>
    <content><![CDATA[<p><img src="/uploads/back-to-top1.jpg" alt=""></p>
<p>返回顶部的按钮大家并不陌生，针对长滚动条的信息流页面添加返回顶部的按钮可以给用户良好的体验，而返回顶部的实现也是多种多样，本文分享几个案例并给出评价</p>
<p>作为引子讲一个常用的案例，对与不知道的作为一个小彩蛋吧！对于微博与微信朋友圈的返回顶部可以双击最顶部的区域（包含时间，网络，电量）来返回顶部</p>
<p>大家见过哪些创意的返回顶部呢？欢迎留言交流，下面进入正文</p>
<a id="more"></a>

<h2 id="直接跳转的方式"><a href="#直接跳转的方式" class="headerlink" title="直接跳转的方式"></a>直接跳转的方式</h2><p>对于追求极简的方式达到预期效果的人可能会喜欢这种方式，不托泥带水也不用考虑兼容问题</p>
<p>国内的大站如<a href="http://www.sina.com.cn/" target="_blank" rel="noopener">新浪主页</a>,<a href="https://www.taobao.com/" target="_blank" rel="noopener">淘宝网</a>,<a href="https://www.jd.com/" target="_blank" rel="noopener">京东</a>,<a href="http://news.baidu.com/" target="_blank" rel="noopener">百度新闻</a></p>
<p>不难发现此类的大站为了兼容性与浏览器渲染速度选择了<strong>直接跳转的方式</strong>，实现基本含两种方式</p>
<h3 id="命名锚点跳转的方式"><a href="#命名锚点跳转的方式" class="headerlink" title="命名锚点跳转的方式"></a>命名锚点跳转的方式</h3><blockquote>
<p>用锚点 #top（可变）返回到顶部预设的 id 为 top（可变）的元素，或者在页面顶部的 a 标签 name 属性值为 top（可变），新版本的浏览器（chrome等）默认支持 #top 锚点返回顶部且不需要前面所提条件，但是前面条件的优先级大于默认跳转。</p>
</blockquote>
<p>上面说的有些绕口，下面逐句解释，读明白且理解的可以直接看下节</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!-- fiexd 定位在页面右下角 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"top"</span>&gt;</span>顶部<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  <span class="comment">&lt;!-- id 为 top --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">name</span>=<span class="string">"top"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!-- a 标签且 name 为 top --&gt;</span></span><br></pre></td></tr></table></figure>

<p>上面代码包含了所有的描述，简单易懂，下面说下优先级，这个是关键，避免无意中犯了错误却无从下手</p>
<blockquote>
<p>注意: id &gt; name &gt; 默认</p>
</blockquote>
<p>不建议大家用默认的方式，具体有兼容问题和优先级低的问题，id 与 name 均可，但要注意命名冲突</p>
<h3 id="scroll-函数跳转"><a href="#scroll-函数跳转" class="headerlink" title="scroll 函数跳转"></a>scroll 函数跳转</h3><blockquote>
<p>window.scroll(x, y) 方法，x 是水平滚动位置，y 是垂直滚动位置，必须两个参数都给进去不然会报错，大家可能发现有 window.scrollY，这里只改变垂直方向的滚动为什么不能用，一个方面它返回的不是函数无法传参，另一方面无法被赋值</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript: scroll(0, 0)"</span>&gt;</span>返回顶部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里方便展示，实际不建议在标签内使用 js，可以调用一个方法，简单易懂。</p>
<h2 id="setTimeout-模拟滚动动画"><a href="#setTimeout-模拟滚动动画" class="headerlink" title="setTimeout 模拟滚动动画"></a>setTimeout 模拟滚动动画</h2><blockquote>
<p>setTimeout() 方法递归调用，改变滚动条距顶部位置</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">window</span>.scrollBy(<span class="number">0</span>, <span class="number">-100</span>)</span><br><span class="line"></span><br><span class="line">  scrolldelay = setTimeout(<span class="string">'backTop()'</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sTop = <span class="built_in">document</span>.documentElement.scrollTop + <span class="built_in">document</span>.body.scrollTop</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sTop === <span class="number">0</span>) &#123;</span><br><span class="line">    clearTimeout(scrolldelay)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意优化网页资源，使用不当会非常卡顿，可以通过调节 setTimeout 的第二个参数来控制滚动速度(回调时间单位 ms)，下面解释声明sTop 变量的写法</p>
<p>获取scrollTop值，声明了DTD的标准网页取 document.documentElement.scrollTop，否则取 document.body.scrollTop 因为二者只有一个会生效，另一个就恒为 0，所以取和值可以得到网页的真正的 scrollTop 值</p>
<blockquote>
<p>注：非标准版（webkit 内核）采用的是 <code>document.body.scrollTop</code></p>
</blockquote>
<h2 id="window-requestAnimationFrame"><a href="#window-requestAnimationFrame" class="headerlink" title="window.requestAnimationFrame"></a>window.requestAnimationFrame</h2><blockquote>
<p>window.requestAnimationFrame() 这个方法是用来在页面重绘之前，通知浏览器调用一个指定的函数，以满足开发者操作动画的需求。这个方法接受一个函数为参，该函数会在重绘前调用。</p>
</blockquote>
<p>完整的文档看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestAnimationFrame" target="_blank" rel="noopener">MDN</a> 和 <a href="http://javascript.ruanyifeng.com/htmlapi/requestanimationframe.html" target="_blank" rel="noopener">JavaScript 标准参考教程（alpha）</a>，里面有详细描述和兼容性详情</p>
<p>看过文档发现 requestAnimationFrame 适合用于连续的动画，而我们的需求与连续动画关系大吗？我们不妨一试。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> isWebkit = navigator.userAgent.toLowerCase().match(<span class="regexp">/webkit\/([\d.]+)/</span>)</span><br><span class="line"><span class="keyword">const</span> requestAnimationFrame = <span class="built_in">window</span>.requestAnimationFrame || <span class="built_in">window</span>.mozRequestAnimationFrame || <span class="built_in">window</span>.webkitRequestAnimationFrame || <span class="built_in">window</span>.msRequestAnimationFrame</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> move = <span class="built_in">window</span>.scrollY</span><br><span class="line">  <span class="keyword">let</span> span = move / <span class="number">15</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">step</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement.scrollTop + <span class="built_in">document</span>.body.scrollTop &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (isWebkit) &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.scrollTop -= <span class="number">300</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.documentElement.scrollTop -= <span class="number">300</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      requestAnimationFrame(step)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  requestAnimationFrame(step)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码为什么定义 move 与 span 这里是方便计算速度，粘贴代码运行你会发现滚动的距离越大速度就会越快，反而会越慢</p>
<p>这种用法本质上可以使动画更加流畅，但是重点在于页面优化，requestAnimationFrame是在主线程上完成。这意味着，如果主线程非常繁忙，requestAnimationFrame的动画效果会大打折扣。</p>
<h2 id="借助-jQuery"><a href="#借助-jQuery" class="headerlink" title="借助 jQuery"></a>借助 jQuery</h2><p>目前的前端把焦点从 jQuery 移到了 MVVM 框架，不论如何当初的 jQuery 对于 DOM 操作与低版本浏览器兼容贡献巨大。如果你即考虑兼容性又想要流畅的动画可以继续使用 jQuery。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span> (<span class="params">minHeight</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> backTopHtml = <span class="string">'&lt;div id="backTopBtn"&gt;返回顶部&lt;/div&gt;'</span></span><br><span class="line"></span><br><span class="line">  $(<span class="string">'#page'</span>).append(backTopHtml)</span><br><span class="line"></span><br><span class="line">  $(<span class="string">'#backTopBtn'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'html, body'</span>).animate(&#123;<span class="attr">scrollTop</span>: <span class="number">0</span>&#125;, <span class="number">700</span>)</span><br><span class="line">  &#125;).hover(</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).addClass(<span class="string">'hover'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      $(<span class="keyword">this</span>).removeClass(<span class="string">'hover'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  minHeight ? minHeight = minHeight : minHeight = <span class="number">600</span></span><br><span class="line"></span><br><span class="line">  $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s = $(<span class="built_in">window</span>).scrollTop()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s &gt; minHeight) &#123;</span><br><span class="line">      $(<span class="string">'#backTopBtn'</span>).fadeIn(<span class="number">100</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">'#backTopBtn'</span>).fadeOut(<span class="number">100</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">backTop()</span><br></pre></td></tr></table></figure>

<p>这里初始状态的返回顶部为不可见，通过判断页面滚动高度切换显示隐藏，hover 的样式可以自己设计。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结了几种返回顶部的方式，orange 认为滚动或跳转对用户体验并没有影响（影响用户体验的是有没有返回顶部的按钮），既然选择了返回顶部的按钮那么性能一定是第一位的，一味追求滚动动画导致页面滚动过程中卡顿进而影响了整个网页的用户体验，在这个细节上负面的例子太多不一一列举。</p>
<p>总之本文的用意除了阐述各个方法的用法外还想提醒大家在前端开发中细节才是致命的，orange 也一直在踩坑，说到聪明的大厂为什么选用跳转，哈哈，先回去看看负面教材给我们的教训就知道了，技术点不在于滚动，而在于整个网页的优化，如果你的网站优化的足够好，那么拿滚动来炫技没人会反对。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自己动手实现一个 Flex 布局框架</title>
    <url>/2016/10/14/css-flex-custom/</url>
    <content><![CDATA[<p><img src="/uploads/css-flex-custom1.png" alt=""></p>
<p>本文作为 Flex 布局进阶，不对基础做详细介绍，关于 Flex 基础知识请到阮一峰老师的<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></p>
<p>看过基础，或者已经使用 Flex 布局的朋友可以根据本文试着动手写一写，先不急着开工，看看其它大型框架怎么实现的。</p>
<a id="more"></a>

<h2 id="Bootstrap-框架"><a href="#Bootstrap-框架" class="headerlink" title="Bootstrap 框架"></a>Bootstrap 框架</h2><p>相信大家都用过 Bootstrap 框架，目前最受欢迎的响应式布局框架，在 Github 上 10w＋ 的 star</p>
<p>而其中的栅格系统深入人心，针对不同尺寸的屏幕提供一套完整布局方案，不了解栅格系统的可以看<a href="http://v3.bootcss.com/css/#grid" target="_blank" rel="noopener">中文官方文档栅格系统</a></p>
<p>对于新人概念有点多，跳跃性挺强，不过跟着跳转链接一步一步摸索很快就能入门，这里给的都是中文链接。</p>
<p>给出一段栅格系统的代码片段</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-1"</span>&gt;</span>.col-md-1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span>.col-md-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>.col-md-6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css-flex-custom2.png" alt=""></p>
<p>这里栅格系统将屏幕水平均分成 12 份。通过加对应的 class 调整布局。语法也通俗易懂不过多解释。</p>
<p>再来看另一个列偏移的例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-4"</span>&gt;</span>.col-md-4 .col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-md-offset-3"</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-md-offset-3"</span>&gt;</span>.col-md-3 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6 col-md-offset-3"</span>&gt;</span>.col-md-6 .col-md-offset-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css-flex-custom3.png" alt=""></p>
<p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。例如，<code>.col-md-offset-4</code> 类将 <code>.col-md-4</code> 元素向右侧偏移了4个列（column）的宽度。</p>
<p>看到这里大家感觉这个方案很完美，既有相应布局又有布局的偏移，但我的项目需求是这样的</p>
<p><img src="/uploads/css-flex-custom4.png" alt=""></p>
<p>这里单选按钮和票的名称居左，而票价居右，左右给相同的 <code>padding</code> 后，单选按钮和票价分别在左右处于临界状态，我并不知道右侧的票价占几个栅格，也不知道左侧的偏移到底给多少合适（因为票价是变量，可能 10 位数，当然可能性为 0）</p>
<p>了解 flex 基础的一眼识破，不是有 <code>space-between</code> 嘛，对就是它，不了解的朋友继续转到文章开头的链接温习一下。</p>
<p>下文我们去找设计灵感</p>
<h2 id="Angular-Material-框架"><a href="#Angular-Material-框架" class="headerlink" title="Angular Material 框架"></a>Angular Material 框架</h2><p>What is Angular Material?</p>
<blockquote>
<p>For developers using AngularJS, Angular Material is both a UI Component framework and a reference implementation of Google’s Material Design Specification. This project provides a set of reusable, well-tested, and accessible UI components based on Material Design.</p>
</blockquote>
<p>用过 AngularJS 的人应该多少有所耳闻，没听说的也没关系。我们学习的是设计思想而不是研讨一门框架。</p>
<p>这里的案例来源于：<a href="https://material.angularjs.org/1.0.8/layout/alignment" target="_blank" rel="noopener">https://material.angularjs.org/1.0.8/layout/alignment</a></p>
<p>上面链接是 Angular Material 框架布局部分的 API 文档，文档下方有单选按钮组合来呈现不同的布局实现。</p>
<p>先给出基本代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout</span>=<span class="string">"row"</span> <span class="attr">layout-align</span>=<span class="string">"center center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>three<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css-flex-custom5.png" alt=""></p>
<p>其它属性如下，</p>
<p><img src="/uploads/css-flex-custom6.jpg" alt=""></p>
<p>进入上方链接可以在线感受一下，所有布局效果，这里不一一截图</p>
<p>同样也支持栅格系统不过这里更精密一些，是 100 份的均分，官网例子给的特别全面，链接： <a href="https://material.angularjs.org/1.0.8/layout/children" target="_blank" rel="noopener">https://material.angularjs.org/1.0.8/layout/children</a></p>
<p>这里给大家选出一个比较通用的例子，代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout</span>=<span class="string">"row"</span> <span class="attr">layout-wrap</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>=<span class="string">"30"</span>&gt;</span></span><br><span class="line">    [flex="30"]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>=<span class="string">"45"</span>&gt;</span></span><br><span class="line">    [flex="45"]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>=<span class="string">"25"</span>&gt;</span></span><br><span class="line">    [flex="25"]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>=<span class="string">"33"</span>&gt;</span></span><br><span class="line">    [flex="33"]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>=<span class="string">"66"</span>&gt;</span></span><br><span class="line">    [flex="66"]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>=<span class="string">"50"</span>&gt;</span></span><br><span class="line">    [flex="50"]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>&gt;</span></span><br><span class="line">    [flex]</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css-flex-custom7.png" alt=""></p>
<p>代码简洁易懂，<code>layout=&quot;row&quot;</code>表示在水平方向分布，最后的 <code>flex</code> 不带参数表明自动填充，将不带 <code>flex</code> 属性的元素之前的空间填满。</p>
<p>下面我们回到需求，针对需求给出 html 结构的设想</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">flex</span>&gt;</span>单选按钮和票的名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>票价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者干脆</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">layout</span>=<span class="string">"row"</span> <span class="attr">layout-align</span>=<span class="string">"space-between center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>单选按钮和票的名称<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>票价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>好，有的朋友说使用 <code>float</code> 或者 <code>text-align</code> 也可以满足需求的啊，干嘛写这么长篇幅的文章解释这个案例？</p>
<p>问的好，首先 flex 布局优势特别明显，弹性布局，不存在兼容问题，也不用清除浮动。</p>
<p>设想一下项目复杂度再大一点呢，守旧的方案还能不能保持清晰的 html 文档结构？css 又该从哪里下手？</p>
<p>既然我们出发点是对的，接下来选择一下设计模式。</p>
<p>简单说两种模式</p>
<ul>
<li>class 属性为代表的 Bootstrap 框架</li>
<li>自定义属性为代表的 Angular Material 框架</li>
</ul>
<p>我个人认为 class 过多导致布局和样式混在一起不好分辨，后期维护较困难，决定采用 Angular Material 框架的设计模式。</p>
<p>首先大家要了解 <a href="http://www.w3school.com.cn/css/css_selector_attribute.asp" target="_blank" rel="noopener">css 属性选择器</a>，常用的有 class选择器，id选择器，tag选择器，属性选择器还是比较少用的。</p>
<p>下面给 w3school 的截图，子串匹配属性选择器的语法</p>
<p><img src="/uploads/css-flex-custom8.png" alt=""></p>
<p>简单易懂，下面直接上写好的代码 <code>layout.scss</code></p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-attr">[layout]</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[flex]</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-wrap]</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout="row"]</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-wrap]</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout="column"]</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-align="start start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="start center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="start end"]</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-align="center start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="center center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="center end"]</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-align="end start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="end center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="end end"]</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-align="space-between start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-between center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-between end"]</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-align="space-arround start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-arround center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-arround end"]</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-arround;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-align="start start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="center start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="end start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-between start"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-arround start"]</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-align="start center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="center center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="end center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-between center"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-arround center"]</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[layout-align="start end"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="center end"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="end end"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-between end"]</span>,</span><br><span class="line"><span class="selector-attr">[layout-align="space-arround end"]</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好，到这为止我们的 flex 框架已经实现了，效果语法和 Angular Material 框架是一样的。大家自行尝试。</p>
<p>细心的朋友发现这里 orange 并没有实现栅格系统，因为现实需求中栅格系统布局的实用价值不是很大（各元素宽度根据内容变化，手机端在元素宽度不变的情况可以通过相同的 rem 值针对不同屏幕适配，而 n 等分可以通过 <code>space-arround</code> 属性实现），而且本文把开发的重点放在了 flex 的封装上。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在现代复杂 css 样式的开发中，尽量避免重复书写相同的布局代码，除非特殊需求（真对相应的 class 给样式），这样既满足模块化思想又保证了代码复用，项目中只需引入 <code>layout.scss</code> 即可。如果你针对 css 代码模块化有不同的想法欢迎留言交流。</p>
]]></content>
      <tags>
        <tag>Flex</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 行内对齐的黑魔法</title>
    <url>/2016/10/15/css-inline-alignment/</url>
    <content><![CDATA[<p><img src="/uploads/css-inline-alignment1.png" alt=""></p>
<p>本文和以前的文章类似，orange 尽量带给大家分享实际项目中的坑怎么填，当然只是提供思想，方法很多欢迎讨论，还有就是对于刚上手前端的新人不是特别友好，没关系，涉及到基础知识我会对应的进行指引，给出链接或给出提示，大家可以自行 Google(百度)。</p>
<p>说到行内对齐大家可能会想到类似水平对齐，垂直对齐总结类型的文章，既然我们叫 <strong>黑魔法</strong> 就不会是基础的对齐教程，基础教程的文章好多，大家想必都知道多种方法实现对齐</p>
<a id="more"></a>

<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>还是 orange 所在公司的移动端项目，上案例</p>
<p><img src="/uploads/css-inline-alignment2.png" alt=""></p>
<p>截多了，咱们只看第一行的文字，算是每一天都有的 title，有人说: TMD 你在逗我？这有什么可讲的谁都会写好不好！</p>
<p>先别激动，我当然不是解释这个布局怎么实现的，简单的例子更容易解释问题，继续往下看初步实现的代码，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"date-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"date"</span>&gt;</span>14 OCT<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"multiple"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>今日瞎选6篇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.date-wrap</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 60px;</span><br><span class="line">    position: relative;</span><br><span class="line"></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 60px;</span><br><span class="line"></span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.multiple</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#f8ac08</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>截图如下</p>
<p><img src="/uploads/css-inline-alignment3.png" alt=""></p>
<p>细心的朋友看出问题了，看不出也没关系，我们加两条辅助线嘛！</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"date-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"date"</span>&gt;</span>14 OCT<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"multiple"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>今日瞎选6篇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line-bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="comment">/* 这里是前面的样式，不重复给出 */</span></span></span><br><span class="line"><span class="css">  <span class="selector-class">.line-top</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 21px;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.line-bottom</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 21px;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css-inline-alignment4.png" alt=""></p>
<p>好，相信大家现在一目了然存在的问题了，那就是前面的 date 并没有垂直居中，原因呢！解释起来也简单</p>
<p>这里只需要修改一行代码就能回答大家的疑问</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"date"</span>&gt;</span>14 OCT orange<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>将上文对应 html 修改后，得到截图</p>
<p><img src="/uploads/css-inline-alignment5.png" alt=""></p>
<p>这个让我不禁想起了小学英语作业本的四线格，哈哈，大写字母的确都在上方的两个格，而小写上中下都有例子，单独看 <code>g</code>，很好解释上面的显现了吧。</p>
<p>看似简单的案例还就是这么特殊，恰巧都是数字和大写字母，细心的还会发现后面的 <code>6</code> 也有问题，一不留神，不居中了，设计来找你，你一脸蒙逼的说我是按照居中写的啊，解决不了了？</p>
<p>不是的，我们接下来就是解决这个问题的，现实项目要更复杂一些，有经验的前端知道字体间的差异，个别的字体上下相差特别悬殊，</p>
<p>这里前后的字体是不同的，但幸好垂直方向的差异不是很大，这里我引入了项目原有的字体，中间的 <code>x</code> 其实是个 svg 这里不赘述。因为看懂思想再来一百个不对齐的你也能迎刃而解。</p>
<p>进入真正的魔法世界，针对此案例给出两个思路大家自行选择</p>
<h2 id="inline-block-魔法"><a href="#inline-block-魔法" class="headerlink" title="inline-block 魔法"></a>inline-block 魔法</h2><p>不一步一步解释，直接上已经解决问题的代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"date-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"date"</span>&gt;</span>14 OCT<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"multiple"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>今日瞎选6篇<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line-bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  @<span class="keyword">font-face</span> &#123;</span></span><br><span class="line">    font-family: century-gothic-bold;</span><br><span class="line">    src: url('century-gothic-bold.ttf');</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  @<span class="keyword">font-face</span> &#123;</span></span><br><span class="line">    font-family: FZYouH_512B;</span><br><span class="line">    src: url('FZYouH_512B.ttf');</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.date-wrap</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 60px;</span><br><span class="line">    display: flex;</span><br><span class="line">    position: relative;</span><br><span class="line"></span><br><span class="line">    flex-direction: row;</span><br><span class="line">    align-items: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line"></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 60px;</span><br><span class="line"></span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.date</span> &#123;</span></span><br><span class="line">    font-family: century-gothic-bold;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.multiple</span> &#123;</span></span><br><span class="line">    margin: 0 10px;</span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#f8ac08</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.desc</span> &#123;</span></span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: FZYouH_512B;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.line-top</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 22px;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.line-bottom</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 22px;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css-inline-alignment6.png" alt=""></p>
<p>好棒啊，我只改变了后面文字的 <code>font-size: 16px;</code> 解决问题了耶，高兴的拿给设计师，对比之后返工了，</p>
<p>what fuck？什么鬼？心中一万个草泥马（神兽）奔腾而过，仔细看！瞪大眼睛。。。。没错</p>
<p><code>今</code>字的上头出了我们的辅助线，设计师也会将手机截屏然后对照原稿做辅助线对比的哦～</p>
<p>解决办法相当简单，只需要</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.desc</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1px</span>;  <span class="comment">/* add */</span></span><br><span class="line"></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: FZYouH_512B;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>只需要加一行，当当当当～</p>
<p><img src="/uploads/css-inline-alignment7.png" alt=""></p>
<p>嗑嗑，凑合这样吧，为什么？明明对齐了啊！再仔细看，我是认真的，没玩大家，发现我们的 date 低了不到一个像素（使用 Retina 屏幕的朋友看的明显些），有人问一像素以内可以调整嘛？明确告诉大家可以，之后的文章准备做解释，这里不展开</p>
<p>第一种方案到这为止，上手试验的朋友虽然没有我的字体，你不必去下载，浏览器默认字体一样的，我们讲的是原理，没必要还原我的 demo，关键就是 block 元素的上下 margin 调整。</p>
<blockquote>
<p>提醒：这里的 margin 可以设置负值，如果负值无用自己去探索原因吧，给大家线上项目的控制台</p>
</blockquote>
<p><img src="/uploads/css-inline-alignment8.png" alt=""></p>
<p>我这里给的就是负值，是有作用的哦，可以去 <a href="https://mobile.idarex.com/" target="_blank" rel="noopener">敢玩移动端主页</a>，记得在模拟器里查看（不然会乱成一锅粥），控制台一看便知，不过多解释啦。</p>
<h2 id="vertical-align-魔法"><a href="#vertical-align-魔法" class="headerlink" title="vertical-align 魔法"></a>vertical-align 魔法</h2><p>完整代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"date-wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"date"</span>&gt;</span>14 OCT<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"multipl)e"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"desc"</span>&gt;</span>今日瞎选6篇<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line-top"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"line-bottom"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  @<span class="keyword">font-face</span> &#123;</span></span><br><span class="line">    font-family: century-gothic-bold;</span><br><span class="line">    src: url('century-gothic-bold.ttf');</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  @<span class="keyword">font-face</span> &#123;</span></span><br><span class="line">    font-family: FZYouH_512B;</span><br><span class="line">    src: url('FZYouH_512B.ttf');</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.date-wrap</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 60px;</span><br><span class="line">    position: relative;</span><br><span class="line"></span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height: 60px;</span><br><span class="line"></span><br><span class="line">    font-size: 18px;</span><br><span class="line">    font-weight: 600;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.date</span> &#123;</span></span><br><span class="line">    font-family: century-gothic-bold;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.multiple</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#f8ac08</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.desc</span> &#123;</span></span><br><span class="line">    vertical-align: 1px;</span><br><span class="line"></span><br><span class="line">    font-size: 16px;</span><br><span class="line">    font-family: FZYouH_512B;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.line-top</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    top: 22px;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.line-bottom</span> &#123;</span></span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 1px;</span><br><span class="line">    position: absolute;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 22px;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#000</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上代码运行效果和之前一摸一样这里就不一一截图费大家流量啦（良心前端。。。。）</p>
<p>和上一个方法区别在于我们行内元素还用之前的 span 标签。然后通过 <code>vertical-align: 1px;</code> 来调节垂直方向上下的位置。对这个属性不熟悉的朋友可以去看MDN的文档：<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/CSS/vertical-align</a></p>
<p>几种语法如下</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* keyword values */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: baseline;</span><br><span class="line"><span class="attribute">vertical-align</span>: sub;</span><br><span class="line"><span class="attribute">vertical-align</span>: super;</span><br><span class="line"><span class="attribute">vertical-align</span>: text-top;</span><br><span class="line"><span class="attribute">vertical-align</span>: text-bottom;</span><br><span class="line"><span class="attribute">vertical-align</span>: middle;</span><br><span class="line"><span class="attribute">vertical-align</span>: top;</span><br><span class="line"><span class="attribute">vertical-align</span>: bottom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;length&gt; values */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: <span class="number">10em</span>;</span><br><span class="line"><span class="attribute">vertical-align</span>: <span class="number">4px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* &lt;percentage&gt; values */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: <span class="number">20%</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Global values */</span></span><br><span class="line"><span class="attribute">vertical-align</span>: inherit;</span><br><span class="line"><span class="attribute">vertical-align</span>: initial;</span><br><span class="line"><span class="attribute">vertical-align</span>: unset;</span><br></pre></td></tr></table></figure>

<p>我们用的这个 <code>&lt;length&gt; values</code> 长度单位实际应用较少，却是行内元素垂直对齐的黑魔法。不了解的不要紧，赶快 get 新技能</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两种方案都可行，有时候不要因为一像素绞尽脑汁，找到突破口，以后谁还会怕行内对齐了呢？</p>
<p>你们还有更好的想法吗？欢迎交流</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 实现 1px 以内的移动</title>
    <url>/2016/10/17/css-mobile-1px/</url>
    <content><![CDATA[<p><img src="/uploads/css-mobile-1px1.png" alt=""></p>
<p>之前的文章说过关于行内元素垂直方向对齐的方案。感兴趣的可以看我的往期文章。在上一篇文章里我们提到了 1px 内的移动问题。本文就一像素内的问题给出解决方案。</p>
<a id="more"></a>

<p>可能大家看过关于 Retina 屏幕的一像素边框问题，注意这里是边框宽度而不是移动元素。</p>
<p>什么？border 小于 1px ？</p>
<p>对，因为前面有人给出相关方案而且好多种方案，这里不重复描述实现原理，给大家两个链接，感兴趣的自己跳转。</p>
<ul>
<li><a href="http://jinlong.github.io/2015/05/24/css-retina-hairlines/#comments" target="_blank" rel="noopener">Retina 屏的移动设备如何实现真正 1px 的线？</a></li>
<li><a href="http://www.cnblogs.com/PeunZhang/p/4709822.html" target="_blank" rel="noopener">移动 web 点 5 像素的秘密</a></li>
</ul>
<p>看完大彻大悟，佩服佩服，思路很多，回到本文重点</p>
<p>想一下能实现移动的方法 <code>position(top,right,bottom,left)</code>, <code>margin</code>, <code>padding</code>, <code>vertical-align</code>。</p>
<p>上面给的只是一部分可以通过具体单位(px, em, rem 等)进行移动的方法</p>
<p>本着实践的原则，上述方案都不可行，在最新的 chrome 中，当小于 0.5px 时是 0，当大于等于 0.5px 时就变成 1px。</p>
<p>因为案例过于简单，不做 demo ，感兴趣的自己实践，相信大家多数人试验过了。</p>
<p>那么还有什么以具体单位移动的属性呢？</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>也许你早就知道有 <code>transform</code> 的  <code>translate</code> 属性了。没错它就能实现 1px 内的移动！</p>
<p>基本语法：</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="attribute">transform</span>: translate(<span class="number">12px</span>, <span class="number">50%</span>);</span><br><span class="line"><span class="attribute">transform</span>: translateX(<span class="number">2em</span>);</span><br><span class="line"><span class="attribute">transform</span>: translateY(<span class="number">3in</span>);</span><br></pre></td></tr></table></figure>

<p>给出本文的 demo 代码，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-first"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-second"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-third"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> &#123;</span></span><br><span class="line">    width: 310px;</span><br><span class="line">    height: 150px;</span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#666</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.parent</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">    display: inline-block;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.child-first</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">margin-top</span>: <span class="selector-class">.5px</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-class">.3px</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#f66</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.child-second</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">transform</span>: <span class="selector-tag">translateY</span>(<span class="selector-class">.5px</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#ff0</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.child-third</span> &#123;</span></span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line"></span><br><span class="line">    transform: translateY(1px);</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#06c</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>截图如下</p>
<p><img src="/uploads/css-mobile-1px2.png" alt=""></p>
<p>这里为了更容易观察，我们把布局换成 <code>inline-block</code> ，我们发现元素与元素之间存在空隙回去再看一遍代码发现没什么问题，那这段距离是怎么引起的呢？</p>
<p>是空格? 没错! 在使用 <code>inline-block</code> 的时候一定注意代码缩进或换行带来的不必要的麻烦（无意中添加了空格）。</p>
<p>修改如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-first"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-second"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child-third"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到最终结果，如下图</p>
<p><img src="/uploads/css-mobile-1px3.png" alt=""></p>
<p>这里特地将小块颜色做区分，浏览器视图放大到最大倍数，如果还是看不清的话，推荐大家亲手试一试，</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里我的方法讲完了，在最后欢迎大家讨论，方案不止一个， orange 目前只发现这一个方案，你也可以根据 js 判断屏幕然后给出 .5 像素的偏移也是可行的，我个人认为此方法简单一些。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>3D 视差效果</title>
    <url>/2016/12/20/css3-3d-parallax-effect/</url>
    <content><![CDATA[<p><img src="/uploads/css3-3d-parallax-effect1.gif" alt=""></p>
<p>前一周敢玩新版PC端上线，其中原创视频封面用的就是上图的效果，下面详细说一下怎么实现</p>
<a id="more"></a>

<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>这个效果有着相对较好的用户体验，在 hover 的基础上又有了与用户交互的体验，仿佛用户一直在不同角度按压这张图片。</p>
<p>当然这个效果早就有人在写并用于官网了，感兴趣可以去<a href="https://www.smartisan.com/" target="_blank" rel="noopener">锤子官网</a>，看下轮播图的鼠标交互效果。</p>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>单借助 CSS3 的 hover 不足以支配这个效果，JS 方案考虑以下步骤</p>
<ol>
<li>绑定鼠标事件（mouseover），绑定离开事件（mouseleave）</li>
<li>判断鼠标相对于图片的位置</li>
<li>计算出应该翻转（rotate）的角度，同时改变阴影的方向</li>
<li>将图片复位</li>
</ol>
<p>这里涉及 CSS3 的一个比较少用的属性 <code>perspective</code></p>
<blockquote>
<p>MDN: perspective 属性指定了观察者与 z = 0 平面的距离，使具有三维位置变换的元素产生透视效果。z &gt; 0 的三维元素比正常大，而 z &lt; 0 时则比正常小，大小程度由该属性的值决定。</p>
</blockquote>
<p>深入了解去看这个文章<a href="http://www.alloyteam.com/2012/10/the-css3-transform-perspective-property/" target="_blank" rel="noopener">CSS3 Transform 的 perspective 属性</a>，时间比较久但是很经典，除了兼容性描述有变其它描述很准确。</p>
<h2 id="开始构建"><a href="#开始构建" class="headerlink" title="开始构建"></a>开始构建</h2><p>html：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"avatar"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">'https://ww1.sinaimg.cn/large/005Yd2Thly1fl8hsldx4tj30hs0hsgnq.jpg'</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: contain;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">3s</span> linear;</span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>js:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> el = <span class="built_in">document</span>.querySelector(<span class="string">'.avatar'</span>)</span><br><span class="line"></span><br><span class="line">el.addEventListener(<span class="string">'mousemove'</span>, (e) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> thisPX = el.getBoundingClientRect().left</span><br><span class="line">  <span class="keyword">let</span> thisPY = el.getBoundingClientRect().top</span><br><span class="line">  <span class="keyword">let</span> boxWidth = el.getBoundingClientRect().width</span><br><span class="line">  <span class="keyword">let</span> boxHeight = el.getBoundingClientRect().height</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> mouseX = e.pageX - thisPX</span><br><span class="line">  <span class="keyword">let</span> mouseY = e.pageY - thisPY</span><br><span class="line">  <span class="keyword">let</span> X</span><br><span class="line">  <span class="keyword">let</span> Y</span><br><span class="line"></span><br><span class="line">  X = mouseX - boxWidth / <span class="number">2</span></span><br><span class="line">  Y = boxHeight / <span class="number">2</span> - mouseY</span><br><span class="line"></span><br><span class="line">  el.style.transform = <span class="string">`perspective(300px) rotateY(<span class="subst">$&#123;X <span class="regexp">/ 10&#125;deg) rotateX($&#123;Y /</span> <span class="number">10</span>&#125;</span>deg)`</span></span><br><span class="line">  el.style.boxShadow = <span class="string">`<span class="subst">$&#123;-X <span class="regexp">/ 20&#125;px $&#123;Y /</span> <span class="number">20</span>&#125;</span>px 50px rgba(0, 0, 0, 0.3)`</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">el.addEventListener(<span class="string">'mouseleave'</span>, () =&gt; &#123;</span><br><span class="line">  el.style.transform = <span class="string">`perspective(300px) rotateY(0deg) rotateX(0deg)`</span></span><br><span class="line">  el.style.boxShadow = <span class="string">''</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>以上代码看似没什么问题，也许你在新版本浏览器（无需babel）已经顺利执行了，但是这里有一个坑。</p>
<p>除非你能确定你的图片在一屏内，就是说你的 body 最大高度就是窗口高度，不然 <code>let mouseY = e.pageY - thisPY</code> 这句计算出来的不一定是真实的鼠标偏移量，而是加上滚动调偏移后的值。</p>
<p>解决办法就是</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop + <span class="built_in">document</span>.body.scrollTop  <span class="comment">//计算滚动高度</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> mouseY = e.pageY - scrollTop - thisPY  <span class="comment">//减去滚动高度</span></span><br></pre></td></tr></table></figure>

<p>一般的项目考虑到这就可以了，如果你的项目存在 X 轴上的偏移计算原理相同，减去偏移量。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>我自己的代码放在了 codepen，如下</p>
<p data-height="500" data-theme-id="dark" data-slug-hash="VmgoVX" data-default-tab="js,result" data-user="orangexc" data-embed-version="2" data-pen-title="3D parallax effect" class="codepen">See the Pen <a href="https://codepen.io/orangexc/pen/VmgoVX/" target="_blank" rel="noopener">3D parallax effect</a> by orangexc (<a href="https://codepen.io/orangexc" target="_blank" rel="noopener">@orangexc</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>
<script async src="https://production-assets.codepen.io/assets/embed/ei.js"></script>

<p>另外最近发现在 codepen 上的一个项目，在热门榜单上，基本思路是一样的只不过换了种方式去写，很不错的例子，对于需要多个元素循环绑定的情况很好用。</p>
<p data-height="265" data-theme-id="dark" data-slug-hash="aBPRaX" data-default-tab="js,result" data-user="PavelDoGreat" data-embed-version="2" data-pen-title="Interactive Floating Panels" class="codepen">See the Pen <a href="https://codepen.io/PavelDoGreat/pen/aBPRaX/" target="_blank" rel="noopener">Interactive Floating Panels</a> by Pavel Dobryakov (<a href="https://codepen.io/PavelDoGreat" target="_blank" rel="noopener">@PavelDoGreat</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>

<blockquote>
<p>注：此种方法规避了高度差计算的问题，因为是基于 offsetX（作用元素的偏移量），<strong>推荐使用</strong></p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>JS 动画考虑的会相对多一些，可以获取宽高及鼠标位置（方法多样），根据鼠标位置可以计算出动画的对应效果，选择合适的且兼容性好的代码很关键</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 font-weight 无效的问题</title>
    <url>/2016/12/13/css-font-weight/</url>
    <content><![CDATA[<p><img src="/uploads/css-font-weight1.png" alt=""></p>
<p>近期调页面时有几个 font-weight 需要修改，无论怎么调整字体粗细都没有变化，深入研究后总结下文</p>
<a id="more"></a>

<h2 id="初探"><a href="#初探" class="headerlink" title="初探"></a>初探</h2><p>本地写个例子，代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"thin"</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"normal"</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"thick"</span>&gt;</span>This is a paragraph<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thin</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thick</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Mac OS 下 Chrome、Firefox、Safari 结果分别如下(从左到右)</p>
<p><img src="/uploads/css-font-weight2.png" alt=""></p>
<p>我的浏览器均为最新版本，发现一个简单的 <code>font-weight</code> 属性，在三个浏览器有三个表现。</p>
<ul>
<li>Chrome 下所有字重均一样</li>
<li>Firefox 下表现正常，是我们期待的结果</li>
<li>Safari 下 100 无效，被解析为 normal</li>
</ul>
<h2 id="解决表现不一致的问题"><a href="#解决表现不一致的问题" class="headerlink" title="解决表现不一致的问题"></a>解决表现不一致的问题</h2><p>这种不同浏览器表现不同是我们不能接受的，对于后期排错造成困难，于是我首先想到是字体的惹得货，修改我的样式文件</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: Arial;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thin</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thick</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css-font-weight3.png" alt=""></p>
<p>这里的表现倒是一样的，我们可以忽略图中字体大小（截屏的误差导致），只看字体粗细就好，<code>font-weight: 100;</code> 都失效了。</p>
<p>MDN 文档的解释</p>
<blockquote>
<p>This means that for fonts that provide only normal and bold, 100-500 are normal, and 600-900 are bold.</p>
</blockquote>
<p>文章开始没有介绍基本语法，相信前端们都知道，normal 等同于 400， bold 等同于 700。</p>
<p>这也很好的解释了这个例子的表象，但我瞬间推翻了这句话，因为在例子1中 Firefox 在没有设置字体的情况下可以正常显示。</p>
<h2 id="问题根源"><a href="#问题根源" class="headerlink" title="问题根源"></a>问题根源</h2><p>到这里相信你已经知道答案了，我们要针对不同浏览器和运行环境进行全面配置 <code>font-family</code> 属性，<strong>全局的字体建议放在 body 选择器下</strong>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont,</span><br><span class="line">    <span class="string">"Segoe UI"</span>, <span class="string">"Roboto"</span>, <span class="string">"Oxygen"</span>, <span class="string">"Ubuntu"</span>, <span class="string">"Cantarell"</span>,</span><br><span class="line">    <span class="string">"Fira Sans"</span>, <span class="string">"Droid Sans"</span>, <span class="string">"Helvetica Neue"</span>,</span><br><span class="line">    sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thin</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.normal</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-class">.thick</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看下三个浏览器的表现</p>
<p><img src="/uploads/css-font-weight4.png" alt=""></p>
<p>在字体和字重上达到了完全一致，仔细的观察会发现，Chrome 与 Safari 渲染不同字重的字体总宽度变化明显，而 Firefox 下则不是十分明显</p>
<blockquote>
<p>温馨提示：尽量不要用字体去撑容器的宽度，尽量避免 hover 改变字重。因为不同环境下渲染的差异会导致表现不一致。</p>
</blockquote>
<p>上面给的一大串字体又代表兼容那些环境和设备哪？</p>
<p>首先我们分成三组来解释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family:</span><br><span class="line">&#x2F;* 1 *&#x2F; -apple-system, BlinkMacSystemFont,</span><br><span class="line">&#x2F;* 2 *&#x2F; &quot;Segoe UI&quot;, &quot;Roboto&quot;, &quot;Oxygen&quot;, &quot;Ubuntu&quot;, &quot;Cantarell&quot;, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;,</span><br><span class="line">&#x2F;* 3 *&#x2F; &quot;Helvetica Neue&quot;, sans-serif;</span><br></pre></td></tr></table></figure>

<p>1.第一个分组是映射到系统 UI 字体的 CSS 属性。这涵盖了很多环境，并且不会将这些字体误认为别的字体</p>
<ul>
<li><code>-apple-system</code> 在 Mac OS X 和 iOS 上的 Safari 中设置 San Francisco，并在旧版本的 Mac OS X 上设置成 Neue Helvetica 和 Lucida Grande。它根据字体大小正确选择 San Francisco Text 和 San Francisco Display。</li>
<li><code>BlinkMacSystemFont</code> 只针对于 Mac OS X 上的 Chrome。</li>
</ul>
<p>2.第二个分组用于已知的系统 UI 字体</p>
<ul>
<li><code>Segoe UI</code> 针对 Windows 和 Windows Phone。</li>
<li><code>Roboto</code> 针对 Android 和更高版本的 Chrome 操作系统。故意列出在 Segoe UI 后，因为如果你是 Windows 上的 Android 开发人员，并安装 Roboto，将使用 Segoe UI。</li>
<li><code>Oxygen</code> 针对 KDE，Ubuntu，你可以猜到，Cantarell 针对 GNOME。这一开始感到徒劳，因为一些 Linux 发行版有许多这样的字体。</li>
<li><code>Fira Sans</code> 针对 Firefox OS 系统。</li>
<li><code>Droid Sans</code> 针对旧版本系统的安卓</li>
</ul>
<blockquote>
<p>请注意，我们不需要添加 San Francisco。在 iOS 和 Mac OS X 上，San Francisco 并不是显而易见的，而是作为“隐藏”字体存在。我们也不使用 .SFNSText-Regular，在 Mac OS X 上的 San Francisco 的内部 PostScript 名称来指定 San Francisco。它只适用于 Chrome，并且不如 BlinkMacSystemFont 通用。</p>
</blockquote>
<p>3.第三个分组是我们的后备字体</p>
<ul>
<li><code>Helvetica Neue</code> 针对旧 El Capitan 版本的 Mac OS X。它被列在接近结尾，因为它是一个流行的字体在其他非 El Capitan 计算机上。</li>
<li><code>sans-serif</code> 默认的是 sans-serif 后备字体。</li>
</ul>
<p>以下是目前已知的的问题：</p>
<ol>
<li>在 Mac OS X 的 Firefox 中，San Francisco 的字母间距比 Safari 和 Chrome 更紧。</li>
<li>它不会使 Lucida Grande 在 Mac OS X 的 pre-Yosemite 版本上降级到 Neue Helvetica。并且它可能不匹配不太受欢迎的操作系统上的正确字体或更复杂的配置。</li>
</ol>
<p>说到这里上面都是英文的字体，我们需要针对中文设置字体，可以针对不同操作系统给中文字体。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于字体的统一展示，目前为止还没有完善的解决办法，只能针对不同设备给出对应的解决方案，至于为什么不引入外部的三方字库来统一字体呢？因为会增加网页的请求时长，渲染也会耗时，尽量避免三方字库。下次再有类似字重渲染误差问题可以先从字体下手，整个例子没有跑过 Windows 系统，可能在 Windows 下还会有问题。至少切入点有了改变，并不是 Chrome 下 font-weight 无效。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS3 巧妙实现聊天气泡</title>
    <url>/2016/10/13/css3-chat-bubble/</url>
    <content><![CDATA[<p><img src="/uploads/css3-chat-bubble1.jpg" alt=""></p>
<a id="more"></a>

<p>前一阵子敢玩的 Mobile 页改版完成了，就之前的页面风格更加扁平化，从暗色系为主背景转到亮色背景，去掉更多的阴影，给用户简约的体验风格，哈哈我不是设计师不过多评价啦。感兴趣的朋友可以直接去 <a href="https://mobile.idarex.com/" target="_blank" rel="noopener">idarex移动端主页</a>。</p>
<p>这次改版的所有 style 都是 orange 写的，感触颇多，分期分享给大家</p>
<p>下面说正题，说好的聊天气泡呢？</p>
<h2 id="传统的聊天气泡"><a href="#传统的聊天气泡" class="headerlink" title="传统的聊天气泡"></a>传统的聊天气泡</h2><p>什么又是传统的聊天气泡,直接上图</p>
<p><img src="/uploads/css3-chat-bubble2.jpg" alt=""></p>
<p>代码如下</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.comment</span> &#123;</span></span><br><span class="line">    width: 150px;</span><br><span class="line">    height: 35px;</span><br><span class="line">    position: relative;</span><br><span class="line">    margin: 30px auto 0;</span><br><span class="line"><span class="css">    <span class="selector-tag">background</span>: <span class="selector-id">#f8ac09</span>;</span></span><br><span class="line">    border-radius: 5px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">  <span class="selector-class">.comment</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line">    content: '';</span><br><span class="line">    width: 0;</span><br><span class="line">    height: 0;</span><br><span class="line">    position: absolute;</span><br><span class="line">    top: 5px;</span><br><span class="line">    right: -16px;</span><br><span class="line">    border: solid 8px;</span><br><span class="line"><span class="css">    <span class="selector-tag">border-color</span>: <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-tag">transparent</span> <span class="selector-id">#f8ac09</span>;</span></span><br><span class="line">    font-size: 0;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>实现方式大家早有耳闻，圆角矩形和三角形嘛，三角形原理就是 border 可以设置为透明，可以复制上例中的代码修改 <code>border-color</code> 属性摸索三角形的实现。</p>
<blockquote>
<p>注：IE8 更早版本对 border 的 transparent 支持不是很好。大家可以无视低版本缺陷，因为大部分浏览器都显示正常，非要兼容的话把 transparent 属性设置为主背景色而不是气泡背景色（前提是背景为纯色）。</p>
</blockquote>
<p>想必大家都知道，这里不赘述，聊一聊其他实现方法。</p>
<p>这里的三角形部分可以使用正方形代替，实现同样效果，方法就是旋转小正方形使其一部分露在外面。代码如下</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f8ac09</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f8ac09</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点是小三角只能是直角三角形，当然也可以通过变换得到菱形再进行拼接，变换多了感觉没有第一种方式直接，浏览器兼容 transform(2D) 属性如下</p>
<p><img src="/uploads/css3-chat-bubble3.jpg" alt=""></p>
<p>总体还不错，几种方法都能放心使用，不存在大的兼容问题。</p>
<h2 id="现实案例"><a href="#现实案例" class="headerlink" title="现实案例"></a>现实案例</h2><p>这里的设计稿多了一个边框，直接上设计稿</p>
<p><img src="/uploads/css3-chat-bubble4.jpg" alt=""></p>
<p>🤔️ 想一想怎么处理，我们回顾上文</p>
<p>第一种方式本身就是 <code>border</code> 透明，怎么再给它设置 <code>border</code> 是个问题，暂且先不考虑。</p>
<p>第二种方式如果使用小正方形旋转，层级叠加是个问题，因为设计稿中的气泡背景为 <code>rgba(247, 188, 10, 0.03)</code> 先看下实现代码</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">position</span>:relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(247, 188, 10, 0.03);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(252, 185, 8, 0.35);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(247, 188, 10, 0.03);</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(252, 185, 8, 0.35);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css3-chat-bubble5.jpg" alt=""></p>
<p>上面的思路有问题，因为小正方形与气泡的一部分会重合，半透明背景的部分总会出现问题，有人说了偷个懒总可以吧，把透明后的背景色吸取出来然后再进行叠加（因为大家注意到设计稿的整体背景是纯色）</p>
<p>按着这个思路去实现，那么问题又来了。具体两个问题如下。</p>
<p>1.如果小正方形叠加在上，那么小正方形左半部分的边框就会显示</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.comment</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">30px</span> auto <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#faf8f3</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fbe2a0</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.comment</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">position</span>:absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#faf8f3</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fbe2a0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果如下，比较之前的图片圆角矩形的右边确实遮住了，但小正方形左边的边框显示出来了</p>
<p><img src="/uploads/css3-chat-bubble6.jpg" alt=""></p>
<p>处理方式呢，可以这样。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.comment</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(45deg);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#faf8f3</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#fbe2a0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid solid none none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们发现问题解决了。效果如下</p>
<p><img src="/uploads/css3-chat-bubble7.jpg" alt=""></p>
<p>设计稿是有 <code>padding</code> 的，亲测本案例中可行，但是本着认真的原则 <code>padding-right</code> 如果过小，会出现什么问题呢？</p>
<p>我们向 div 中加文字。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span>Hello,orange.Welcome to FrontEnd World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>效果如下</p>
<p><img src="/uploads/css3-chat-bubble8.jpg" alt=""></p>
<p>我们发现字母 o 的右下角被小正方形左侧覆盖了，当然可以通过 <code>z-index</code> 属性 hack。</p>
<p>2.如果小正方形在圆角矩形下，那么圆角矩形的右边框就会完整显示，大家自行脑补，此方案不合理，不过多解释。</p>
<p>以上的方法缺点也都很明显，那怎么做才能更严谨，能根据需求的变化不大伤筋骨呢？</p>
<p>我们还用三角形的方案！ what? 不是说三角形的方案不可行了嘛 ？</p>
<p>一个三角形是不可行那两个呢，我们有请 <code>after</code> 的兄弟 <code>before</code> 出场。项目的真实代码如下</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.reply</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0.672rem</span> <span class="number">0</span> <span class="number">0.096rem</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.408rem</span> <span class="number">0.816rem</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid rgba(<span class="number">#fcb908</span>, <span class="number">0.35</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0.2rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: rgba(<span class="number">#f7bc0a</span>, <span class="number">0.03</span>);</span><br><span class="line"></span><br><span class="line">  &amp;:after &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>:  transparent transparent <span class="number">#faf8f3</span> transparent ;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">11px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">18px</span>;</span><br><span class="line">    <span class="attribute">right</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &amp;:before &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: transparent transparent rgba(<span class="number">#fcb908</span>, <span class="number">0.35</span>) transparent;</span><br><span class="line">    <span class="attribute">border-style</span>: solid;</span><br><span class="line">    <span class="attribute">border-width</span>: <span class="number">7px</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">17px</span>;</span><br><span class="line">    <span class="attribute">right</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：这段代码用的是 SASS 进行预编译，如果从头仔细看到这里的话不难理解，两个三角形叠加，大三角形颜色是边框的颜色，小三角形是内部背景色，小三角形绝对定位时向下移 3px 把圆角矩形的一部分上边框遮挡，这样小三角下部也有溢出，具体在两像素之内，实际上不存在遮挡文本问题。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>实际问题解决的方法很多，就看大家怎么去思考，这个方案也不是最满意的方案，因为多了一个伪元素，主要还是设计思想的多样性，总之 css 很灵活。</p>
<p>有人不禁会问，这里设计稿给的是向上的箭头，为什么例子里却都是向右的，这里向右的都是我写的 demo ，理解原理的话，改变个位置方向都是大同小异。</p>
<p>最后，读本文有收获的或者有更好想法的朋友，欢迎下方留言交流。</p>
]]></content>
      <tags>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Egg 实现一个 mTime 时光网</title>
    <url>/2017/09/20/eggjs-mtime/</url>
    <content><![CDATA[<p><img src="/uploads/eggjs-mtime1.png" alt=""></p>
<a id="more"></a>

<p>先放出项目地址：<a href="https://github.com/OrangeXC/mtime" target="_blank" rel="noopener">https://github.com/OrangeXC/mtime</a></p>
<p>有一段时间没更新博客了，今天的文章主要围绕 egg 进行，长时间沉浸在前端框架中，游离到传统 MVC 的开发模式还真不太适应，好久不写 MVC 项目了。</p>
<p>说下今天的主角 egg，在前几天的腾讯 IMweb Conf 2017 大会第一个演讲就是 egg，egg 是一个 node 框架基于 koa，寓意孵化新生，本项目的 logo 就有点怪咖，是个煎蛋，这个嘛，没有新生了，因为这个项目没有发挥 egg 太多优势。</p>
<p>之所有这么说是因为我调用的三方 api，说到这里为什么不用 vue，react，angular 等直接请求接口呢，因为这里涉及到一点点数据库操作，算是没白折腾 egg。</p>
<p>不写科普文，简单的文档层面可以直接到 <a href="https://eggjs.org/" target="_blank" rel="noopener">egg官网</a></p>
<p>说说项目的搭建，egg 提供了 cli，项目的目录也遵循约定规范，不可随意篡改。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">egg-project</span><br><span class="line">├── package.json</span><br><span class="line">├── app.js (可选)</span><br><span class="line">├── agent.js (可选)</span><br><span class="line">├── app</span><br><span class="line">|   ├── router.js</span><br><span class="line">│   ├── controller</span><br><span class="line">│   |   └── home.js</span><br><span class="line">│   ├── service (可选)</span><br><span class="line">│   |   └── user.js</span><br><span class="line">│   ├── middleware (可选)</span><br><span class="line">│   |   └── response_time.js</span><br><span class="line">│   ├── schedule (可选)</span><br><span class="line">│   |   └── my_task.js</span><br><span class="line">│   ├── public (可选)</span><br><span class="line">│   |   └── reset.css</span><br><span class="line">│   ├── view (可选)</span><br><span class="line">│   |   └── home.tpl</span><br><span class="line">│   └── extend (可选)</span><br><span class="line">│       ├── helper.js (可选)</span><br><span class="line">│       ├── request.js (可选)</span><br><span class="line">│       ├── response.js (可选)</span><br><span class="line">│       ├── context.js (可选)</span><br><span class="line">│       ├── application.js (可选)</span><br><span class="line">│       └── agent.js (可选)</span><br><span class="line">├── config</span><br><span class="line">|   ├── plugin.js</span><br><span class="line">|   ├── config.default.js</span><br><span class="line">│   ├── config.prod.js</span><br><span class="line">|   ├── config.test.js (可选)</span><br><span class="line">|   ├── config.local.js (可选)</span><br><span class="line">|   └── config.unittest.js (可选)</span><br><span class="line">└── test</span><br><span class="line">    ├── middleware</span><br><span class="line">    |   └── response_time.test.js</span><br><span class="line">    └── controller</span><br><span class="line">        └── home.test.js</span><br></pre></td></tr></table></figure>

<h2 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h2><p>这里主要关注配置文件 <code>config/config.default.js</code> 和 <code>app</code> 目录</p>
<p>先看下 <code>config/config.default.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">appInfo</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> config = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// should change to your own</span></span><br><span class="line">  config.keys = appInfo.name + <span class="string">'_1504252356337_1029'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// view</span></span><br><span class="line">  config.view = &#123;</span><br><span class="line">    defaultViewEngine: <span class="string">'nunjucks'</span>,</span><br><span class="line">    mapping: &#123;</span><br><span class="line">      <span class="string">'.tpl'</span>: <span class="string">'nunjucks'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  config.sequelize = &#123;</span><br><span class="line">    dialect: <span class="string">'mysql'</span>, <span class="comment">// support: mysql, mariadb, postgres, mssql</span></span><br><span class="line">    database: <span class="string">'mtime'</span>,</span><br><span class="line">    host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    port: <span class="string">'3306'</span>,</span><br><span class="line">    username: <span class="string">'root'</span>,</span><br><span class="line">    password: <span class="string">''</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  config.mysql = &#123;</span><br><span class="line">    client: &#123;</span><br><span class="line">      host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">      port: <span class="string">'3306'</span>,</span><br><span class="line">      user: <span class="string">'root'</span>,</span><br><span class="line">      password: <span class="string">''</span>,</span><br><span class="line">      database: <span class="string">'mtime'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    app: <span class="literal">true</span>,</span><br><span class="line">    agent: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这里面指定了模板文件，数据库的连接参数。注意这样并不能生效，因为我们没有指定 plugin 对应的 npm 包，前提是要安装这些依赖。</p>
<p>在 <code>config/plugin.js</code> 里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">exports.nunjucks = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-view-nunjucks'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.sequelize = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-sequelize'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.mysql = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  package: <span class="string">'egg-mysql'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>在网页的公共头部有城市选择，如下</p>
<p><img src="/uploads/eggjs-mtime2.png" alt=""></p>
<p>这里比较坑的是 api 是非官方的 api，只能自己整理城市列表，存到了本地的 init 目录下的 location.json</p>
<p>那么问题来了，每次调用本地文件明显是不合情理的，以后还会涉及到城市信息变动，这里作为第一次导入的 init 数据写入 mysql，之后统一从 myspl 获取 location。</p>
<p>初始化代码按约定放在 <code>app.js</code> 中，允许我们进行初始化操作。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  app.beforeStart(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 应用会等待这个函数执行完成才启动</span></span><br><span class="line">    <span class="keyword">await</span> app.model.sync(&#123; <span class="attr">force</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">    app.database = <span class="keyword">await</span> app.mysql.createInstance(app.config.mysql.client);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> locations = <span class="built_in">JSON</span>.parse(fs.readFileSync(<span class="string">'./init/location.json'</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> app.mysql.insert(<span class="string">'locations'</span>, locations.data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>虽然 egg-mysql 和 egg-sequelize 文档都有介绍，这里简单说下</p>
<ul>
<li><p><code>await app.model.sync({ force: true });</code> 是同步 model 到数据库，主要是同步数据库表和字段</p>
</li>
<li><p><code>app.database = await app.mysql.createInstance(app.config.mysql.client);</code> 是在应用运行时动态的从配置中心获取实际的参数，再来初始化一个实例。</p>
</li>
</ul>
<blockquote>
<p>注：这里官网的代码有点小坑，亲测下面官网代码的 <code>configCenter</code> 并没有 <code>fetch</code> 方法，遇到相同坑的该用上面的代码即可</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mysqlConfig = <span class="keyword">yield</span> app.configCenter.fetch(<span class="string">'mysql'</span>);</span><br><span class="line">app.database = app.mysql.createInstance(mysqlConfig);</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>const locations = JSON.parse(fs.readFileSync(&#39;./init/location.json&#39;));</code> 这句不解释了，看不懂先学学 node 基础</p>
</li>
<li><p><code>await app.mysql.insert(&#39;locations&#39;, locations.data);</code> 这句是将 Array 直接存到数据库 <code>locations</code> 表，这里见官网 <a href="https://eggjs.org/zh-cn/tutorials/mysql.html#如何编写-crud-语句" target="_blank" rel="noopener">如何编写 CRUD 语句</a>部分，官网的例子是插入单条数据（以 Object 的格式），当然这里 Array 创建多条也是可以的</p>
</li>
</ul>
<blockquote>
<p>注：第一句我们创建了 <code>locations</code> 表，表里多了两个默认字段分别是 <code>created_at</code> 和 <code>updated_at</code>，批量导入数据里没有这两个字段，故报错，解决办法是在 model 的 location.js 里面给这两个字段 default 值，如下</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">created_at: &#123;</span><br><span class="line">  type: DATE,</span><br><span class="line">  <span class="keyword">default</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">&#125;,</span><br><span class="line">updated_at: &#123;</span><br><span class="line">  type: DATE,</span><br><span class="line">  <span class="keyword">default</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码分别依赖两个库 <code>egg-sequelize</code> 和 <code>egg-mysql</code>，两者均与操作 mysql 有关，当然根据业务需要选择其一也可，至于两个库分别有哪些功能可以直接转到 Github 看 document</p>
<p>到这里我们去 mysql 看一眼</p>
<p><img src="/uploads/eggjs-mtime3.png" alt=""></p>
<p>一切准备工作就绪</p>
<h2 id="路由搭建"><a href="#路由搭建" class="headerlink" title="路由搭建"></a>路由搭建</h2><p>页面整体分成三部分</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">header</span><br><span class="line">router</span><br><span class="line">footer</span><br></pre></td></tr></table></figure>

<p>router 根据路由动态渲染，也是主要业务逻辑的区块，主页电影列表分为三类 <code>正在售票</code> <code>正在热映</code> <code>即将上映</code> 分别对应三个路由 <code>/</code> <code>/hot</code> <code>/new</code>，当然考虑到城市因素（不同城市上映电影有细微差别），在本项目里写到了 <code>query</code> 里面，所有路由后面都带着一个 <code>query</code> 看着着实不爽，下一步我会把它移到 <code>cookie</code> 或者 <code>localStorage</code>，代码约定写在 <code>app/router.js</code> 里如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, <span class="string">'home.index'</span>);</span><br><span class="line">app.get(<span class="string">'/hot'</span>, <span class="string">'hot.index.index'</span>);</span><br><span class="line">app.get(<span class="string">'/new'</span>, <span class="string">'new.index.index'</span>);</span><br></pre></td></tr></table></figure>

<p>解释下路由对应 controller 的语法，规则是 <code>文件名/函数名</code> 或 <code>文件夹/文件名/函数名</code>，当然这是我个人猜测，发现奏效，官网的写法法可以到 <a href="https://eggjs.org/zh-cn/basics/router.html#如何定义-router" target="_blank" rel="noopener">如何定义router</a></p>
<p>下面还有<code>详情页</code> <code>短评页</code> <code>热评页</code> <code>剧照和海报页</code> <code>预告花絮页</code>，分别对应下面的路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.get(<span class="string">'/movie/:id'</span>, <span class="string">'movie.index.index'</span>);</span><br><span class="line">app.get(<span class="string">'/comment/:movieId'</span>, <span class="string">'comment.normal.index'</span>);</span><br><span class="line">app.get(<span class="string">'/hot_comment/:movieId'</span>, <span class="string">'comment.hot.index'</span>);</span><br><span class="line">app.get(<span class="string">'/stills/:movieId'</span>, <span class="string">'stills.index.index'</span>);</span><br><span class="line">app.get(<span class="string">'/video/:movieId'</span>, <span class="string">'video.index.index'</span>);</span><br></pre></td></tr></table></figure>

<p>路由到这里介绍完了，没什么好讲的，不看网站这个项目的概况也是一目了然，接下来的事情就是 controller 来调取 model 数据渲染到页面了，下面不一一陈述 controller，抽离一点可讲的。</p>
<h2 id="controller-搭建"><a href="#controller-搭建" class="headerlink" title="controller 搭建"></a>controller 搭建</h2><p>按照约定我们直接找到 controller 目录，看到全部的 controller</p>
<p><code>const locations = await ctx.model.Location.findAll();</code> 这一句找到所有的 location 数组。</p>
<p>细心看的人会发现每个 controller 都有下面的代码，我们要获取全部 location 列表，并找到 query 里面的那条数据，默认是北京，这里页面公共部分 header 一直存在一个 location 下拉列表，所以每次都要将数据抛给页面，更好的解法是点开下拉列表异步拉取所有 location 再渲染进去。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ctx.query.location</span><br><span class="line">  ? location = locations.find(<span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> id === <span class="built_in">Number</span>(ctx.query.location))</span><br><span class="line">  : location = &#123;</span><br><span class="line">    id: <span class="number">290</span>,</span><br><span class="line">    name: <span class="string">'北京'</span>,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>

<p>这里完全的 get 数据，一个前端层面的 ajax 都没有，原谅我的偷懒，这样导致了所有 controller 的代码冗余。</p>
<p>剩下的就是去调用 mtime 的 api 了，感觉很好的是 egg 为我们封装了全局 http 方法，<a href="https://eggjs.org/zh-cn/core/httpclient.html" target="_blank" rel="noopener">HttpClient</a></p>
<p>使用简单，参数简单，堪比 axios 的便捷。大家自己体会吧。</p>
<h2 id="view-搭建"><a href="#view-搭建" class="headerlink" title="view 搭建"></a>view 搭建</h2><p>说到 view 层就到了大前端的天下，玩的 6 的话，这一层可以无限延展，从最简单的模板（pug，ejs，swig，nunjucks 等），到 (vue，react，angular 等），再到（Andriod, IOS），再再到（RN，weex），甚至是小程序接口。</p>
<p>服务层让我喜欢的就是可渲染模板，可吐数据，本来是想搞个前后端分离，后来被自己气到，调用人家的 api，竟然不直接写 view 层，搞个 egg 进来没起到——卵用。</p>
<p>不自觉讲起了段子，索性就回归 10 年前的前端，抛开 MVVM，甚至撸起了 jquery。</p>
<p>牢骚一堆，这里用的是 nunjucks，官网的例子用的就是这个模板。</p>
<p>到了这里我们的页面完成了。。。虽然什么也没讲，我默认大家都看得懂模板的哈，至于 Bulma 的初衷是不想用 Jquery（bootStrap 大家懂得），奈何找不到喜欢的轮播，找了许久的轮播竟然还依赖 jquery。。。</p>
<h2 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h2><p>这里声明人家 mTime 的接口并不是官方公开的，来自 <a href="https://github.com/jokermonn/-Api/blob/master/Time.md，mTime" target="_blank" rel="noopener">https://github.com/jokermonn/-Api/blob/master/Time.md，mTime</a> 的服务器禁止跨域请求 MP4 资源，尝试以下几个方法解决这个问题</p>
<ul>
<li>iframe，没能成功，访问失败</li>
<li><code>&lt;a target=&quot;_blank&quot;&gt;</code>，也没解决问题，不过奇怪的是复制 mp4 的 url 到新 tab 回车可以访问，a 标签跳转新 tab 则失败，js 的 <code>window.open()</code> 没有尝试</li>
<li>node 请求 mp4 的 buffer 转成 stream 后再抛给前端，能力有限没能解决问题。</li>
</ul>
<p>一方面作者能力原因，一方面违背 mTime 节省视频服务器流量的想法，在视频页给了链接可以跳到真正的 mTime 官网。</p>
<p>算是遗憾吧，如果有 node 端转发视频请求经验的大神欢迎赐教。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>项目是在短期内速成的，好多细节没考虑到位，望大家多吐槽，写这篇文章的目的是给想了解 egg 的开发者一个小 demo，真正的生产模式比这个复杂的多，本文也自然就不值一提。</p>
]]></content>
      <tags>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>开发 eslint 规则</title>
    <url>/2018/09/29/eslint-rule/</url>
    <content><![CDATA[<p><img src="/uploads/eslint-rule1.png" alt=""></p>
<a id="more"></a>

<p>前端的日常开发离不开各种 lint 的支持，使用 lint 的一种误解是：个人能力不足，必须 lint 规范才能写出规范的代码，实际上规范的定义主要取决于开源项目作者的习惯，或者公司团队编码的习惯，即使两个前端专家，写出的代码规范也会有差别。</p>
<p>今天主题聊聊 eslint，作为最主流的 JavaScript lint 工具深受大家喜爱，而 JSHint 却逐渐淡出了大家的视线，使用的比较少了</p>
<p>常用的 eslint 扩展有 standard，airbnb 等</p>
<h2 id="剖析-eslint-扩展"><a href="#剖析-eslint-扩展" class="headerlink" title="剖析 eslint 扩展"></a>剖析 eslint 扩展</h2><p>扩展无非就作两个事情</p>
<ul>
<li>在原有的 eslint 的基础上配置些 config（具体规则参数，全局变量，运行环境等）</li>
<li>自定义些自己的 rule，以满足需求</li>
</ul>
<p>原理就是利用 eslint 的继承模式，理论上可以无限继承并覆盖上一级的规则</p>
<p>第一条不详细介绍了，eslint 官网说的十分详细，基本每一条规则都支持自定义参数，覆盖面也特别广，基本上所有的语法都有 rule</p>
<p>第二条的自定义 rule 才是本文的重头戏，因为特殊的业务场景靠 eslint 自身配置已经无法满足业务需求了，如：</p>
<ul>
<li>eslint-plugin-vue</li>
<li>eslint-plugin-react</li>
<li>eslint-plugin-jest</li>
</ul>
<p>一般特殊场景的自定义规则都使用 <code>eslint-plugin-*</code> 的命名，使用时可以方便的写成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="string">'vue'</span>,</span><br><span class="line">    <span class="string">'react'</span>,</span><br><span class="line">    <span class="string">'jest'</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然 eslint-config-* 同理，不过配置时需要写成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  extends: <span class="string">'standard'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面介绍下开发流程</p>
<h2 id="创建-eslint-plugin-工程"><a href="#创建-eslint-plugin-工程" class="headerlink" title="创建 eslint plugin 工程"></a>创建 eslint plugin 工程</h2><p>官方推荐使用 yeoman 生成项目，感觉生成的项目比较守旧，推荐下习惯我的项目结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eslint-plugin-skr</span><br><span class="line">  |- __tests__</span><br><span class="line">  |  |- rules</span><br><span class="line">  |  |- utils</span><br><span class="line">  |</span><br><span class="line">  |- lib</span><br><span class="line">  |  |- rules</span><br><span class="line">  |  |- utils</span><br><span class="line">  |  |- index.js</span><br><span class="line">  |</span><br><span class="line">  |- jest.config.js</span><br><span class="line">  |</span><br><span class="line">  |- package.json</span><br><span class="line">  |</span><br><span class="line">  |- README.md</span><br></pre></td></tr></table></figure>

<p>整体看下来发现多了 jest 配置文件，是的 yeoman 生成的项目默认采用 Mocha 作为测试框架，个人感觉调试起来麻烦，没有 jest 灵活，vscode 轻松搞定调试</p>
<p>教程一搜一大把哈，给伸手党一个链接 <a href="https://github.com/Microsoft/vscode-recipes/tree/master/debugging-jest-tests" target="_blank" rel="noopener">debugging-jest-tests</a></p>
<p>关于 jest 的 config 文件也po出来一下，都是些基本的配置，复杂的用不到，下面会详细介绍测试部分</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  testEnvironment: <span class="string">'node'</span>,</span><br><span class="line">  roots: [<span class="string">'__tests__'</span>],</span><br><span class="line">  resetModules: <span class="literal">true</span>,</span><br><span class="line">  clearMocks: <span class="literal">true</span>,</span><br><span class="line">  verbose: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自定义的规则全部在 lib/rules 下面，每条规则单独一个文件足以</p>
<p>下面一个简单的例子打通任督二脉</p>
<h2 id="开发一个规则"><a href="#开发一个规则" class="headerlink" title="开发一个规则"></a>开发一个规则</h2><p>前期准备</p>
<ul>
<li><a href="https://eslint.org/docs/developer-guide/working-with-rules" target="_blank" rel="noopener">官方开发文档</a></li>
<li>AST 抽象语法树</li>
</ul>
<p>这个官方文档写的密密麻麻，好几十个属性，其实只是冰山一角，有很多复杂场景需要考虑</p>
<p>有人疑问：一定需要精通 AST？</p>
<p>我的回答是当然不需要，简单了解便是，最起码知道解析出来的语法树大体结构长什么样子</p>
<p>那就随便给自己一个命题写吧！写个超级简单的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  meta: &#123;</span><br><span class="line">    docs: &#123;</span><br><span class="line">      description: <span class="string">'禁止块级注释'</span>,</span><br><span class="line">      category: <span class="string">'Stylistic Issues'</span>,</span><br><span class="line">      recommended: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  create (context) &#123;</span><br><span class="line">    <span class="keyword">const</span> sourceCode = context.getSourceCode()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      Program () &#123;</span><br><span class="line">        <span class="keyword">const</span> comments = sourceCode.getAllComments()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> blockComments = comments.filter(<span class="function">(<span class="params">&#123; type &#125;</span>) =&gt;</span> type === <span class="string">'Block'</span>)</span><br><span class="line"></span><br><span class="line">        blockComments.length &amp;&amp; context.report(&#123;</span><br><span class="line">          message: <span class="string">'No block comments'</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体写法官方文档有介绍哈，就不赘述了，例子也十分简单，调用了环境变量 context 中的方法获取全部注释</p>
<h2 id="稍微复杂点的场景"><a href="#稍微复杂点的场景" class="headerlink" title="稍微复杂点的场景"></a>稍微复杂点的场景</h2><p>如需要 lint <code>bar</code> 对象中属性的顺序，如下假设一个规则</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">  meta: &#123;&#125;,</span><br><span class="line">  double: <span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bed</span></span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">  double: <span class="function"><span class="params">num</span> =&gt;</span> num * <span class="number">2</span>,</span><br><span class="line">  meta: &#123;&#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个第一次些会有些蒙，官网没有提供具体的例子，解决办法很简单，推荐一个利器 <a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a></p>
<p>点进去别着急复制代码查看 AST 结果，首先选择 espree（eslint 使用的语法解析库），如下</p>
<p><img src="/uploads/eslint-rule2.png" alt=""></p>
<p>这短短的四行代码会对应着一个抽象语法树，如下图：</p>
<p><img src="/uploads/eslint-rule3.png" alt=""></p>
<p>由于全展开太长了哈，感兴趣的自行尝试，会发现层级嵌套的特别深，找到 <code>bar</code> 的属性需要 <code>Program.body[0].declarations[0].init.properties</code></p>
<p>当然不至于每次都从最顶级的 <code>Program</code> 找下来，从上面的例子可以看出 <code>create</code> 方法的 <code>return</code> 返回的是一个 object，里面可以定义很多检测类型，如官网的例子：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkLastSegment</span> (<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// report problem for function if last code path segment is reachable</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  meta: &#123; ... &#125;,</span><br><span class="line">  create: <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// declare the state of the rule</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ReturnStatement: <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// at a ReturnStatement node while going down</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// at a function expression node while going up:</span></span><br><span class="line">      <span class="string">"FunctionExpression:exit"</span>: checkLastSegment,</span><br><span class="line">      <span class="string">"ArrowFunctionExpression:exit"</span>: checkLastSegment,</span><br><span class="line">      onCodePathStart: <span class="function"><span class="keyword">function</span> (<span class="params">codePath, node</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// at the start of analyzing a code path</span></span><br><span class="line">      &#125;,</span><br><span class="line">      onCodePathEnd: <span class="function"><span class="keyword">function</span>(<span class="params">codePath, node</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// at the end of analyzing a code path</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以使用 <code>VariableDeclarator</code> 类型作为检察目标，从下面的解析树可以分析出筛选条件</p>
<p><img src="/uploads/eslint-rule4.png" alt=""></p>
<p>以 <code>VariableDeclarator</code> 对象作为当前的 <code>node</code></p>
<p>当变量名为 <code>bar</code>，即 <code>node.id.name === &#39;bar&#39;</code>，且值为对象，即 <code>node.init.type === &#39;ObjectExpression&#39;</code>，代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  meta: &#123; ... &#125;,</span><br><span class="line">  create (context) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      VariableDeclarator (node) &#123;</span><br><span class="line">        <span class="keyword">const</span> isBarObj = node.id.name === <span class="string">'bar'</span> &amp;&amp;</span><br><span class="line">          node.init.type === <span class="string">'ObjectExpression'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isBarObj) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// checker</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就这样成功取到 <code>bar</code> 对象后就可以检测属性的顺序了，排序算法一大把，挑一个喜欢的用就行了，这里不啰嗦了，直接上结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ORDER = [<span class="string">'meta'</span>, <span class="string">'double'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrderMap</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> orderMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">  ORDER.forEach(<span class="function">(<span class="params">name, i</span>) =&gt;</span> &#123;</span><br><span class="line">    orderMap.set(name, i)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> orderMap</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  create (context) &#123;</span><br><span class="line">    <span class="keyword">const</span> orderMap = getOrderMap()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkOrder</span> (<span class="params">propertiesNodes</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">const</span> properties = propertiesNodes</span><br><span class="line">        .filter(<span class="function"><span class="params">property</span> =&gt;</span> property.type === <span class="string">'Property'</span>)</span><br><span class="line">        .map(<span class="function"><span class="params">property</span> =&gt;</span> property.key)</span><br><span class="line"></span><br><span class="line">      properties.forEach(<span class="function">(<span class="params">property, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> propertiesAbove = properties.slice(<span class="number">0</span>, i)</span><br><span class="line">        <span class="keyword">const</span> unorderedProperties = propertiesAbove</span><br><span class="line">          .filter(<span class="function"><span class="params">p</span> =&gt;</span> orderMap.get(p.name) &gt; orderMap.get(property.name))</span><br><span class="line">          .sort(<span class="function">(<span class="params">p1, p2</span>) =&gt;</span> orderMap.get(p1.name) &gt; orderMap.get(p2.name))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> firstUnorderedProperty = unorderedProperties[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (firstUnorderedProperty) &#123;</span><br><span class="line">          <span class="keyword">const</span> line = firstUnorderedProperty.loc.start.line</span><br><span class="line"></span><br><span class="line">          context.report(&#123;</span><br><span class="line">            node: property,</span><br><span class="line">            message: <span class="string">`The "&#123;&#123;name&#125;&#125;" property should be above the "&#123;&#123;firstUnorderedPropertyName&#125;&#125;" property on line &#123;&#123;line&#125;&#125;.`</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">              name: property.name,</span><br><span class="line">              firstUnorderedPropertyName: firstUnorderedProperty.name,</span><br><span class="line">              line</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      VariableDeclarator (node) &#123;</span><br><span class="line">        <span class="keyword">const</span> isBarObj = node.id.name === <span class="string">'bar'</span> &amp;&amp;</span><br><span class="line">          node.init.type === <span class="string">'ObjectExpression'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!isBarObj) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        checkOrder(node.init.properties)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里代码有点多，耐心看完其实挺简单的，大致解释下</p>
<p><code>getOrderMap</code> 方法将数组转成 Map 类型，方面通过 <code>get</code> 获取下标，这里也可以处理多纬数组，例如两个 <code>key</code> 希望在相同的排序等级，不分上下，可以写成：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> order = [</span><br><span class="line">  <span class="string">'meta'</span></span><br><span class="line">  [<span class="string">'double'</span>, <span class="string">'treble'</span>]</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOrderMap</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> orderMap = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">  ORDER.forEach(<span class="function">(<span class="params">name, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(property)) &#123;</span><br><span class="line">      property.forEach(<span class="function"><span class="params">p</span> =&gt;</span> orderMap.set(p, i))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      orderMap.set(property, i)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> orderMap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样 <code>double</code> 和 <code>treble</code> 就拥有相同的等级了，方便后面扩展，当然实际情况会有 n 个属性的排序规则，也可以在这个规则上轻松扩展，内部的 sort 逻辑就不赘述了。</p>
<p>开发就介绍到这里，通过上面安利的在线语法解析工具可以轻松反推出 lint 逻辑。</p>
<p>如果 rule 比较复杂，就需要大量的 utils 支持，不然每个 rule 都会显得一团糟，比较考验公共代码提取的能力</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>如前面所讲建议使用 jest 进行测试，这里的测试和普通的单元测试还不太一样，eslint 是基于结果的测试，什么意思呢？</p>
<p>lint 只有两种情况，通过与不通过，只需要把通过和不通过的情况整理成两个数组，剩下的工作交给 eslint 的 <code>RuleTester</code> 处理就行了</p>
<p>上面的属性排序 rule，测试如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> RuleTester = <span class="built_in">require</span>(<span class="string">'eslint'</span>).RuleTester</span><br><span class="line"><span class="keyword">const</span> rule = <span class="built_in">require</span>(<span class="string">'../../lib/rules/test'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ruleTester = <span class="keyword">new</span> RuleTester(&#123;</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ruleTester.run(<span class="string">'test rule'</span>, rule, &#123;</span><br><span class="line">  valid: [</span><br><span class="line">    <span class="string">`const bar = &#123;</span></span><br><span class="line"><span class="string">      meta: &#123;&#125;,</span></span><br><span class="line"><span class="string">      double: num =&gt; num * 2</span></span><br><span class="line"><span class="string">    &#125;`</span></span><br><span class="line">  ],</span><br><span class="line">  invalid: [</span><br><span class="line">    &#123;</span><br><span class="line">      code: <span class="string">`const bar = &#123;</span></span><br><span class="line"><span class="string">        double: num =&gt; num * 2,</span></span><br><span class="line"><span class="string">        meta: &#123;&#125;,</span></span><br><span class="line"><span class="string">      &#125;`</span>,</span><br><span class="line">      errors: [&#123;</span><br><span class="line">        message: <span class="string">'The "meta" property should be above the "double" property on line 2.'</span></span><br><span class="line">      &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>valid</code> 中是希望通过的代码，<code>invalid</code> 中是不希望通过的代码和错误信息，到这里一个 rule 算是真正完成了。</p>
<h2 id="打包输出"><a href="#打包输出" class="headerlink" title="打包输出"></a>打包输出</h2><p>最后写好的 rules 需要发一个 npm 包，以便于在项目中使用，这里就不赘述怎么发包了，简单聊聊怎么优雅的把 rules 导出来。</p>
<p>直接上代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> requireIndex = <span class="built_in">require</span>(<span class="string">'requireindex'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// import all rules in lib/rules</span></span><br><span class="line"><span class="built_in">module</span>.exports.rules = requireIndex(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/rules`</span>)</span><br></pre></td></tr></table></figure>

<p>这里使用了三方依赖 <code>requireindex</code>，对于批量的导出一个文件夹内的所有文件显得简洁很多。</p>
<p>当然前提是保证 rules 文件夹下都是 rule 文件，不要把 utils 写进去哈</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>行文目的是国内外对于自定义 eslint rule 的相关资源较少，希望分享一些写自定义规则的经验。</p>
<p>千万不要在学习 AST 上浪费时间，不同的库对 AST 的实现是不同的，下次写 babel 插件又要学其它的 AST 规则，再次安利一下 AST 神器 <a href="https://astexplorer.net/" target="_blank" rel="noopener">astexplorer</a>，只要把需要验证的代码放到 <code>astexplorer</code> 里跑一遍，然后总结出规律，逻辑其实十分简单，对 AST 结果进行判断就行了。</p>
<p>从团队层面讲，希望所有的团队都有自己的 eslint 规则库，可以大大降低 code review 的成本，又能保证代码的一致性，一劳永逸的事情。</p>
]]></content>
      <tags>
        <tag>eslint</tag>
      </tags>
  </entry>
  <entry>
    <title>前端路由的两种实现原理</title>
    <url>/2016/10/21/front-end-router/</url>
    <content><![CDATA[<p><img src="/uploads/front-end-router1.jpg" alt=""></p>
<p>早期的路由都是后端实现的，直接根据 url 来 reload 页面，页面变得越来越复杂服务器端压力变大，随着 ajax 的出现，页面实现非 reload 就能刷新数据，也给前端路由的出现奠定了基础。我们可以通过记录 url 来记录 ajax 的变化，从而实现前端路由。</p>
<p>本文主要讲两种主流方式实现前端路由。</p>
<a id="more"></a>

<h2 id="History-API"><a href="#History-API" class="headerlink" title="History API"></a>History API</h2><p>这里不细说每一个 API 的用法，大家可以看 MDN 的文档：<a href="https://developer.mozilla.org/en-US/docs/Web/API/History" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/History</a></p>
<p>重点说其中的两个新增的API <code>history.pushState</code> 和 <code>history.replaceState</code></p>
<p>这两个 API 都接收三个参数，分别是</p>
<ul>
<li><strong>状态对象（state object）</strong> — 一个JavaScript对象，与用pushState()方法创建的新历史记录条目关联。无论何时用户导航到新创建的状态，popstate事件都会被触发，并且事件对象的state属性都包含历史记录条目的状态对象的拷贝。</li>
<li><strong>标题（title）</strong> — FireFox浏览器目前会忽略该参数，虽然以后可能会用上。考虑到未来可能会对该方法进行修改，传一个空字符串会比较安全。或者，你也可以传入一个简短的标题，标明将要进入的状态。</li>
<li><strong>地址（URL）</strong> — 新的历史记录条目的地址。浏览器不会在调用pushState()方法后加载该地址，但之后，可能会试图加载，例如用户重启浏览器。新的URL不一定是绝对路径；如果是相对路径，它将以当前URL为基准；传入的URL与当前URL应该是同源的，否则，pushState()会抛出异常。该参数是可选的；不指定的话则为文档当前URL。</li>
</ul>
<p>相同之处是两个 API 都会操作浏览器的历史记录，而不会引起页面的刷新。</p>
<p>不同之处在于，pushState会增加一条新的历史记录，而replaceState则会替换当前的历史记录。</p>
<p>我们拿大百度的控制台举例子（具体说是我的浏览器在百度首页打开控制台。。。）</p>
<p>我们在控制台输入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"https://www.baidu.com/?name=orange"</span>);</span><br></pre></td></tr></table></figure>

<p>好，我们观察此时的 url 变成了这样</p>
<p><img src="/uploads/front-end-router2.png" alt=""></p>
<p>我们这里不一一测试，直接给出其它用法，大家自行尝试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"https://www.baidu.com/name/orange"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/orange</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"?name=orange"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com?name=orange</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"name=orange"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name=orange</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"/name/orange"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/orange</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.history.pushState(<span class="literal">null</span>, <span class="literal">null</span>, <span class="string">"name/orange"</span>);</span><br><span class="line"><span class="comment">//url: https://www.baidu.com/name/orange</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意:这里的 url 不支持跨域，当我们把 <code>www.baidu.com</code> 换成 <code>baidu.com</code> 时就会报错。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Uncaught DOMException: Failed to execute <span class="string">'pushState'</span> on <span class="string">'History'</span>: A history state object <span class="keyword">with</span> URL <span class="string">'https://baidu.com/?name=orange'</span> cannot be created <span class="keyword">in</span> a <span class="built_in">document</span> <span class="keyword">with</span> origin <span class="string">'https://www.baidu.com'</span> and URL <span class="string">'https://www.baidu.com/?name=orange'</span>.</span><br></pre></td></tr></table></figure>

<p>回到上面例子中，每次改变 url 页面并没有刷新，同样根据上文所述，浏览器会产生历史记录</p>
<p><img src="/uploads/front-end-router3.png" alt=""></p>
<p>这就是实现页面无刷新情况下改变 url 的前提，下面我们说下第一个参数 <strong>状态对象</strong></p>
<p>如果运行 <code>history.pushState()</code> 方法，历史栈对应的纪录就会存入 <strong>状态对象</strong>，我们可以随时主动调用历史条目</p>
<p>此处引用 mozilla 的例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- this starts off as http://example.com/line?x=5 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Line Game - 5<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>You are at coordinate <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"coord"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span> on the line.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?x=6"</span> <span class="attr">onclick</span>=<span class="string">"go(1); return false;"</span>&gt;</span>Advance to 6<span class="tag">&lt;/<span class="name">a</span>&gt;</span> or</span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"?x=4"</span> <span class="attr">onclick</span>=<span class="string">"go(-1); return false;"</span>&gt;</span>retreat to 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span>?</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"> <span class="keyword">var</span> currentPage = <span class="number">5</span>; <span class="comment">// prefilled by server！！！！</span></span></span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">go</span><span class="params">(d)</span> </span>&#123;</span></span><br><span class="line">     setupPage(currentPage + d);</span><br><span class="line"><span class="javascript">     history.pushState(currentPage, <span class="built_in">document</span>.title, <span class="string">'?x='</span> + currentPage);</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> onpopstate = <span class="function"><span class="keyword">function</span><span class="params">(event)</span> </span>&#123;</span></span><br><span class="line">     setupPage(event.state);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="actionscript"> <span class="function"><span class="keyword">function</span> <span class="title">setupPage</span><span class="params">(page)</span> </span>&#123;</span></span><br><span class="line">     currentPage = page;</span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.title = <span class="string">'Line Game - '</span> + currentPage;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.getElementById(<span class="string">'coord'</span>).textContent = currentPage;</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.links[<span class="number">0</span>].href = <span class="string">'?x='</span> + (currentPage+<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.links[<span class="number">0</span>].textContent = <span class="string">'Advance to '</span> + (currentPage+<span class="number">1</span>);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.links[<span class="number">1</span>].href = <span class="string">'?x='</span> + (currentPage<span class="number">-1</span>);</span></span><br><span class="line"><span class="javascript">     <span class="built_in">document</span>.links[<span class="number">1</span>].textContent = <span class="string">'retreat to '</span> + (currentPage<span class="number">-1</span>);</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们点击 <code>Advance to ？</code>  对应的 url 与模版都会 +1，反之点击 <code>retreat to ？</code> 就会都 -1，这就满足了 url 与模版视图同时变化的需求</p>
<p>实际当中我们不需要去模拟 onpopstate 事件，官方文档提供了 popstate 事件，当我们在历史记录中切换时就会产生 popstate 事件。对于触发 popstate 事件的方式，各浏览器实现也有差异，我们可以根据不同浏览器做兼容处理。</p>
<h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>我们经常在 url 中看到 #，这个 # 有两种情况，一个是我们所谓的锚点，比如典型的回到顶部按钮原理、Github 上各个标题之间的跳转等，路由里的 # 不叫锚点，我们称之为 hash，大型框架的路由系统大多都是哈希实现的。</p>
<p>同样我们需要一个根据监听哈希变化触发的事件 —— hashchange 事件</p>
<p>我们用 <code>window.location</code> 处理哈希的改变时不会重新渲染页面，而是当作新页面加到历史记录中，这样我们跳转页面就可以在 hashchange 事件中注册 ajax 从而改变页面内容。</p>
<p>这里我在 codepen 上模拟了一下原理</p>
<p data-height="300" data-theme-id="0" data-slug-hash="LRrxvP" data-default-tab="html,result" data-user="orangexc" data-embed-version="2" class="codepen">See the Pen <a href="http://codepen.io/orangexc/pen/LRrxvP/" target="_blank" rel="noopener">router-demo</a> by orangexc (<a href="http://codepen.io/orangexc" target="_blank" rel="noopener">@orangexc</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>
<script async src="http://assets.codepen.io/assets/embed/ei.js"></script>

<p>hashchange 在低版本 IE 需要通过轮询监听 url 变化来实现，我们可以模拟如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果浏览器不支持原生实现的事件，则开始模拟，否则退出。</span></span><br><span class="line">  <span class="keyword">if</span> ( <span class="string">"onhashchange"</span> <span class="keyword">in</span> <span class="built_in">window</span>.document.body ) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> location = <span class="built_in">window</span>.location,</span><br><span class="line">  oldURL = location.href,</span><br><span class="line">  oldHash = location.hash;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每隔100ms检查hash是否发生变化</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newURL = location.href,</span><br><span class="line">    newHash = location.hash;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// hash发生变化且全局注册有onhashchange方法（这个名字是为了和模拟的事件名保持统一）；</span></span><br><span class="line">    <span class="keyword">if</span> ( newHash != oldHash &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.onhashchange === <span class="string">"function"</span>  ) &#123;</span><br><span class="line">      <span class="comment">// 执行方法</span></span><br><span class="line">      <span class="built_in">window</span>.onhashchange(&#123;</span><br><span class="line">        type: <span class="string">"hashchange"</span>,</span><br><span class="line">        oldURL: oldURL,</span><br><span class="line">        newURL: newURL</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      oldURL = newURL;</span><br><span class="line">      oldHash = newHash;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>

<p>大型框架的路由当然不会这么简单，angular 1.x 的路由对哈希、模版、处理器进行关联，大致如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.config([<span class="string">'$routeProvider'</span>, <span class="string">'$locationProvider'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$routeProvider, $locationProvider</span>) </span>&#123;</span><br><span class="line"> $routeProvider</span><br><span class="line"> .when(<span class="string">'/article'</span>, &#123;</span><br><span class="line">   templateUrl: <span class="string">'/article.html'</span>,</span><br><span class="line">   controller: <span class="string">'ArticleController'</span></span><br><span class="line"> &#125;).otherwise(&#123;</span><br><span class="line">   redirectTo: <span class="string">'/index'</span></span><br><span class="line"> &#125;);</span><br><span class="line"> $locationProvider.html5Mode(<span class="literal">true</span>);</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>

<p>这套路由方案默认是以 # 开头的哈希方式，如果不考虑低版本浏览器，就可以直接调用 <code>$locationProvider.html5Mode(true)</code> 利用 H5 的方案而不用哈希方案。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两种方案我推荐 hash 方案，因为照顾到低级浏览器，就是不美观（多了一个 #），两者兼顾也不是不可，只能判断浏览器给出对应方案啦，不过也只支持 IE8+，更低版本兼容见上文！</p>
<p>这个链接的 demo 含有判断方法：<a href="http://sandbox.runjs.cn/show/dxi5lgcx" target="_blank" rel="noopener">http://sandbox.runjs.cn/show/dxi5lgcx</a> 。同时给出 Github 仓库地址: <a href="https://github.com/cheft/minrouter" target="_blank" rel="noopener">minrouter</a>，推荐大家读下源码，仅仅 117 行，精辟！</p>
<p>如果在上面链接测试时你的 url 里多了一个 #，说明你的浏览器该更新啦。</p>
]]></content>
      <tags>
        <tag>Router</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈前端测试</title>
    <url>/2018/06/23/front-end-test/</url>
    <content><![CDATA[<p><img src="/uploads/front-end-test1.jpg" alt=""></p>
<a id="more"></a>

<p>前端测试或许被好多人误解，也许大家更加倾向于编写面向后端的测试，逻辑性强，测试方便等</p>
<p>聊到这导致了好多前端从来不写测试（测试全靠手点～～～）</p>
<p>其实没必要达到测试驱动开发的程度，只要写完代码可以补测试，并且补出高效的测试，前端或许真的不需要手点</p>
<p>大前端时代不谈环境不成方圆，本文从下面几个环境一一分析下如何敏捷测试</p>
<ul>
<li>node 环境</li>
<li>vue 环境</li>
<li>nuxt 服务端渲染环境</li>
<li>react 环境</li>
<li>next 服务端渲染环境</li>
<li>angular 环境</li>
</ul>
<p>理解测试前需要补充下单元测试（unit）和端到端测试（e2e）的概念，这里不赘述</p>
<h2 id="node-环境"><a href="#node-环境" class="headerlink" title="node 环境"></a>node 环境</h2><p>推荐测试框架 <a href="https://facebook.github.io/jest/" target="_blank" rel="noopener">jest</a></p>
<p>jest 是 FB 的杰作之一，方便各种场景的 js 代码测试，这里选择 jest 是因为确实方便</p>
<p>使用方法及配置信息可以去官方文档</p>
<p>配置的注意事项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  testEnvironment: <span class="string">'node'</span> <span class="comment">// 如不声明默认浏览器环境</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对 node 只聊一下单元测试，e2e 测试比较少见</p>
<p>当决定写一个 npm 模块时，代码完成后必不可少的就是单元测试，单元测试需要注意的问题比较琐碎</p>
<h3 id="mock"><a href="#mock" class="headerlink" title="mock"></a>mock</h3><p>当引入三方库时，不得不 mock 数据，因为单元测试更多讲求的是局部测试，不要受外界三方引入包的影响</p>
<p>例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; readFileSync &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getFile = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> text = readFileSync(<span class="string">'text.txt'</span>, <span class="string">'utf8'</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = getFile</span><br></pre></td></tr></table></figure>

<p>这时我们并不需要关心 <code>text.txt</code> 是否真的存在，也不需要关系 <code>text</code> 的内容具体是什么，我们的关注点应该在于读取文件错误时能否及时抛出异常，以及 <code>console.log()</code> 是否如预期执行</p>
<p>对应到测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getFile = <span class="built_in">require</span>(<span class="string">'./getFile'</span>)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'readFile'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> mocks = &#123;</span><br><span class="line">    fs: &#123;</span><br><span class="line">      readFileSync: jest.fn()</span><br><span class="line">    &#125;,</span><br><span class="line">    other: &#123;</span><br><span class="line">      text: <span class="string">'Test text'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  beforeAll(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    jest.mock(<span class="string">'fs'</span>, () =&gt; mocks.fs)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  test(<span class="string">'read file success run console.log'</span>, () =&gt; &#123;</span><br><span class="line">    mocks.fs.readFileSync.mockImplementation(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.mocks.other.text)</span><br><span class="line"></span><br><span class="line">    getFile()</span><br><span class="line"></span><br><span class="line">    expect(<span class="built_in">console</span>.log).toBeCalled()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面代码简单的实现了一个读取文件是否成功的测试，先别急着纠错，这段测试本身是错的，下面慢慢分析</p>
<p>我们在最开始创建了一个 <code>mocks</code> 对象，用来模拟数据，由于 <code>readFileSync</code> 方法可能存在多种返回结果（成功或报错），所以暂时用 <code>jest.fn()</code> 模拟</p>
<p>other 里面则是放一些固定的测试数据（不会随着测试过程而改变）</p>
<p><code>beforeAll</code> 钩子里面执行我们的 mock，把 require 进来的 fs 模块拦截调，也是本测试用例中的关键步骤</p>
<p>在第一个 test 里面我们改写 <code>mocks.fs.readFileSync</code> 的返回形式，这里使用的 <code>mockImplementation</code> 是直接模拟了一个执行函数，当然也可以模拟返回值，具体可以到 jest 官网</p>
<p><code>expect</code> 用来断言我们的 <code>console.log</code> 方法执行了</p>
<p>解释了这么多测试新手们应该也都看的明白了，下面聊一下错在哪，怎么改进</p>
<ol>
<li><code>mockImplementation</code> 最好替换为 <code>mockReturnValueOnce</code>，注意这里出现了 Once 结尾，也就是仅模拟一次返回值，<code>mockImplementation</code> 最好使用在复杂场景，所谓的复杂就是我们手动实现一个 <code>readFileSync</code> 方法使得测试达到我们预期的目的，在这个简单的场景里面我们只需要模拟返回值就好</li>
<li><code>expect(console.log)</code> 这里会报错，因为 jest 断言的内容只能是 mock function 或 spy，这里 console 是全局对象 global 上的方法，我们没有 require 将其引入，所以 jest.mock 显然处理上有些吃力，这时候 spy 就派上用场了，<code>beforeAll</code> 钩子里直接执行 <code>jest.spyOn(global.console, &#39;log&#39;)</code>，接下来我们就能监听到 <code>console.log</code> 的执行了 <code>expect(global.console.log)</code></li>
<li>断言的目的是测试 <code>console.log</code> 的执行，这是不严谨的测试，我们需要使用 <code>toBeCalledWith</code> 来代替 <code>toBeCalled</code>，不仅要测试执行了，而且要测试参数正确，简单修改为 <code>expect(global.console.log).toBeCalledWith(this.mocks.other.text)</code></li>
</ol>
<p>下面补一下 read file 失败的测试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">test(<span class="string">'read file fail throw error'</span>, () =&gt; &#123;</span><br><span class="line">  mocks.fs.readFileSync.mockImplementationOnce(<span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'readFile error'</span>) &#125;)</span><br><span class="line"></span><br><span class="line">  expect(getFile()).toThrow()</span><br><span class="line">  expect(global.console.log).not.toBeCalled()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>读取文件失败的测试就好理解的多，注意的就是对一个 <code>jest.fn()</code> 多次进行修改会导致测试用例之间的相互影响，这里尽量使用 Once 结尾方法，复杂场景可以如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  mocks.fs.readFileSync.mockReset()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>每次执行 test 前先清除 mock，避免多个测试用例之间复杂化 mock 导致错误</p>
<blockquote>
<p>小结：单元测试中的 mock 是个测试思路，我们无需关心外部文件和依赖是什么，只要能模拟出正确的情况程序是否按规则执行，错误的情况程序是否有异常处理，逻辑是否正确等。这样就能排除外界干扰，使得我们测试的当前一小部分是可靠的，稳定的即可。</p>
</blockquote>
<h3 id="引用外部文件"><a href="#引用外部文件" class="headerlink" title="引用外部文件"></a>引用外部文件</h3><p>单拿出一个小结说下 require 的问题，node 9 之前不支持 es6 的 import，这里也不详细说明了。</p>
<p>require 本身并不复杂，但是如果搞不清楚执行时机，那么测试将无法进行，来一个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> env = process.env.NODE_ENV</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.export = <span class="function"><span class="params">()</span> =&gt;</span> env</span><br></pre></td></tr></table></figure>

<p>测试如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getEnv = <span class="built_in">require</span>(<span class="string">'./getEnv'</span>)</span><br><span class="line"></span><br><span class="line">describe(<span class="string">'env'</span>, () =&gt; &#123;</span><br><span class="line">  test(<span class="string">'env will be dev'</span>, () =&gt; &#123;</span><br><span class="line">    process.env.NODE_ENV = <span class="string">'dev'</span></span><br><span class="line"></span><br><span class="line">    expect(getEnv()).toBe(<span class="string">'dev'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  test(<span class="string">'env will be pord'</span>, () =&gt; &#123;</span><br><span class="line">    process.env.NODE_ENV = <span class="string">'pord'</span></span><br><span class="line"></span><br><span class="line">    expect(getEnv()).toBe(<span class="string">'pord'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>十分简单的测试，抛开了 mock 的流程，这里会报测试未通过，原因是 require 同时 env 已经被赋值为 <code>undefined</code>，我们再试着改变 <code>NODE_ENV</code> 环境变量时，程序不会再次执行，当然了，处理起来也十分简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> getEnv</span><br><span class="line"></span><br><span class="line">test(<span class="string">'env will be dev'</span>, () =&gt; &#123;</span><br><span class="line">  process.env.NODE_ENV = <span class="string">'dev'</span></span><br><span class="line">  getEnv = <span class="built_in">require</span>(<span class="string">'./getEnv'</span>)</span><br><span class="line"></span><br><span class="line">  expect(getEnv()).toBe(<span class="string">'dev'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">test(<span class="string">'env will be pord'</span>, () =&gt; &#123;</span><br><span class="line">  process.env.NODE_ENV = <span class="string">'pord'</span></span><br><span class="line">  getEnv = <span class="built_in">require</span>(<span class="string">'./getEnv'</span>)</span><br><span class="line"></span><br><span class="line">  expect(getEnv()).toBe(<span class="string">'pord'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>顺带说了一下，希望大家不要在这种低级错误上浪费时间</p>
<p>其实引用外部文件还有些场景会对测试带来困惑，比如动态路径，场景如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> packageFile = <span class="string">`<span class="subst">$&#123;process.cwd()&#125;</span>/package.json`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> package = <span class="built_in">require</span>(packageFile)</span><br></pre></td></tr></table></figure>

<p>读取当前路径下的 <code>package.json</code>，当测试真正跑到这段代码时会到当前目录下找 <code>package.json</code>，这里尽量 mock 掉 <code>package.json</code> 为我们自己的模拟数据，但是 jest 不支持动态路径的 mock，试着这样写 <code>jest.mock(</code>${process.cwd()}/package.json<code>, () =&gt; mockFile)</code> 会报错，所以尽量使用可以 mock 的方案，保证单元测试可以顺利进行，修改如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = path.join(process.cwd(), <span class="string">'package.json'</span>)</span><br></pre></td></tr></table></figure>

<p>这样就可以 mock，<code>path</code> 了，和上面 mock 章节，大致思想都差不多</p>
<h3 id="覆盖率"><a href="#覆盖率" class="headerlink" title="覆盖率"></a>覆盖率</h3><p>单元测试覆盖率不达标等于白测，测试过程尽量覆盖所有判断条件，而不是全部通过了就不管了，在进一阶说，100% 的测试覆盖率并不证明一定覆盖到位了，因为顺带执行的代码也会算进覆盖率，例如</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.export = <span class="function">(<span class="params">list</span>) =&gt;</span> list.map(<span class="function">(<span class="params">&#123; id &#125;</span>) =&gt;</span> id)</span><br></pre></td></tr></table></figure>

<p>我们先不考虑这个 list 类型是不是数组，只是简单的例子，避免过度设计带来复杂化，我们测试可以这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getId = <span class="built_in">require</span>(<span class="string">'./getId'</span>)</span><br><span class="line"><span class="keyword">const</span> mocks = &#123;</span><br><span class="line">  list: [&#123;</span><br><span class="line">    id: <span class="number">1</span>,</span><br><span class="line">    name: <span class="string">'vue'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    id: <span class="number">2</span>,</span><br><span class="line">    name: <span class="string">'react'</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="string">'return id'</span>, () =&gt; &#123;</span><br><span class="line">  expect(getId(mocks.list)).toEqual([<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>直到有一天代码变成了 <code>module.export = (list) =&gt; [1, 2]</code></p>
<p>这时候测试还能通过，并且覆盖率 100%，的确不会有人蠢到把代码改成这样，只是一个例子，实际上逻辑会比这个复杂的多</p>
<p>那就聊一聊解决方案</p>
<ul>
<li>mock 数据的随机化，每次测试生成随机的 list 进行测试，现有库 <a href="https://github.com/nuysoft/Mock/wiki/Getting-Started" target="_blank" rel="noopener">mockjs</a></li>
<li>强关联测试，证明 map 方法的确执行了，并且参数正确，先 spy <code>spyOn(Array.prototype, &#39;map&#39;)</code> 然后断言</li>
</ul>
<p>聊了一圈从覆盖率聊到了测试健壮性的问题，可以思考下写过的测试是否真的满足注释或修改任何一行代码都能引起测试的 pass 报错</p>
<p>关于 node 就聊这么多，其实下文主要思想都一样，更多的是介绍些简单可行的方案，以及可能会踩坑的地方</p>
<h2 id="vue-环境"><a href="#vue-环境" class="headerlink" title="vue 环境"></a>vue 环境</h2><p>在 vue 使用场景下，无非就是组件库和业务逻辑，组件库偏向于 unit 测试，业务逻辑偏向于 e2e 测试，当然两者并不冲突</p>
<h3 id="unit-测试"><a href="#unit-测试" class="headerlink" title="unit 测试"></a>unit 测试</h3><p>推荐神器：<a href="https://github.com/vuejs/vue-test-utils" target="_blank" rel="noopener">vue-test-utils</a></p>
<p>README 给了多个测试库配置的例子，这里还是推荐使用 jest，给个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  props: [<span class="string">'value'</span>],</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      currentValue: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    value (val) &#123;</span><br><span class="line">      <span class="keyword">this</span>.currentValue = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'./Test.vue'</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">'props value'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> options = &#123; <span class="attr">propsData</span>: &#123; <span class="attr">value</span>: <span class="number">3</span> &#125; &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> wrapper = mount(Test)</span><br><span class="line"></span><br><span class="line">  expect(wrapper.vm.currentValue).toBe(<span class="number">3</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>十分简单的例子，亮点在测试文件的 wrapper 上，通过 <code>mount</code> 方法创建了一个组件实例，创建过程中允许加入一些配置信息，甚至是 mock 组件中的 method 方法</p>
<p>vue 单元测试的范围仅限于数据流动是否正确，逻辑渲染是否正确（v-if v-show v-for），style 和 class 是否正确，我们并不需要关系这个组件在浏览器渲染中的位置，也不需要关系对其它组件会造成什么影响，只要保证组件本身正确即可，前面说的断言，vue-test-utils 都能提供对应的方案，总体上节约很多测试成本</p>
<h3 id="e2e-测试"><a href="#e2e-测试" class="headerlink" title="e2e 测试"></a>e2e 测试</h3><p>也是推荐尤大基于最新脚手架的 <a href="https://www.npmjs.com/package/@vue/cli-plugin-e2e-nightwatch" target="_blank" rel="noopener">@vue/cli-plugin-e2e-nightwatch</a></p>
<p>e2e 测试的重点在于判断真实 DOM 是否满足预期要求，甚至很少出现 mock 场景，不可或缺的是一个浏览器运行环境，具体细节不赘述，可以看官方文档。</p>
<h2 id="nuxt-服务端渲染环境"><a href="#nuxt-服务端渲染环境" class="headerlink" title="nuxt 服务端渲染环境"></a>nuxt 服务端渲染环境</h2><p>nuxt 官方推荐 <a href="https://github.com/avajs/ava" target="_blank" rel="noopener">ava</a>，顺势带出 ava 的方案</p>
<h3 id="unit-测试-1"><a href="#unit-测试-1" class="headerlink" title="unit 测试"></a>unit 测试</h3><p>麻烦在配置上面，先给出需要安装的依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"@vue/test-utils"</span>,</span><br><span class="line"><span class="string">"ava"</span>,</span><br><span class="line"><span class="string">"browser-env"</span>,</span><br><span class="line"><span class="string">"require-extension-hooks"</span>,</span><br><span class="line"><span class="string">"require-extension-hooks-babel"</span>,</span><br><span class="line"><span class="string">"require-extension-hooks-vue"</span>,</span><br><span class="line"><span class="string">"sinon"</span></span><br></pre></td></tr></table></figure>

<p>在 package.json 里加几行 ava 配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"ava"</span>: &#123;</span><br><span class="line">  <span class="string">"require"</span>: [</span><br><span class="line">    <span class="string">"./tests/helpers/setup.js"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面来写 <code>./tests/helpers/setup.js</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> hooks = <span class="built_in">require</span>(<span class="string">'require-extension-hooks'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup browser environment</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'browser-env'</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Setup vue files to be processed by `require-extension-hooks-vue`</span></span><br><span class="line">hooks(<span class="string">'vue'</span>).plugin(<span class="string">'vue'</span>).push()</span><br><span class="line"><span class="comment">// Setup vue and js files to be processed by `require-extension-hooks-babel`</span></span><br><span class="line">hooks([<span class="string">'vue'</span>, <span class="string">'js'</span>]).plugin(<span class="string">'babel'</span>).push()</span><br></pre></td></tr></table></figure>

<p>上面的代码唯独没看到 <code>sinon</code> 这个库，说到 ava 是没有 mock 功能的，这就给单元测试的 mock 带来巨大困难，不过我们可以通过引入 <code>sinon</code> 来解决 mock 数据的问题，在 mock 方面上 <code>sinon</code> 做的比 jest 还要优秀，支持沙箱模式，不影响外部数据</p>
<p>给个简单点的例子</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-card</span> <span class="attr">v-for</span>=<span class="string">"item in topicList"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"link"</span> @<span class="attr">click</span>=<span class="string">"toMember(item.member.username)"</span>&gt;</span>&#123;&#123; item.member.username &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    topicList: &#123;</span><br><span class="line"><span class="javascript">      type: <span class="built_in">Array</span>,</span></span><br><span class="line"><span class="actionscript">      required: <span class="literal">true</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    toMember (name) &#123;</span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$router.push(<span class="string">`/member/<span class="subst">$&#123;name&#125;</span>`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对应的测试代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">'@vue/test-utils'</span></span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">from</span> <span class="string">'ava'</span></span><br><span class="line"><span class="keyword">import</span> sinon <span class="keyword">from</span> <span class="string">'sinon'</span></span><br><span class="line"></span><br><span class="line">test(<span class="string">'methods: toMember'</span>, t =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; topicList &#125; = t.context</span><br><span class="line">  <span class="keyword">const</span> $router = &#123;</span><br><span class="line">    push: <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> spy = sinon.spy($router, <span class="string">'push'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> wrapper = shallowMount(TopicListChalk, &#123;</span><br><span class="line">    propsData: &#123; topicList &#125;,</span><br><span class="line">    mocks: &#123;</span><br><span class="line">      $router</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  topicList.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> toMemberText = wrapper.findAll(<span class="string">'.card-content'</span>).at(index).find(<span class="string">'.link'</span>)</span><br><span class="line"></span><br><span class="line">    toMemberText.trigger(<span class="string">'click'</span>)</span><br><span class="line"></span><br><span class="line">    t.true(spy.withArgs(<span class="string">`/member/<span class="subst">$&#123;item.member.username&#125;</span>`</span>).calledOnce)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里直接将 <code>$router</code> mock 掉，并且使用 <code>sinon.spy</code> 监听执行，至于 <code>this.$router.push</code> 后浏览器有没有跳转并不是单元测试需要关心的，这里的写法也比较特别，test 方法在回调里默认参数为 <code>t</code>，对应的方法都挂载在 <code>t</code> 对象上，上下文可通过 <code>t.context</code> 传递</p>
<p>nuxt 单元测试相关就聊这么多</p>
<h3 id="e2e-测试-1"><a href="#e2e-测试-1" class="headerlink" title="e2e 测试"></a>e2e 测试</h3><p>这里有个歧义点，nuxt 官网只给出了 e2e 的测试案例 <a href="https://nuxtjs.org/guide/development-tools#end-to-end-testing" target="_blank" rel="noopener">end-to-end-testing</a></p>
<p>当使用默认脚手架构建的项目，也就是没有 server 端入口文件的项目，这个方案确实可行</p>
<p>但是涉及到其它框架（express|koa）的时候就显得不够用了，很有可能在自定义 server 入口是加入了大量中间件，这对于官网给出的例子是个巨大考验，不可能在每个测试文件里实现一遍 <code>new Nuxt</code>，所以需要更高层的封装，也就是忽略 server 启动流程的差异性，直接在浏览器中抓取页面</p>
<p>推荐：<a href="https://github.com/studbits/nuxt-jest-puppeteer" target="_blank" rel="noopener">nuxt-jest-puppeteer</a></p>
<h2 id="react-环境"><a href="#react-环境" class="headerlink" title="react 环境"></a>react 环境</h2><h3 id="unit-测试-2"><a href="#unit-测试-2" class="headerlink" title="unit 测试"></a>unit 测试</h3><p>这一波没得可选，jest 完胜，人家官网就有 <a href="https://facebook.github.io/jest/docs/en/tutorial-react.html" target="_blank" rel="noopener">React，RN 的支持文档</a></p>
<p>文档的案例也是十分全面，没得讲，不赘述</p>
<h3 id="e2e-测试-2"><a href="#e2e-测试-2" class="headerlink" title="e2e 测试"></a>e2e 测试</h3><p>其实上面讲了两个 e2e 的方案选择，大同小异，需要一个能在 node 跑的无头浏览器，官方没有推荐，这里站 vue 一票选择 <a href="http://nightwatchjs.org/" target="_blank" rel="noopener">nightwatchjs</a></p>
<h2 id="next-服务端渲染环境"><a href="#next-服务端渲染环境" class="headerlink" title="next 服务端渲染环境"></a>next 服务端渲染环境</h2><h3 id="unit-测试-3"><a href="#unit-测试-3" class="headerlink" title="unit 测试"></a>unit 测试</h3><p>主要讲一下如何配置，先是依赖包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"babel-core"</span>,</span><br><span class="line"><span class="string">"babel-jest"</span>,</span><br><span class="line"><span class="string">"enzyme"</span>,</span><br><span class="line"><span class="string">"enzyme-adapter-react-16"</span>,</span><br><span class="line"><span class="string">"jest"</span>,</span><br><span class="line"><span class="string">"react-addons-test-utils"</span>,</span><br><span class="line"><span class="string">"react-test-renderer"</span></span><br></pre></td></tr></table></figure>

<p>在 package.json 里面加 script <code>&quot;test&quot;: &quot;NODE_ENV=test jest&quot;</code></p>
<p>在跟路径下加 jest.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  setupFiles: [<span class="string">'&lt;rootDir&gt;/jest.setup.js'</span>],</span><br><span class="line">  testPathIgnorePatterns: [<span class="string">'&lt;rootDir&gt;/.next/'</span>, <span class="string">'&lt;rootDir&gt;/node_modules/'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在跟路径下加 jest.setup.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'enzyme'</span></span><br><span class="line"><span class="keyword">import</span> Adapter <span class="keyword">from</span> <span class="string">'enzyme-adapter-react-16'</span></span><br><span class="line"></span><br><span class="line">configure(&#123;</span><br><span class="line">  adapter: <span class="keyword">new</span> Adapter()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>接下来就可以愉快的写测试了</p>
<h3 id="e2e-测试-3"><a href="#e2e-测试-3" class="headerlink" title="e2e 测试"></a>e2e 测试</h3><p>跳过了～～～</p>
<h2 id="angular-环境"><a href="#angular-环境" class="headerlink" title="angular 环境"></a>angular 环境</h2><p>之所以加了这一节，还是因为多少写过一些 angular，angular 作为框架本身就是全面的，cli 新建的项目自身就带有 unit 测试和 e2e 测试</p>
<p>unit 测试默认是 <a href="https://karma-runner.github.io/2.0/index.html" target="_blank" rel="noopener">karma</a> + <a href="https://jasmine.github.io/" target="_blank" rel="noopener">jasmine</a><br>e2e 测试默认是 <a href="https://www.protractortest.org/#/" target="_blank" rel="noopener">protractor</a></p>
<p>也没什么可争辩的，这就是官方解决方案，用起来也方便顺手</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>聊了好多个环境，其实行文目的主要有两方面</p>
<ul>
<li>测试思想，如何写好单元测试，主要集中在前半文</li>
<li>测试工具推荐和相应配置</li>
</ul>
<p>测试本身并不复杂，但是想写出高效测试并不容易，千万不要形成为了测试而测试的想法</p>
<blockquote>
<p>用谎言去验证谎言得到的还是谎言。。。</p>
</blockquote>
<p>大多数情况下都是项目在赶进度没空写测试，抽空把测试补上真的是一件值得去做的事情</p>
]]></content>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>Oh-My-Zsh 操作 Git 的快捷键</title>
    <url>/2016/10/11/git-oh-my-zsh/</url>
    <content><![CDATA[<p><img src="/uploads/git-oh-my-zsh1.png" alt=""></p>
<p>本篇文章介绍 Oh-My-Zsh 安装，以及 git 快捷键。也许你已经烦透了每天 <code>git add .</code> <code>git commit -m &#39;some fix&#39;</code> <code>git push</code>…</p>
<p>如果操作变成这样 <code>ga .</code> <code>gcmsg &#39;some fix&#39;</code> <code>gp</code>是不是很炫酷，好吧，对于已经使用的人没什么新鲜感。</p>
<p>接下来针对好奇的 Program development engineer（程序猿🐒），做详细介绍。</p>
<p>相信 git 大家并不陌生，不熟悉 git 操作的可以看我转载的一篇阮一峰大神的 <a href="http://orangexc.xyz/2016/05/25/List-of-commonly-used-Git-commands/">常用 Git 命令清单</a>，重头戏 oh-my-zsh 大家可以看 <a href="http://ohmyz.sh/" target="_blank" rel="noopener">oh-my-zsh官网</a>。</p>
<a id="more"></a>

<h2 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title="Oh-My-Zsh"></a>Oh-My-Zsh</h2><blockquote>
<p>Oh-My-Zsh is an open source, community-driven framework for managing your ZSH configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p>
</blockquote>
<p>简单说就是集成插件的命令行工具。针对 Mac 用户和 Linux 用户有很好的支持，windows 的朋友先不要急（有彩蛋）。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>Mac 用户和 Linux 用户通过在您的终端中运行以下命令之一来安装。可以安装通过 <code>curl</code> 或 <code>wget</code> 命令行。</p>
<p>via curl</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure>

<p>via wget</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure>

<p>windows 我推荐一个集成 shell，git，oh-my-zsh 的命令行工具<a href="http://babun.github.io/" target="_blank" rel="noopener">Babun</a>。点击进入官网下载。当然官网还给出了其他炫酷功能大家可以详细阅读。</p>
<p>oh-my-zsh 有许多插件和主题大家可以去 <code>~/.zshrc</code> 配置</p>
<p>更多功能可以去官网阅读，这里强烈建议大家使用，因为会提高工作效率，对于追求完美开发体验的人帮助很大。</p>
<h3 id="快捷键实现原理"><a href="#快捷键实现原理" class="headerlink" title="快捷键实现原理"></a>快捷键实现原理</h3><p>这里只说 oh-my-zsh 针对 git 的改进。为什么支持缩写的形式。</p>
<p>大家可能知道 git 的快捷键 alias，它允许我们自己配制快捷键。例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">alias</span> gst=<span class="string">'git status'</span></span><br><span class="line"><span class="built_in">alias</span> gp=<span class="string">'git push'</span></span><br><span class="line"><span class="built_in">alias</span> gp=<span class="string">'git push'</span></span><br></pre></td></tr></table></figure>

<p>需要配置的快捷键过多，如果对 git 操作了解不够深入的人无法自行配置。那么 oh-my-zsh 是如何实现的呢？</p>
<p>其实就是用的 <code>alias</code> ，这里是 Github 上的链接 <a href="https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/git/git.plugin.zsh" target="_blank" rel="noopener">https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/git/git.plugin.zsh</a> ，通过 url 便知这里的<code>master</code>分支下，<code>plugins</code>插件目录，<code>git</code>插件下的配置文件。</p>
<p>喜欢阅读代码的直接点击链接查看所有快捷键实现。这里便于整理把平时工作常用的快捷键给大家，至于不常用的大家查看 Github 上的链接，可能记得多了这种对应关系容易弄混，建议大家只熟练记忆工作常有的快捷键，其它可以按着 git 官方文档去做。减少出错和不必要的麻烦。</p>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g - git</span><br><span class="line">gst - git status</span><br><span class="line">gl - git pull</span><br><span class="line">gup - git pull --rebase</span><br><span class="line">gp - git push</span><br><span class="line">gd - git diff</span><br><span class="line">gdc - git diff --cached</span><br><span class="line">gdv - git diff -w &quot;$@&quot; | view</span><br><span class="line">gc - git commit -v</span><br><span class="line">gc! - git commit -v --amend</span><br><span class="line">gca - git commit -v -a</span><br><span class="line">gca! - git commit -v -a --amend</span><br><span class="line">gcmsg - git commit -m</span><br><span class="line">gco - git checkout</span><br><span class="line">gcm - git checkout master</span><br><span class="line">gr - git remote</span><br><span class="line">grv - git remote -v</span><br><span class="line">grmv - git remote rename</span><br><span class="line">grrm - git remote remove</span><br><span class="line">gsetr - git remote set-url</span><br><span class="line">grup - git remote update</span><br><span class="line">grbi - git rebase -i</span><br><span class="line">grbc - git rebase --continue</span><br><span class="line">grba - git rebase --abort</span><br><span class="line">gb - git branch</span><br><span class="line">gba - git branch -a</span><br><span class="line">gcount - git shortlog -sn</span><br><span class="line">gcl - git config --list</span><br><span class="line">gcp - git cherry-pick</span><br><span class="line">glg - git log --stat --max-count&#x3D;10</span><br><span class="line">glgg - git log --graph --max-count&#x3D;10</span><br><span class="line">glgga - git log --graph --decorate --all</span><br><span class="line">glo - git log --oneline --decorate --color</span><br><span class="line">glog - git log --oneline --decorate --color --graph</span><br><span class="line">gss - git status -s</span><br><span class="line">ga - git add</span><br><span class="line">gm - git merge</span><br><span class="line">grh - git reset HEAD</span><br><span class="line">grhh - git reset HEAD --hard</span><br><span class="line">gclean - git reset --hard &amp;&amp; git clean -dfx</span><br><span class="line">gwc - git whatchanged -p --abbrev-commit --pretty&#x3D;medium</span><br><span class="line">gsts - git stash show --text</span><br><span class="line">gsta - git stash</span><br><span class="line">gstp - git stash pop</span><br><span class="line">gstd - git stash drop</span><br><span class="line">ggpull - git pull origin $(current_branch)</span><br><span class="line">ggpur - git pull --rebase origin $(current_branch)</span><br><span class="line">ggpush - git push origin $(current_branch)</span><br><span class="line">ggpnp - git pull origin $(current_branch) &amp;&amp; git push origin $(current_branch)</span><br><span class="line">glp - _git_log_prettily</span><br></pre></td></tr></table></figure>

<p>就我而言已经足够了，当然也已经包括了 Github 上大部分快捷键。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>好的开发工具可以大大提升工作效率，应用适当即可，过多依赖快捷键自动补全之类的工具时间久了基础知识退化，导致没有好用的工具无法编程，建议新人熟记原始命令后再尝试快捷键，避免错误的发生（毕竟这是管理代码工具，操作不当很可能删除了最近 <code>add</code> 之前或者 <code>commit</code> 之前的代码快照，因为某些操作是不可逆的），亲身踩过坑删除了一天的工作，虽然重写两个小时就完成，但十分不爽。</p>
<p>哈哈，牢骚了一下，本人现在大四在校生，实习5个月，哪里写的不对还望大家指正。</p>
]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 数组中的 indexOf 方法</title>
    <url>/2016/10/12/js-array-Indexof/</url>
    <content><![CDATA[<p><img src="/uploads/js-array-Indexof1.png" alt=""></p>
<p>最近项目遇到一个小问题代码我会简化成小例子展示给大家。</p>
<p>用心看到最后会有收获哈，基础扎实的童鞋可以直接跳到<a href="http://orangexc.xyz/2016/10/12/IndexOf-in-JavaScript-array/#Array-类型的使用">数组类型使用</a>。</p>
<p>说到 indexOf 大家并不陌生，判断字符串是否包涵子字符串时特别常用（正则不熟练同学的利器😄）。</p>
<a id="more"></a>

<h2 id="String-类型的使用"><a href="#String-类型的使用" class="headerlink" title="String 类型的使用"></a>String 类型的使用</h2><p>温习一下大家熟知的字符串用法，举个🌰</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'orange'</span>;</span><br><span class="line"></span><br><span class="line">str.indexOf(<span class="string">'o'</span>);  <span class="comment">//0</span></span><br><span class="line">str.indexOf(<span class="string">'n'</span>);  <span class="comment">//3</span></span><br><span class="line">str.indexOf(<span class="string">'c'</span>);  <span class="comment">//-1</span></span><br></pre></td></tr></table></figure>

<p>这里 0 和 3 分别是 o 和 n 在字符串中出现的位置。起始下标是 0。而 -1 代表未匹配。</p>
<p>曾经有人问我为什么偏偏是 -1 不是 null 或者 undefined。你去问制定规则的人啊！一脸无奈。</p>
<p>大家看到这里感觉没什么亮点啊，别急接着再来一个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numStr = <span class="string">'2016'</span>;</span><br><span class="line"></span><br><span class="line">numStr.indexOf(<span class="string">'2'</span>);  <span class="comment">//0</span></span><br><span class="line">numStr.indexOf(<span class="number">2</span>);  <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<p>看到这里有个小点就是 <code>indexOf</code> 会做简单的类型转换，把数字转换成字符串 <code>&#39;2&#39;</code> 然后再执行。</p>
<h2 id="Number-类型的使用"><a href="#Number-类型的使用" class="headerlink" title="Number 类型的使用"></a>Number 类型的使用</h2><p>大家可能会想 <code>number</code> 类型有没有 <code>indexOf</code> 方法因为会做隐式转换嘛！明确告诉大家没有，上例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> num = <span class="number">2016</span>;</span><br><span class="line"></span><br><span class="line">num.indexOf(<span class="number">2</span>);  <span class="comment">//Uncaught TypeError: num.indexOf is not a function</span></span><br></pre></td></tr></table></figure>

<p>非要对 <code>number</code> 类型使用 <code>indexOf</code> 方法嘞？那就转换成字符串咯，接着上例来写</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二逼青年的写法</span></span><br><span class="line">num = <span class="string">'2016'</span>;</span><br><span class="line">num.indexOf(<span class="number">2</span>);  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//普通青年的写法</span></span><br><span class="line">num.toString().indexOf(<span class="number">2</span>);  <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//文艺青年的写法</span></span><br><span class="line">(<span class="string">''</span> + num).indexOf(<span class="number">2</span>);  <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<p>第一种写法简单直接，对于已知的较短的数字也不是不可行。但是 num 变量针对不同数据是变化的时候，怎么办呢？❌</p>
<p>第二种写法最为常用,但对比第三种写法长了一点。哈哈，其实都可以，代码洁癖的人喜欢第三种 ✅</p>
<h2 id="Array-类型的使用"><a href="#Array-类型的使用" class="headerlink" title="Array 类型的使用"></a>Array 类型的使用</h2><p>大家提起精神，大boss来了。</p>
<p>数组方法大家再熟悉不过了，却忽略了数组有 <code>indexOf</code> 这个方法（我个人感觉）。</p>
<p>干说不练瞎扯淡，遇到了什么问题，注意⚠️点又在哪里？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'orange'</span>, <span class="string">'2016'</span>, <span class="string">'2016'</span>];</span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="string">'orange'</span>);  <span class="comment">//0</span></span><br><span class="line">arr.indexOf(<span class="string">'o'</span>);  <span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line">arr.indexOf(<span class="string">'2016'</span>);  <span class="comment">//1</span></span><br><span class="line">arr.indexOf(<span class="number">2016</span>);  <span class="comment">//-1</span></span><br></pre></td></tr></table></figure>

<p>这里没把例子拆的那么细，四个用例足以说明问题。</p>
<ul>
<li>arr.indexOf(‘orange’) 输出 0 因为 ‘orange’ 是数组的第 0 个元素，匹配到并返回下标。</li>
<li>arr.indexOf(‘o’) 输出 -1 因为此方法不会在每一个元素的基础上再次执行 indexOf 匹配。</li>
<li>arr.indexOf(‘2016’) 输出 1 因为此方法从头匹配直到匹配到时返回第一个数组元素的下表，而不是返回全部匹配的下标。</li>
<li>arr.indexOf(2016) 输出 -1 <strong>注意：这里不会做隐式类型转换。</strong></li>
</ul>
<p>既然坑已经发现我们不妨刨根问底。去MDN官网一看究竟。对此话题感兴趣的朋友可以直接跳转到 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noopener">Array.prototype.indexOf()</a></p>
<p>只想了解的朋友下面给大家官方的 Description。</p>
<blockquote>
<p>indexOf() compares searchElement to elements of the Array using strict equality (the same method used by the === or triple-equals operator).</p>
</blockquote>
<p>一目了然，这里用的是严格等于（<code>===</code>）。大家做类似判断的时候多留意。不要误认为数字会转成字符串，同理字符串也不会转换成数字。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>小知识点积累，不作为深入讨论的话题，因此这里没有解释 indexOf() 的第二个参数，相信大家都知道第二个参数的作用，不知道的可以看这里<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf" target="_blank" rel="noopener">String.prototype.indexOf()</a>,然后结合上面数组的链接也看一下第二个参数。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 类型转换深度学习</title>
    <url>/2016/10/31/js-type-conversion/</url>
    <content><![CDATA[<p><img src="/uploads/js-type-conversion1.jpg" alt=""></p>
<p>JavaScript 是一门弱类型语言，刚接触的时候感觉方便快捷（不需要声明变量类型了耶！），接触久了会发现它带来的麻烦有的时候不在预期之内</p>
<a id="more"></a>

<p>呵呵一笑，哪有这么夸张，可能有人看过这样一段代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure>

<p>这个占了好大的篇幅哈 3167 个字符，粘贴到浏览器的 Console 控制台，直接弹出了 orange，随叫随到有不有</p>
<p>对于不知道原理出处的给大家一个地址：<a href="http://www.jsfuck.com/" target="_blank" rel="noopener">http://www.jsfuck.com/</a></p>
<p>JSFuck 的变态程度达到了极致，因为它的理念是 Write any JavaScript with 6 Characters: <code>[]()!+</code></p>
<p>或许又有人说：这个只是搞怪的吧，实际谁这么写代码啊</p>
<p>说的没错，当一段代码变得晦涩难懂的时候，甚至到上文的混乱字符（天书），却能实现任意功能这就变得不可预期，也就是说 JS 代码的安全性没有保障</p>
<p>当然本文不会研究这些无意义的字符原理是怎么实现的因为人家的 Github 文档已经描述的特别全面了，感兴趣的可以研究下：<a href="https://github.com/aemkei/jsfuck" target="_blank" rel="noopener">https://github.com/aemkei/jsfuck</a></p>
<p>我们聊一聊每天能看到用到的方法底层是怎么解析的，熟知转换分成两种一种是隐式转换，另一种是强制的类型转换</p>
<h2 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h2><p>当遇到以下几种情况，JavaScript会自动转换数据类型：</p>
<ul>
<li>不同类型的数据进行互相运算</li>
<li>对非布尔值类型的数据求布尔值</li>
<li>对非数值类型的数据使用一元运算符（即 “+” 和 “-“）</li>
</ul>
<h3 id="隐式转换为-Boolean"><a href="#隐式转换为-Boolean" class="headerlink" title="隐式转换为 Boolean"></a>隐式转换为 Boolean</h3><p>大多数在做 if 判断时会用到，这里只需记住六个转换为 false，其它全部为 true</p>
<ul>
<li>null</li>
<li>undefined</li>
<li>NaN</li>
<li>‘’</li>
<li>-0</li>
<li>+0</li>
</ul>
<h3 id="隐式转换为-String"><a href="#隐式转换为-String" class="headerlink" title="隐式转换为 String"></a>隐式转换为 String</h3><p>字符串的自动转换，主要发生在加法运算时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'1'</span> + <span class="number">2</span>  <span class="comment">// '12'</span></span><br><span class="line"><span class="string">'1'</span> + <span class="literal">true</span>  <span class="comment">// "1true"</span></span><br><span class="line"><span class="string">'1'</span> + <span class="literal">false</span>  <span class="comment">// "1false"</span></span><br><span class="line"><span class="string">'1'</span> + &#123;&#125;  <span class="comment">// "1[object Object]"</span></span><br><span class="line"><span class="string">'1'</span> + []  <span class="comment">// "1"</span></span><br><span class="line"><span class="string">'1'</span> + <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;  <span class="comment">// "1function ()&#123;&#125;"</span></span><br><span class="line"><span class="string">'1'</span> + <span class="literal">undefined</span>  <span class="comment">// "1undefined"</span></span><br><span class="line"><span class="string">'1'</span> + <span class="literal">null</span>  <span class="comment">// "1null"</span></span><br></pre></td></tr></table></figure>

<h3 id="隐式转换为-Number"><a href="#隐式转换为-Number" class="headerlink" title="隐式转换为 Number"></a>隐式转换为 Number</h3><p>除了加法运算符有可能把运算子转为字符串，其他运算符都会把两侧的运算子自动转成数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">'5'</span> - <span class="string">'2'</span>  <span class="comment">// 3</span></span><br><span class="line"><span class="string">'5'</span> * <span class="string">'2'</span>  <span class="comment">// 10</span></span><br><span class="line"><span class="literal">true</span> - <span class="number">1</span>  <span class="comment">// 0</span></span><br><span class="line"><span class="literal">false</span> - <span class="number">1</span>  <span class="comment">// -1</span></span><br><span class="line"><span class="string">'1'</span> - <span class="number">1</span>  <span class="comment">// 0</span></span><br><span class="line"><span class="string">'5'</span> * []  <span class="comment">// 0</span></span><br><span class="line"><span class="literal">false</span> / <span class="string">'5'</span>  <span class="comment">// 0</span></span><br><span class="line"><span class="string">'abc'</span> - <span class="number">1</span>  <span class="comment">// NaN</span></span><br><span class="line">+<span class="string">'abc'</span>  <span class="comment">// NaN</span></span><br><span class="line">-<span class="string">'abc'</span>  <span class="comment">// NaN</span></span><br><span class="line">+<span class="literal">true</span>  <span class="comment">// 1</span></span><br><span class="line">-<span class="literal">false</span>  <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>隐式转换的基础表现都在这了，强调的是这些转换的背后都伴随着强制转换，使用 Boolean、Number 和 String，下面重点讲一下强制转换的原理</p>
</blockquote>
<h2 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h2><p>看到上面例子也许你已经有些许疑问了，比如上面的这个 <code>&#39;1&#39; + {}</code> 怎么就输出 <code>1[object Object]</code> 了呢</p>
<p>如上面强调的，你会猜测首先执行 <code>String({})</code> 得到 <code>&quot;[object Object]&quot;</code> ，然后再字符串拼接，是的我们总能得到转换背后的实现原理，其实真实原理要比这个复杂，见下文</p>
<h3 id="强制转换为-Boolean"><a href="#强制转换为-Boolean" class="headerlink" title="强制转换为 Boolean"></a>强制转换为 Boolean</h3><p>这里略过因为与隐式转换相同，切记 <code>[]、{}</code> 都转换成 true</p>
<h3 id="强制转换为-String"><a href="#强制转换为-String" class="headerlink" title="强制转换为 String"></a>强制转换为 String</h3><p>基本类型的转换结果与隐式转换相同，这里说一下对象的转换，加深上面引用例子的解析</p>
<p>对象转换字符串分成三步</p>
<ol>
<li>先调用toString方法，如果toString方法返回的是原始类型的值，则对该值使用String方法，不再进行以下步骤</li>
<li>如果toString方法返回的是复合类型的值，再调用valueOf方法，如果valueOf方法返回的是原始类型的值，则对该值使用String方法，不再进行以下步骤</li>
<li>如果valueOf方法返回的是复合类型的值，则报错</li>
</ol>
<p>再分解这个例子</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure>

<p>上面代码相当于下面这样</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(&#123;&#125;.toString())</span><br><span class="line"><span class="comment">// "[object Object]"</span></span><br></pre></td></tr></table></figure>

<p>如果 toString 方法和 valueOf 方法，返回的都不是原始类型的值，则 String 方法报错</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  valueOf: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"valueOf"</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  toString: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"toString"</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(obj)</span><br><span class="line"><span class="comment">// TypeError: Cannot convert object to primitive value</span></span><br></pre></td></tr></table></figure>

<p>我们不难看出可以对 toString 方法和 valueOf 方法进行改写，测试其先后运行的顺序也简单的多</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>(&#123;<span class="attr">toString</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">3</span>;&#125;&#125;)</span><br><span class="line"><span class="comment">// "3"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(&#123;<span class="attr">valueOf</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">2</span>;&#125;&#125;)</span><br><span class="line"><span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(&#123;<span class="attr">valueOf</span>:<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">2</span>;&#125;,<span class="attr">toString</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> <span class="number">3</span>;&#125;&#125;)</span><br><span class="line"><span class="comment">// "3"</span></span><br></pre></td></tr></table></figure>

<p>结果表示toString方法先于valueOf方法执行</p>
<h3 id="强制转换为-Number"><a href="#强制转换为-Number" class="headerlink" title="强制转换为 Number"></a>强制转换为 Number</h3><p>基本类型转换如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="string">"123"</span>) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">"123abc"</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">""</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>

<p>对象转换一样要复杂些，与 String 唯一不同的就是 valueOf 方法在前， toString 方法在后，其它不赘述见上文例子。</p>
<p>isNaN() 并不陌生，<code>isNaN({}) //true</code> 的内在转换过程是相同的</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其它的转换原则还有很多，看到这我们还是不能解释文章开始的代码转换的过程，掌握这些更多是保证正常书写代码规避错误的发生，十分好奇的可以研究下比较特殊的转化原则，还有好多好多。</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>koa2 从入门到精通</title>
    <url>/2019/07/21/koa/</url>
    <content><![CDATA[<p><img src="/uploads/koa1.jpg" alt=""></p>
<a id="more"></a>

<p>koa 发布已经快 6 年的时间，作为继 express 之后 node 服务框架最大的黑马，有很多的设计思想值得我们学习，本文从简到繁逐步介绍 koa，同时适合新老手阅读</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>这里引用中文官方网站的原文</p>
<blockquote>
<p>Koa 是一个新的 web 框架，由 Express 幕后的原班人马打造， 致力于成为 web 应用和 API 开发领域中的一个更小、更富有表现力、更健壮的基石。 通过利用 async 函数，Koa 帮你丢弃回调函数，并有力地增强错误处理。 Koa 并没有捆绑任何中间件， 而是提供了一套优雅的方法，帮助您快速而愉快地编写服务端应用程序。</p>
</blockquote>
<p>既然是 web 框架大家一定不陌生，通过启动一个 node http server，监听一个端口，进而我们就可以通过类似 <code>localhost:3000</code> 在本地访问我们的服务了，这个服务可以是 web 网站，可以是 restful 接口，也可以是静态文件服务等等</p>
<h2 id="Hello-Word"><a href="#Hello-Word" class="headerlink" title="Hello Word"></a>Hello Word</h2><p>任何语言、框架都存在 <code>Hello Word</code> 示例，来表达其最简单的入门 Demo，代码如下</p>
<p><img src="/uploads/koa2.png" alt=""></p>
<p>此时访问浏览器 <code>localhost:3000</code>，我们会看到打印出了 <code>Hello Word</code>，此时一个基于 koa 的服务就启动完成了</p>
<h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><p>理解 koa 第一步，搞清楚上下文的作用</p>
<p>例如：微信群里面有人说外面下雪了，你跑到窗边看到的却是晴空万里，这时你才意识到同样是 10 月份，他在寒冷的北方，你在酷暑的南方</p>
<p>类似的，一次请求会包含用户的登录状态，或者一些Token之类的信息，这些信息就是上下文的一部分，用于确定一次的请求环境</p>
<p>Koa 的 Context 把 node 的 request, response 对象封装进一个单独对象, 并提供许多开发 web 应用和 APIs 有用的方法. 那些在 HTTP server 开发中使用非常频繁操作, 直接在 Koa 里实现, 而不是放在更高层次的框架, 这样中间件就不需要重复实现这些通用的功能.</p>
<h2 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h2><p>先来看一个官方的例子：</p>
<p><img src="/uploads/koa3.png" alt=""></p>
<p>简单解释下，代码起始初始化一个 koa 实例，下面分别通过 use 方法载入了三个中间件方法，执行顺序：</p>
<ol>
<li>进入第一个中间件</li>
<li><code>next()</code> 跳到下一个中间件</li>
<li><code>new Data()</code> 记录当前时间</li>
<li><code>next()</code> 跳到下一个中间件</li>
<li>将 <code>ctx.body</code> 赋值</li>
<li>回到上一个中间件再次记录当前时间并计算时间差存到 <code>http header</code> 中</li>
<li>回到上一个中间件将 header 中的 <code>X-Response-time</code> 打印出来</li>
</ol>
<p>这里的执行顺序延伸出了十分经典的洋葱模型</p>
<p><img src="/uploads/koa4.png" alt=""></p>
<p>在一次请求的过程中会往返经过同一中间件两次，允许我们处理不同请求阶段的逻辑</p>
<h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><p>上面分别介绍了 koa 里面两个最重要的概念，下面我们分析下 koa 内部是如何运作的，所谓的洋葱模型是如何建立的</p>
<p>koa 源码的 lib 目录十分简单</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lib</span><br><span class="line">  |- application.js</span><br><span class="line">  |- context.js</span><br><span class="line">  |- request.js</span><br><span class="line">  |- response.js</span><br></pre></td></tr></table></figure>

<h3 id="Application-类初始化"><a href="#Application-类初始化" class="headerlink" title="Application 类初始化"></a>Application 类初始化</h3><p>入口文件是 <code>application.js</code>，我们先从这里入手</p>
<p><img src="/uploads/koa5.png" alt=""></p>
<p>Application 是一个 class，这个类继承了 node 的 <a href="`https://nodejs.org/dist/latest-v12.x/docs/api/events.html`">Events</a> 这里不详细展开，在 <code>constructor</code> 中初始化了以下内容：</p>
<ul>
<li>proxy 代理默认不开启</li>
<li>middleware 中间件是个空数组，这里重点注意下</li>
<li>env 根据环境变量 <code>NODE_ENV</code> 来判断</li>
<li>context、request、response 分别通过 <code>Object.create</code> 方法将 lib 目录下对应的文件导入到 <code>this</code> 当前上下文，且不污染引入对象</li>
</ul>
<h3 id="use-方法"><a href="#use-方法" class="headerlink" title="use 方法"></a>use 方法</h3><p>按照正常的编码顺序，在初始化完 koa 实例后（即 <code>const app = new Koa()</code>），我们需要调用 <code>app.use()</code> 去挂载我们的中间件，那么我们看下 use 方法做了什么</p>
<p><img src="/uploads/koa6.png" alt=""></p>
<p>判断中间件为 function，判断中间件是否为 generator function 类型，只是简单的将中间件函数 <code>push</code> 到了 <code>middleware</code> 数组中</p>
<p>此时心中有没有大写的 WHAT？</p>
<p>其实就是这么直白，没什么复杂逻辑，后面也许大家都猜到了，循环调用 <code>middleware</code> 中的方法去执行，此处尚未表明洋葱模型是怎么来的，我们先不展开，继续按代码顺序执行</p>
<h3 id="listen-方法"><a href="#listen-方法" class="headerlink" title="listen 方法"></a>listen 方法</h3><p>按照正常的编码顺序，在 <code>use</code> 完我们的中间件之后就是 <code>app.listen(3000)</code></p>
<p>一起看下这个 listen 干了什么</p>
<p><img src="/uploads/koa7.png" alt=""></p>
<p>这里的 <code>http.createServer</code> 就是 node 原生启动 http 服务的方法，这里稍微扩展下基础知识，此方法接受两个参数</p>
<ul>
<li><code>options[IncomingMessage, ServerResponse]</code> 这里从 node 版本 v9.6.0, v8.12.0 后才支持，这里不赘述</li>
<li><code>requestListener</code> 此参数为 function 类型，每次请求会传入 <code>req, res</code> 两个参数</li>
</ul>
<p>不难理解这里的 <code>this.callback()</code> 方法一定是返回了一个函数，并且接收两个参数 <code>(req, res)</code>，下面看下源码</p>
<p><img src="/uploads/koa8.png" alt=""></p>
<p>这个 callback 中的信息量有点大，代码本身并不难理解，注释也有说明，<strong>从这里展开从上到下分别解释</strong></p>
<h3 id="compose-方法"><a href="#compose-方法" class="headerlink" title="compose 方法"></a>compose 方法</h3><p>这里的 compose 方法主要负责生成洋葱模型，通过 <code>koa-compose</code> 包实现，源码如下</p>
<p><img src="/uploads/koa9.png" alt=""></p>
<p>从注释看得出大致逻辑，这里的巧妙之处在于 <code>fn(context, dispatch.bind(null, i + 1))</code></p>
<p>这个 <code>dispatch.bind(null, i + 1)</code> 就是我们通常写中间件的第二个参数 <code>next</code></p>
<p>我们执行这个 <code>next()</code> 方法实际上得到的是下一个中间件的执行</p>
<p>也就不难理解为什么我们 <code>await next()</code> 的时候等待的是后面所有中间件串联执行后了，回头再看下上文中间件部分的执行顺序就豁然开朗了</p>
<h3 id="createContext-方法"><a href="#createContext-方法" class="headerlink" title="createContext 方法"></a>createContext 方法</h3><p>callback 中的展开解释，看下 <code>const ctx = this.createContext(req, res)</code> 做了什么</p>
<p><img src="/uploads/koa10.png" alt=""></p>
<p>这里主要是将 req, res 及 this.request, this.response 都挂载到了 context 上，并通过赋值理清了循环引用层级关系，为使用者提供方便</p>
<h3 id="handleRequest-方法"><a href="#handleRequest-方法" class="headerlink" title="handleRequest 方法"></a>handleRequest 方法</h3><p>还是 callback 中的展开解释，看下 <code>this.handleRequest(ctx, fn)</code> 这部分做了什么</p>
<p><img src="/uploads/koa11.png" alt=""></p>
<p>分别拿到 ctx 和 compose 生成的洋葱模型，开始逐一消费中间件</p>
<h3 id="context-js-文件"><a href="#context-js-文件" class="headerlink" title="context.js 文件"></a>context.js 文件</h3><p>上面理清了整体框架，下面看下 <code>context.js</code> 内部的细节，在文件结尾有两大段的代理</p>
<p><img src="/uploads/koa12.png" alt=""></p>
<p><img src="/uploads/koa13.png" alt=""></p>
<p>这里可以看到所有的 req 及 res 的方法集合，那么哪些方法可读，哪些可写，哪些既可读又可写，哪些方法不允许修改</p>
<p>这就是 <code>delegates</code> 这个库做的事情。</p>
<p><code>delegates</code> 内部利用了，<code>__defineGetter__</code> 和 <code>__defineSetter__</code> 方法控制读写，当然我们可以从中学习思想，也不能盲从</p>
<p>这两个 api 去 MDN 上搜索会给出相同的警告信息</p>
<blockquote>
<p>This feature is deprecated in favor of defining setters using the object initializer syntax or the Object.defineProperty() API.</p>
</blockquote>
<p>其实还是建议我们使用 vue 的代理方式 <code>Object.defineProperty()</code>，不过这个库有四年没更新了依然稳定运行着，还是深受 koa 开发者认可的</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><p><code>request.js</code> 和 <code>response.js</code> 文件没什么可以讲，就是具体的工具方法实现，方便开发人员调用，感兴趣可以自行阅读源码</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>智联前端架构整体的 node 服务都基于 koa 实现，包括我们的 vue 服务端渲染和 node restful api 等等</p>
<p>我们选择 koa 的原因是其本身轻巧，可扩展性良好，支持 async、await 的异步，彻底摆脱了回调地狱</p>
<p>市面上也有成熟基于 koa2 的企业级解决方案，如 eggjs 和 thinkjs</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>揭开 koa 的神秘面纱，让开发者关注业务逻辑同时也关注下框架本身，有利于问题排查和编写扩展，与此同时可以学习 express、hapi 等同类型框架的思想，结合现有企业级解决方案，选一款适合你的框架，总之框架不论好坏，只论场景</p>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>koa</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Nuxt 开发部署一个 v2ex</title>
    <url>/2017/06/19/n2ex/</url>
    <content><![CDATA[<p><img src="/uploads/n2ex1.png" alt=""></p>
<a id="more"></a>

<p>先放出Github地址：<a href="https://github.com/OrangeXC/n2ex" target="_blank" rel="noopener">https://github.com/OrangeXC/n2ex</a></p>
<p>里面有线上网站的链接，因为链接随时可能变，在这里不直接给网站链接。</p>
<p>之前写过一篇 nuxt 入门级的文章 <a href="http://orangexc.xyz/2016/12/27/Vue-nuxt-based-ssr/">Vue 基于 NUXT 的 SSR</a>，主要说一下 nuxt 是什么，以及为什么使用。</p>
<p>这里声明一下，不建议去阅读上一篇文章，因为当时写博文的时候是 0.8.0 版本，目前是 1.0.0alpha4，已经有一部分改动，建议去看最新的<a href="https://nuxtjs.org/" target="_blank" rel="noopener">nuxt文档</a></p>
<p>了解 nuxt 后，就可以轻松的看下文了，简单易懂，也没写什么复杂的项目。</p>
<p>本着自己学习的目的分享给大家，因为上篇文章之后有好多读者问 orange，怎么开发，怎么部署到服务器。</p>
<p>下面进入正题</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>nuxt 相关的脚手架已经集成到了 vue-cli，同时提供 starter、express、koa、adonuxt</p>
<p>这里我们用的是 koa2（脚手架会询问使用 koa1 或 koa2）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init nuxt/koa &lt;project-name&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt; <span class="comment"># move to your project</span></span><br><span class="line">npm install <span class="comment"># or yarn install*[see note below]</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此时监听 3000 端口，如果有 bug，别犹豫，先升级 node 版本到最新。</p>
</blockquote>
<p>项目跑起来之后，有一个简单的轮廓，两个页面，index 和 about。</p>
<h2 id="v2ex-API"><a href="#v2ex-API" class="headerlink" title="v2ex API"></a>v2ex API</h2><p>写一个三方 API 项目时，首先要看看人家都支持什么 API，才能决定我们如何展示页面。</p>
<p>来看看<a href="https://www.v2ex.com/p/7v9TEc53" target="_blank" rel="noopener">官方 API 文档</a></p>
<p>这个文档说来仔细，但是仅仅提供了 4 个 API，对于我们来说远远不够，那本站的 API 从哪里来的呢</p>
<p>Github 的确是个好网站，我找到了这个项目下的一个文件：<a href="https://github.com/ochapman/v2ex/blob/master/v2ex.go" target="_blank" rel="noopener">https://github.com/ochapman/v2ex/blob/master/v2ex.go</a></p>
<p>不会 go 语言的没关系，我也不熟悉 go 语言，读一读会发现给出了比官方文档更多的 API，当然还有更详细的 API 暂且不谈。</p>
<p>本项目取的就是这个文件里（隐藏）的 API</p>
<ul>
<li>热门话题</li>
<li>最新话题</li>
<li>节点列表</li>
<li>节点信息</li>
<li>话题详情</li>
<li>话题评论</li>
<li>用户详情</li>
<li>用户话题</li>
</ul>
<p>我们也就实现了上面列表这么多接口的前端展示</p>
<h2 id="路由结构"><a href="#路由结构" class="headerlink" title="路由结构"></a>路由结构</h2><p>nuxt 的特点之一就是以目录结构划分路由。</p>
<p>router 由 pages 目录决定，那么分析接口可以得到以下目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pages</span><br><span class="line">  |</span><br><span class="line">  |-- member</span><br><span class="line">  |    |</span><br><span class="line">  |    |-- _name.vue</span><br><span class="line">  |</span><br><span class="line">  |-- node</span><br><span class="line">  |    |</span><br><span class="line">  |    |-- _name.vue</span><br><span class="line">  |</span><br><span class="line">  |-- topic</span><br><span class="line">  |   |</span><br><span class="line">  |   |-- _id.vue</span><br><span class="line">  |</span><br><span class="line">  |-- index.vue</span><br><span class="line">  |</span><br><span class="line">  |-- new.vue</span><br></pre></td></tr></table></figure>

<p>很清晰的可以看出我们的路由结构，细心的会发现 params 有的是 name 有的是 id，为什么？</p>
<blockquote>
<p>这里详细解释下，v2ex 接口提供了 id 和 name 两种 url 传参形式，任何一种查询都可以匹配结果，唯独 topic 只能 id 查询，因为 name 不唯一，那用户和节点也提供了 id 查询啊，这里的坑就在评论的 <code>@</code> 部分，当 @ 一个人时，在评论可以直接链到个人详情页，v2ex 在评论里默认解析的就是 username 对应的链接，所以为了统一，其它地方也用的 name，另外无形当中提供了 search，在对应 url 后面替换成要查找的节点或用户名就可以直接跳转过去。</p>
</blockquote>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>这里只说两个最应该抽离的业务组件</p>
<ul>
<li>话题 list</li>
<li>评论 list</li>
</ul>
<p>话题 list 几乎每个列表页面里都有，而评论 list 在每个详情页里都有</p>
<p>基础组件用的是 <a href="https://github.com/museui/muse-ui" target="_blank" rel="noopener">muse-ui</a>，比较喜欢 Material 整体的设计风格，刚好在 muse-ui 的 2.0.3 版本支持了 SSR。</p>
<p>下面说下引入三方库相关的问题</p>
<h2 id="引入三方库"><a href="#引入三方库" class="headerlink" title="引入三方库"></a>引入三方库</h2><p>muse-ui 建议使用 plugins 的方式引入，因为涉及到 Vue.use 挂载方法</p>
<p>在 plugins 下新建 muse-ui.js 如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> MuseUI <span class="keyword">from</span> <span class="string">'muse-ui'</span></span><br><span class="line"></span><br><span class="line">Vue.use(MuseUI)</span><br></pre></td></tr></table></figure>

<p>然后在 nuxt.config.js 里面加上</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  &#123; <span class="attr">src</span>: <span class="string">'~plugins/muse-ui.js'</span>, <span class="attr">ssr</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>另外值得注意的是，需要全局引入 google 字体库，这里我直接插入到了 head 的 link 标签里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">link: [</span><br><span class="line">  &#123; <span class="attr">rel</span>: <span class="string">'stylesheet'</span>, <span class="attr">href</span>: <span class="string">'https://fonts.googleapis.com/css?family=Roboto:300,400,500,700,400italic'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">rel</span>: <span class="string">'stylesheet'</span>, <span class="attr">href</span>: <span class="string">'https://fonts.googleapis.com/icon?family=Material+Icons'</span> &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>http 请求用的是前后端同构的 axios 库</p>
<p>打包的时候注意要在配置文件加进去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">  vendor: [<span class="string">'axios'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="异步请求"><a href="#异步请求" class="headerlink" title="异步请求"></a>异步请求</h2><p>nuxt 提供了 asyncData，可以在页面加载之前请求数据。</p>
<p>在这里使用 es7 的 async/await 来实现数据请求</p>
<p>例如：pages/index.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> asyncData () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data &#125; = <span class="keyword">await</span> axios.get(<span class="string">`https://proxy-uuptfgaypk.now.sh/topics/hot.json`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      hotList: data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可读性还是挺高的，请求回来的 object，取到里面的 data 赋值给 hotList，省去了 <code>.then</code> 的操作</p>
<p>在详情页需要同时得到话题详细内容和评论，走的是两个接口</p>
<p>那么问题来了，怎么才能同时请求多个资源，当多个资源全部请求完成时才返回。</p>
<p>await 只能顺次请求，promis + await ？？？</p>
<p>不不不，只要 promis 的 all 方法就可以了，axios 有相应的封装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">asyncData (&#123; params, error &#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> axios.all([</span><br><span class="line">    axios.get(<span class="string">`https://proxy-uuptfgaypk.now.sh/topics/show.json?id=<span class="subst">$&#123;params.id&#125;</span>`</span>),</span><br><span class="line">    axios.get(<span class="string">`https://proxy-uuptfgaypk.now.sh/replies/show.json?topic_id=<span class="subst">$&#123;params.id&#125;</span>`</span>)</span><br><span class="line">  ])</span><br><span class="line">  .then(axios.spread(<span class="function"><span class="keyword">function</span> (<span class="params">detail, comments</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      detail: detail.data[<span class="number">0</span>],</span><br><span class="line">      comments: comments.data</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;))</span><br><span class="line">  .catch(<span class="function"><span class="params">error</span> =&gt;</span> <span class="built_in">console</span>.log(error))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来解决了同时请求多个接口的问题。</p>
<h2 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h2><p>跨域 http 请求，在这里不详细解释，给大家 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">MDN 链接</a></p>
<p>细心的小伙伴发现上文代码的 url 是 <code>http://proxy...</code>，为什么不是官方给的 <code>https://www.v2ex.com/api</code></p>
<p>那是因为跨域请求时浏览器限制请求跨域资源，正常走官方的请求会报错，信息如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">XMLHttpRequest cannot load https:&#x2F;&#x2F;www.v2ex.com&#x2F;api&#x2F;topics&#x2F;latest.json. No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource. Origin &#39;localhost:3000&#39; is therefore not allowed access.</span><br></pre></td></tr></table></figure>

<p>报错很明显没有 <code>Access-Control-Allow-Origin</code> 返回头，打开控制台发现有数据返回，但是被浏览器拦截了，并没有加载到页面中去</p>
<p>初次玩服务端渲染的还会遇到的问题就是我什么首屏刷新不会报错，而路由跳转的请求会报错呢？</p>
<blockquote>
<p>这要从服务端渲染机制说起，首屏的请求是在服务端完成，服务端不存在跨域问题，而接下来的交互操作和页面跳转是在浏览器端进行，所以产生了类似的问题。够简单直接吧，不相信的可以自己打 console，看是在终端控制台输出还是浏览器控制台输出。</p>
</blockquote>
<p>找到了问题接下来就需要解决问题，上面有说在服务端不存在跨域请求的问题。</p>
<p>那么我们就自己写一层 proxy 就好啦，写一个 node 服务，转发请求，然后在返回头里加上，<code>Access-Control-Allow-Origin: *</code></p>
<p>这个服务实际上不到十行的代码，用到两个依赖，express 和 request</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="string">'https://www.v2ex.com/api'</span> + req.url</span><br><span class="line">  req.pipe(request(url)).pipe(res.set(<span class="string">'Access-Control-Allow-Origin'</span>, <span class="string">'*'</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(process.env.PORT || <span class="number">3001</span>)</span><br></pre></td></tr></table></figure>

<p>开发环境下先启动代理服务，然后将 url 指向本地服务就可以了</p>
<p>上面的方法呢，说实话有点蠢，实际项目当中呢可以直接让后端返回的接口支持跨域，当然了任何人都可以使用你们的 API，不是十分合理</p>
<p>再有就是 nuxt 官方有个 modules 组件库不知道大家有没有注意，地址：<a href="https://github.com/nuxt/modules" target="_blank" rel="noopener">https://github.com/nuxt/modules</a></p>
<p>里面其中有 axios 和 proxy 的封装，意在解决 axios 的 baseUrl 和 proxy 跨域限制，安装配置都十分方便，本次为什么没用？</p>
<p>好问题，因为存在未知的坑，代码没有丝毫报错，就是不生效，只能静等 nuxt 官方修复主库与插件之间的 bug。</p>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>怎么部署是大家最关心的问题，项目倒是好写，只要你会 vue 看看文档就可以写。</p>
<p>部署实际上官方提供了两个命令，打包和运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run build</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>这里需要一个安装了 node 的服务器，可以安装一个 <a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">pm2</a> 来跑 node 服务</p>
<p>当然喜欢 docker，也可以用 docker 去部署</p>
<p>之前又有人问了，看了这两个东西，依旧不会部署，那我也无能为力了，只能说，科学上网，教程一大堆。</p>
<p>如果就是想跑一个自己的 DEMO 玩玩，不想单独买服务器，也不涉及到企业项目部署和安全问题</p>
<p>那么好！给两个可以免费跑 node 服务的供应商 heroku 和 now.sh</p>
<p>nuxt 项目怎么如何跑在这两个服务上官网有写 <a href="https://zh.nuxtjs.org/faq/heroku-deployment" target="_blank" rel="noopener">https://zh.nuxtjs.org/faq/heroku-deployment</a></p>
<p>本项目是跑在 now.sh 上的，这也就解释了为什么说这个在线链接打开速度超级慢，因为我们用的是三方的免费服务，为了提高服务器资源的利用率，减小服务器压力，当一段时间没人访问网站时，会自动把网站设置为 frozen</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The deployment n2ex-yrgirchtae.now.sh was frozen</span><br><span class="line">The deployment proxy-uuptfgaypk.now.sh was frozen</span><br><span class="line">The deployment n2ex-nzkjwvytxe.now.sh was unfrozen</span><br></pre></td></tr></table></figure>

<p>这是我控制台的最新报告，当有人访问时会切换到 unfrozen，算了下默认 frozen 时间是 15min 内无访问后。</p>
<p>不知道 heroku 是不是也有类似问题</p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>这个项目会持续更新，逐步加新的功能，大家感兴趣的可以提 issue，或者直接提 pr 给我。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从项目分析到开发部署上线，一个 nuxt 项目就这样完成了，开发遇到的坑也随着项目递进渗透进去了，项目十分简单，没使用 vuex，写到这里，依旧不推荐大家深入使用，但是十分推荐玩一玩，抛开了 SSR 复杂的那一面，用着还是挺爽的。</p>
]]></content>
      <tags>
        <tag>SSR</tag>
        <tag>Vue</tag>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>React 服务端渲染实现 Gank 移动端</title>
    <url>/2017/11/14/nextjs-gank-mobile/</url>
    <content><![CDATA[<p><img src="/uploads/nextjs-gank-mobile1.jpg" alt=""></p>
<p>Github: <a href="https://github.com/OrangeXC/gank" target="_blank" rel="noopener">https://github.com/OrangeXC/gank</a></p>
<p>请使用手机或开发者工具手机模拟器打开</p>
<a id="more"></a>

<p>接上一篇内容：<a href="https://orangexc.xyz/2017/10/19/Nextjs-gank/">React 服务端渲染框架 Next.js 基于 Gank api 实战</a></p>
<p>在上一篇结尾说到要实现移动端，不单单是响应式布局，而是采用移动端组件库进行开发。</p>
<p>本文重点介绍如何在一个项目里面实现两类端的服务端渲染。</p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ol>
<li>明确的 router 分割规格</li>
<li>判断设备跳转对应端的 router</li>
<li>两套 UI 组件库</li>
</ol>
<p>根据三个前提条件逐一给出解决方案。下面首先说下路由分割。</p>
<h3 id="路由分割"><a href="#路由分割" class="headerlink" title="路由分割"></a>路由分割</h3><p>路由分割规则大致上分为两种：</p>
<ul>
<li>子域名形式<code>（m.xxx.xxx）</code></li>
<li>相同域名形式<code>（xxx.xxx/m）</code></li>
</ul>
<p>这里强调是一个项目没必要部署到两个域名下，故排除子域名的形式。</p>
<p>作为区分移动端在所有的域名前加了 <code>/m</code>，进而实现 page 级别的组件区分</p>
<p>映射到 next.js 里面就是在 <code>pages</code> 目录下新增一个名为 <code>m</code> 的文件夹，里面的每个文件都对应着移动端的路由</p>
<p>例如：<code>xxx.com/fe</code> 移动端对应着 <code>xxx.com/m/fe</code></p>
<h3 id="判断设备跳转路由"><a href="#判断设备跳转路由" class="headerlink" title="判断设备跳转路由"></a>判断设备跳转路由</h3><p>这里直接上代码比口述来的痛快</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="regexp">/Mobile/i</span>.test(ua) &amp;&amp; pathname.indexOf(<span class="string">'/m'</span>) === <span class="number">-1</span>) &#123;</span><br><span class="line">  app.render(req, res, <span class="string">`/m<span class="subst">$&#123;pathname&#125;</span>`</span>, query)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="regexp">/Mobile/i</span>.test(ua) &amp;&amp; pathname.indexOf(<span class="string">'/m'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">  app.render(req, res, pathname.slice(<span class="number">2</span>), query)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  handle(req, res, parsedUrl)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逻辑十分简单，疑问点是此段代码应该放在什么地方，next.js 既然是服务端渲染，判断理应在服务端进行。</p>
<p>next.js 允许我们自定义入口 server.js 文件，启动时直接运行 <code>node server.js</code> 命令。</p>
<p>在这个 server 里面进行中间件的挂载，以及服务端层面的路由控制，具体的实现官网和本项目都可查看。</p>
<h3 id="两套-UI-组件库"><a href="#两套-UI-组件库" class="headerlink" title="两套 UI 组件库"></a>两套 UI 组件库</h3><p>对于个人或者小项目没那么大精力开发组件库，也没有精力设计样式。</p>
<p>前面的 pc 端用的是 antd，这里为了保持风格一致使用了 antd-mobile</p>
<p>当然引入 antd-mobile 时 iocn 是个问题，想使用自定义的 icon 需要自己配置 webpack</p>
<p>新建 <code>next.config.js</code>，重要代码如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.module.rules.push(</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(svg)$/i</span>,</span><br><span class="line">    loader: <span class="string">'emit-file-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      name: <span class="string">'dist/[path][name].[ext]'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    include: [</span><br><span class="line">      moduleDir(<span class="string">'antd-mobile'</span>),</span><br><span class="line">      __dirname</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    test: <span class="regexp">/\.(svg)$/i</span>,</span><br><span class="line">    loader: <span class="string">'svg-sprite-loader'</span>,</span><br><span class="line">    include: [</span><br><span class="line">      moduleDir(<span class="string">'antd-mobile'</span>),</span><br><span class="line">      __dirname</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这里重点说下 <code>svg-sprite-loader</code> 这个库的坑，版本最好控制在 <code>0.3.x</code>，如果升级到最新版会有意外的 bug 惊喜等着你</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>前提环境搞定了剩下的就是动手开干了。</p>
<p>这里不逐一展开解释，可以看前面 pc 的文章，解释的够详细，这里单说下实现时可能遇到的问题</p>
<h3 id="问题-1-自定义图标"><a href="#问题-1-自定义图标" class="headerlink" title="问题 1 - 自定义图标"></a>问题 1 - 自定义图标</h3><p>上面介绍了自定义图标的配置，在组件里面具体怎么实现呢，首先要写一个渲染函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> CustomIcon = <span class="function">(<span class="params">&#123; type, className = <span class="string">''</span>, size = <span class="string">'md'</span>, ...restProps &#125;</span>) =&gt;</span> (</span><br><span class="line">  &lt;svg</span><br><span class="line">    className=&#123;<span class="string">`am-icon am-icon-<span class="subst">$&#123;type.substr(<span class="number">1</span>)&#125;</span> am-icon-<span class="subst">$&#123;size&#125;</span> <span class="subst">$&#123;className&#125;</span>`</span>&#125;</span><br><span class="line">    &#123;...restProps&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;use xlinkHref=&#123;type&#125; /&gt; &#123;<span class="comment">/* svg-sprite-loader@0.3.x */</span>&#125;</span><br><span class="line">    &#123;<span class="comment">/* &lt;use xlinkHref=&#123;#$&#123;type.default.id&#125;&#125; /&gt; */</span>&#125; &#123;<span class="comment">/* svg-sprite-loader@lastest */</span>&#125;</span><br><span class="line">  &lt;<span class="regexp">/svg&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br></pre></td></tr></table></figure>

<p>代码里面注释掉的有 <code>svg-sprite-loader@lastest</code> 版本的写法，亲测无效，也不建议尝试。</p>
<p>在 render 里面就可以这样调用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">CustomIcon</span> <span class="attr">type</span>=<span class="string">&#123;require(</span>'<span class="attr">..</span>/<span class="attr">..</span>/<span class="attr">static</span>/<span class="attr">icon</span>/<span class="attr">github.svg</span>')&#125; /&gt;</span></span><br></pre></td></tr></table></figure>

<p>到这里可以展示任意自定义 icon 了。</p>
<h3 id="问题-2-长列表"><a href="#问题-2-长列表" class="headerlink" title="问题 2 - 长列表"></a>问题 2 - 长列表</h3><p>众所周知移动端的长列表性能堪忧，如果采用前文每次 load more 时，直接把请求回来的数据 <code>concat</code> 或 <code>push</code> 到列表尾部，后果就是页面逐渐变卡，知道你滑不动列表，甚至网页卡死。</p>
<p>庆幸 antd-mobile 为我们提供了 <code>ListView</code> 组件，让我们轻松实现长列表渲染</p>
<p>那么问题来了，antd-mobile 官网为我们提供的例子都是完全基于客户端的实现，在预渲染阶段，我们需要渲染首屏数据，而不是在页面加载完成后在 <code>componentDidMount</code> 钩子里初始化首屏数据。</p>
<p>为了使页面更快速的渲染首屏列表内容，首次请求需要在服务端获取数据后立即初始化 <code>ListView</code> 组件。</p>
<p>本项目的做法是，在 page 组件中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">async</span> getInitialProps (&#123; req &#125;) &#123;</span><br><span class="line">  <span class="keyword">const</span> language = req ? req.headers[<span class="string">'accept-language'</span>] : navigator.language</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">'https://gank.io/api/data/all/20/1'</span>)</span><br><span class="line">  <span class="keyword">const</span> json = <span class="keyword">await</span> res.json()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">list</span>: json.results, language &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后进一步封装 <code>ListView</code> 组件成一个公用组件，每个页面都可调用</p>
<p>关键代码是在构造器里面初始化 <code>ListView</code> 数据源实例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">constructor</span> (props) &#123;</span><br><span class="line">  <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> dataSource = <span class="keyword">new</span> ListView.DataSource(&#123;</span><br><span class="line">    rowHasChanged: <span class="function">(<span class="params">row1, row2</span>) =&gt;</span> row1 !== row2,</span><br><span class="line">  &#125;).cloneWithRows(props.initList)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.state = &#123;</span><br><span class="line">    rData: [],</span><br><span class="line">    dataSource,</span><br><span class="line">    isLoading: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在加载更多的时候进行数据的拼接。</p>
<p>注意的是判断下当前页数把 props 里面传进来的初始化数据拼接进去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123; <span class="attr">isLoading</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(<span class="function">(<span class="params">prevState</span>) =&gt;</span> (&#123;</span><br><span class="line">  rData: pIndex === <span class="number">2</span></span><br><span class="line">    ? <span class="keyword">this</span>.props.initList.concat(prevState.rData).concat(json.results)</span><br><span class="line">    : prevState.rData.concat(json.results)</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<p>在请求完成后不要忘记刷新 <code>dataSource</code>，使得 <code>ListView</code> 可以相应数据变化</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  dataSource: <span class="keyword">this</span>.state.dataSource.cloneWithRows(<span class="keyword">this</span>.state.rData),</span><br><span class="line">  isLoading: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>到这为止，整个列表请求就实现了</p>
<p>至于展示上的配置项还是蛮多的，官网写的十分详细，配置的优劣也会影响性能。</p>
<h3 id="问题-3-MenuBar-高度问题"><a href="#问题-3-MenuBar-高度问题" class="headerlink" title="问题 3 - MenuBar 高度问题"></a>问题 3 - MenuBar 高度问题</h3><p>由于我们需要全屏高度的展示效果，NavBar 与 Menubar 分别吸附在上下，不随内容滚动。</p>
<p>尴尬的点是 NavBar 被包在 Menubar 中，而 Menubar 使用了 transform，如果内容区长度超过屏幕高度，会导致 NavBar 的 <code>position: fixed</code> 失效，NavBar 会随着内容区域一同滚动上去。</p>
<p>尝试了几个解决办法，就算解决了这个问题，还存在 iphone safari 上的滑动导致的视窗高度拉长，进而影响定位不准确的问题。</p>
<p>这里直接摒弃 body 层面的滚动，所有的滚动区域通过 <code>屏幕高度 - NavBar - Menubar底部 - 其它垂直占位空间</code> 计算得出。</p>
<p>既保证了滚动区域的高度恰好填充剩余垂直空间，又保证了 Safari 不触发视窗的高度拉长</p>
<p>因为高度需要计算获得，本项目里面初始化给的是 <code>height: 100vh</code>（iphone safari 会把下面的菜单栏算到 <code>100vh</code> 里面，导致 MenuBar 定位不准确）</p>
<p>页面加载后计算一次屏高 <code>document.documentElement.clientHeight</code> 改变屏幕整体展示高度，滚动区域高度也可计算获得。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>由于本文是基于前一篇写的，踩坑的点数明显减少，行文的目的也是希望看到本文的人遇到相同问题时可以少踩坑，多一个解决问题的思路。</p>
]]></content>
      <tags>
        <tag>SSR</tag>
        <tag>Next</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>React 服务端渲染框架 Next.js 基于 Gank api 实战</title>
    <url>/2017/10/19/nextjs-gank/</url>
    <content><![CDATA[<p><img src="/uploads/nextjs-gank1.png" alt=""></p>
<a id="more"></a>

<p>最开始先摆出地址，有在线 demo：<a href="https://github.com/OrangeXC/gank" target="_blank" rel="noopener">https://github.com/OrangeXC/gank</a></p>
<p>鉴于最近 vue 相关的文章写的比较多，抽出时间写点 react 的项目，当时用 react 还是 v15 现在都 v16 了，感慨跟不上所有框架的节奏（玩笑话），框架的本质都是大同小异的，每次高 star 框架更新看一下 change 是个好习惯。</p>
<p>之前用 Nuxt 写了个简单的 v2ex，今天的主角依然是 SSR 服务端渲染</p>
<p>Nuxt 文档里有写到灵感源于 Next.js，那么就是说 Next.js 算是 SSR 框架中的元老级别的了。</p>
<h2 id="为什么选择-SSR-框架"><a href="#为什么选择-SSR-框架" class="headerlink" title="为什么选择 SSR 框架"></a>为什么选择 SSR 框架</h2><p>前面的文章总是在官方文档上小费功夫说明下，这里对于不熟悉 Next.js 的读者建议直接转到 Github，别犹豫，当然熟悉 Nuxt 也可以无障碍阅读本文</p>
<p>不论是 Next.js 或 Nuxt，服务端渲染框架主要两个重要功能</p>
<ul>
<li>首屏 node.js 服务端渲染</li>
<li>生成纯静态的 web 站</li>
</ul>
<p>至于它们是基于哪个前端库封装的，还要看库本身是否支持 SSR，然后就是对外提供 render 函数。</p>
<p>用此类库的原因也不必多说，节省开发成本，不再纠结于环境搭建以及渲染细节。</p>
<h2 id="直接开工"><a href="#直接开工" class="headerlink" title="直接开工"></a>直接开工</h2><p>本次要实现的是基于 <a href="http://gank.io/api" target="_blank" rel="noopener">gank api</a> 的项目，还是看人家支持什么 api，点前面链接查看详细 api</p>
<p>大体总结为 =&gt; 列表，搜索，提叫到审核</p>
<p>列表分为了许多类型，主要的 menu 也是针对不同类型的列表展开</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>通过已知的 api 可以轻松的定义路由</p>
<ul>
<li>/ （主页，最近的全部类型干货列表）</li>
<li>/fe （前端干货列表）</li>
<li>/android (安卓干货列表)</li>
<li>/ios (iOS干货列表)</li>
<li>/app (App干货列表)</li>
<li>/expand (拓展资源干货列表)</li>
<li>/videos (休息视频干货列表)</li>
<li>/welfare (福利列表，前方高能，全是干货。。。)</li>
<li>/timelien (时间轴，记录历史所有更新过干货的日期)</li>
<li>/day (某天详情，分为以上几种类型的 tab 列表)</li>
<li>/uplaod (发送干货到审核)</li>
<li>/search (搜索页)</li>
</ul>
<p>同 Nuxt 路由配置文件不需要手动创建，/pages 下默认会渲染为页面，文件名自然就是路由名</p>
<p>路由文件都创建完了，下一步思考如抽离出公共模板 Layout 代码，Next.js 提供了 <a href="https://github.com/zeit/next.js/tree/master/examples/layout-component" target="_blank" rel="noopener">layout-component example</a></p>
<p>我们可以在里面定义 Head,Header,Footer，当然要留出一个内容区域的插槽 <code>{ children }</code></p>
<p>引用于 example 的 layout.js 代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Link <span class="keyword">from</span> <span class="string">'next/link'</span></span><br><span class="line"><span class="keyword">import</span> Head <span class="keyword">from</span> <span class="string">'next/head'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; children, title = <span class="string">'This is the default title'</span> &#125;) =&gt; (</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;Head&gt;</span><br><span class="line">      &lt;title&gt;&#123; title &#125;&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">      &lt;meta charSet='utf-8' /</span>&gt;</span><br><span class="line">      &lt;meta name=<span class="string">'viewport'</span> content=<span class="string">'initial-scale=1.0, width=device-width'</span> /&gt;</span><br><span class="line">    &lt;<span class="regexp">/Head&gt;</span></span><br><span class="line"><span class="regexp">    &lt;header&gt;</span></span><br><span class="line"><span class="regexp">      &lt;nav&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Link href='/</span><span class="string">'&gt;&lt;a&gt;Home&lt;/a&gt;&lt;/Link&gt; |</span></span><br><span class="line"><span class="string">        &lt;Link href='</span>/about<span class="string">'&gt;&lt;a&gt;About&lt;/a&gt;&lt;/Link&gt; |</span></span><br><span class="line"><span class="string">        &lt;Link href='</span>/contact<span class="string">'&gt;&lt;a&gt;Contact&lt;/a&gt;&lt;/Link&gt;</span></span><br><span class="line"><span class="string">      &lt;/nav&gt;</span></span><br><span class="line"><span class="string">    &lt;/header&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#123; children &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &lt;footer&gt;</span></span><br><span class="line"><span class="string">      &#123;'</span>I<span class="string">`m here to stay'&#125;</span></span><br><span class="line"><span class="string">    &lt;/footer&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>因为本次使用的是 antd 做 ui，固实现动态的导航展示上要注意些小问题，我们需要根据 path 动态的给 menu 激活状态。</p>
<p>两个解决方案：</p>
<p>1.在 pages 里面的每一个路由页面里获取 pathname，初始化方法 <code>getInitialProps</code> 里可以拿到 pathname，全部列表如下</p>
<ul>
<li>pathname - path section of URL</li>
<li>query - query string section of URL parsed as an object</li>
<li>asPath - String of the actual path (including the query) shows in the browser</li>
<li>req - HTTP request object (server only)</li>
<li>res - HTTP response object (server only)</li>
<li>jsonPageRes - Fetch Response object (client only)</li>
<li>err - Error object if any error is encountered during the rendering</li>
</ul>
<p>调用方法也简单</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">async</span> getInitialProps(&#123; pathname &#125;) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; pathname &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样一来可以通过传参到 layout 组件的方式 <code>&lt;Layout pathname={this.props.pathname}&gt;&lt;/Layout&gt;</code></p>
<p>在 Layout 里面改变 Meun 的 active</p>
<p>2.写一个 ActiveLink 组件，再封装一层原有的 Menu</p>
<p>在选择方案前还是要看官方有没有 example，于是找到了 <a href="https://github.com/zeit/next.js/tree/master/examples/using-with-router" target="_blank" rel="noopener">using-with-router</a></p>
<p>引用于 example 的 ActiveLink.js 代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; withRouter &#125; <span class="keyword">from</span> <span class="string">'next/router'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// typically you want to use `next/link` for this usecase</span></span><br><span class="line"><span class="comment">// but this example shows how you can also access the router</span></span><br><span class="line"><span class="comment">// using the withRouter utility.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ActiveLink = <span class="function">(<span class="params">&#123; children, router, href &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> style = &#123;</span><br><span class="line">    marginRight: <span class="number">10</span>,</span><br><span class="line">    color: router.pathname === href ? <span class="string">'red'</span> : <span class="string">'black'</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault()</span><br><span class="line">    router.push(href)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;a href=&#123;href&#125; onClick=&#123;handleClick&#125; style=&#123;style&#125;&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default withRouter(ActiveLink)</span></span><br></pre></td></tr></table></figure>

<p>简单易懂，在 withRouter 方法里可以取到 router 实例，这样可以取到 pathname，query 等等。</p>
<p>这里只需要稍稍修改下 style，变成 antd 的 className，如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> ActiveLink = <span class="function">(<span class="params">&#123; children, router, href &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> active = router.pathname === href</span><br><span class="line">  <span class="keyword">const</span> className = active ? <span class="string">'ant-menu-item-selected ant-menu-item'</span> : <span class="string">'ant-menu-item'</span></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;li href=<span class="string">'#'</span> onClick=&#123;onClickHandler(href)&#125; className=&#123;className&#125; role=<span class="string">"menuitem"</span> aria-selected=<span class="string">"false"</span>&gt;</span><br><span class="line">      &#123;children&#125;</span><br><span class="line">    &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在 Layout 组件的 Menu 里直接使用 ActiveLink 组件即可，到这为止解决了全部路由相关问题和 Layout 组件问题</p>
<h2 id="数据流"><a href="#数据流" class="headerlink" title="数据流"></a>数据流</h2><p>解决了路由问题下一步就是每个页面的 content 的数据填充</p>
<p>我们依旧是在 <code>getInitialProps</code> 里面获取数据，相当于 prefatch 方法，服务端渲染会提前执行这个方法获取数据渲染到模板</p>
<p>这里涉及到一个 node 和 Browserify 同构的 fetch 库 <a href="https://github.com/matthew-andrews/isomorphic-fetch" target="_blank" rel="noopener">isomorphic-fetch</a>，cli 工具应该会自带这个库，没有的话提前安装下。</p>
<p>到这里就不用担心 fetch api 在服务端的问题了，这里获取的列表数据走的接口基本一致 <code>https://gank.io/api/data/{type}/{perPage}/{page}</code></p>
<p>三个变量 type-类型、perPage-每页数量、page-页数</p>
<p>接下来可以把 List 和 ListItem 抽象出来，成为共用的组件，每个页面都可以调用，这里不详细展开说明，简单的使用 antd 的 Card 组件，没有特殊功能。</p>
<p>每个页面的请求数据部分也基本一致，将数据存到 props 里，传入 List 组件中去</p>
<p>形成了简单的单向数据流动</p>
<p>列表页面</p>
<p>page组件(fetch data) -&gt; List组件(继承自 Layout) -&gt; ListItem组件</p>
<p>时间轴页面</p>
<p>page组件(fetch data) -&gt; Timeline组件(继承自 Layout)</p>
<p>提交干货页面</p>
<p>page组件 -&gt; Form组件(继承自 Layout) -&gt; post请求(发送formData)</p>
<p>搜索页面</p>
<p>page组件 -&gt; Input组件+空ListItem组件(继承自 Layout) -&gt; get请求(获取关键词对应query的列表数据) -&gt; ListItem组件</p>
<h2 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h2><p>既然前面说清楚了数据流都十分简单，那么为什么要引入全局状态管理徒增烦恼呢？</p>
<p>有一点无奈的地方是 <code>getInitialProps</code> 本身 return 的就是 props，在 react 里面 props 是单向的，只能向下传递，且不能修改</p>
<p>这里我们要分页功能，但是首屏数据是 props 的，我们换页之后没办法更新 props 的值，也就是没办法再次执行 <code>getInitialProps</code></p>
<p>最简单粗暴的方式就是放弃 spa 的动态切换数据，我们每次 <code>Router.push({some page}/{per page}/{current page})</code>，一朝回到解放前的 MVC 版路由切换。</p>
<p>能不能解决问题，答案是能解决问题，那么既然是分页组件，人家 antd 也提供了 Pagination 组件，问题一个接着一个，人家返回的列表并没有告诉你 totalCount，没有 totalCount 就没办法知道有多少页。。。</p>
<p>好尴尬的问题，这个分页没法做，怒脸<del>~</del></p>
<p>也不是没办法做，这个问题变向思考下可以做 loadMore，没错加载更多，当加载到最后一页（即的列表长度小于 perPage）或是此页恰巧等于 perPage 但下一页为空数组时，我们给一个提示，没有更多内容了。</p>
<p>涉及到向 props 的 list 里 <code>concat</code> 数组，我们不得不引入全局状态来解决这个问题，不论是 redux 还是 mobx 都可以解决问题，需要注意的是，next.js 中的用法和普通 spa 的 react 应用有所差别。</p>
<p>还是去找 example，<a href="https://github.com/zeit/next.js/tree/master/examples/with-mobx" target="_blank" rel="noopener">with mobx</a></p>
<p>引用于 example 的 store.js 代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initStore</span> (<span class="params">isServer, lastUpdate = Date.now(</span>)) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (isServer) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Store(isServer, lastUpdate)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (store === <span class="literal">null</span>) &#123;</span><br><span class="line">      store = <span class="keyword">new</span> Store(isServer, lastUpdate)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> store</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码太简单，没必要解释了，总之我们在初始化页面时调用 initStore 就好了，isServer 通过 <code>getInitialProps</code> 的 req 参数 <code>!!req</code> 判断</p>
<p>然后在 loadMore 时出发一个 action</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">@action loadMoreList = <span class="function">(<span class="params">more</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.list = <span class="keyword">this</span>.list.concat(more)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>到这加载更多的功能也就实现了，不足的一点是 List 组件里的 <code>handleScroll</code> 方法写的有点简陋，虽说能用，但存在问题，如多次触发、未写兼容代码（后续会改进），放出代码供大家一笑</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleScroll () &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.documentElement.offsetHeight + <span class="built_in">document</span>.documentElement.scrollTop &gt; <span class="built_in">document</span>.documentElement.scrollHeight - <span class="number">50</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handleLoadMore()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其它代码感兴趣可以直接取仓库看，没有阅读难度。</p>
<h2 id="表单提交"><a href="#表单提交" class="headerlink" title="表单提交"></a>表单提交</h2><p>说到其它页的 fetch list 没什么可将全都是 get 请求，fetch 发一个 get 请求十分简单，不用声明请求类型。</p>
<p>fetch 操作 post 也仅仅在于设置 method 为 POST</p>
<p>之所以单独一章说表单提交，因为在提交表单时遇到了一些问题，由于要 fetch 模拟 form 的 post 请求</p>
<p>看了这个 issue：<a href="https://github.com/matthew-andrews/isomorphic-fetch/issues/30" target="_blank" rel="noopener">https://github.com/matthew-andrews/isomorphic-fetch/issues/30</a></p>
<p>开始怀疑人生，试了所有方法 POST，也走的通，但是接口返回的 msg 就是没接收到参数。</p>
<p>想了想还是回归到笨方法一个一个将参数拼接进去，没想到较优雅的方式，给出代码，同时欢迎讨论</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">handleSubmit = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  e.preventDefault()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.props.form.validateFieldsAndScroll(<span class="keyword">async</span> (err, values) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!err) &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">submitLoading</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> strList = []</span><br><span class="line"></span><br><span class="line">      <span class="built_in">Object</span>.keys(values).forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        strList.push(<span class="string">`<span class="subst">$&#123;item&#125;</span>=<span class="subst">$&#123;values[item]&#125;</span>`</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> fetch(<span class="string">"https://gank.io/api/add2gank"</span>, &#123;</span><br><span class="line">        method: <span class="string">"POST"</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        body: strList.join(<span class="string">'&amp;'</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> json = <span class="keyword">await</span> res.json()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (json.error) &#123;</span><br><span class="line">        message.error(json.msg)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        message.success(json.msg)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.setState(&#123; <span class="attr">submitLoading</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>看过网站的读者也发现提交表单页面上方有提示语，让大家文明使用三方 api 提供者 gank 的发表干货接口，把真正的好内容提交上去，想测试接口的请走默认的 debug 模式，这里再次强调下，感谢配合</p>
</blockquote>
<h2 id="微交互"><a href="#微交互" class="headerlink" title="微交互"></a>微交互</h2><p>既然功能差不多了，再微交互上再加把劲，用过 NUXT 的知道 NUXT 内置了 Loading bar，切换路由时在页面顶端会有 loading 条，体验较好。</p>
<p>next.js 并没有内置这个功能，页面看起来会显得十分怪异，点击切换路由没有反应，顿一下再跳转，顿的时候在获取初始化数据。</p>
<p>官方推荐使用 nprogress</p>
<p>关键代码如下，写在了 Layout.js 组件里</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Router.onRouteChangeStart = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Loading: <span class="subst">$&#123;url&#125;</span>`</span>)</span><br><span class="line">  NProgress.start()</span><br><span class="line">&#125;</span><br><span class="line">Router.onRouteChangeComplete = <span class="function"><span class="params">()</span> =&gt;</span> NProgress.done()</span><br><span class="line">Router.onRouteChangeError = <span class="function"><span class="params">()</span> =&gt;</span> NProgress.done()</span><br></pre></td></tr></table></figure>

<p>这样整个网站看起来洋气多了，切换 router 页面顶端有 loading bar，右上角还有 loading icon</p>
<h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>开发 next.js 的组织叫 zeit，在官网他们的得意作品是 <a href="https://zeit.co/now" target="_blank" rel="noopener">now</a>，一个快速部署的工具，同时为免费用户提供三个免费的服务，支持 docker，node 等</p>
<p>看 5 分钟文档就能上手部署 node 项目，比 Heroku 简单的多</p>
<p>这里使用的就是 <a href="https://zeit.co/now" target="_blank" rel="noopener">now</a>，首先安装 <a href="https://github.com/zeit/now-cli" target="_blank" rel="noopener">now-cli</a></p>
<p>在项目根路径下一句命令部署</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">now</span><br></pre></td></tr></table></figure>

<p>线上的路径就不贴出来了，时刻关注 Github 上方的 website 地址，因为每次部署不绑定域名的情况下是 <code>项目名+随机哈希</code> 的域名，绑定域名需要 money。</p>
<p>至于上线就讲这么多，有疑问欢迎交流。</p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>下一步要解决几个问题</p>
<ul>
<li>加载更多时的 bug</li>
<li>支持移动端</li>
<li>福利页面直接展示图片（点击可以全屏大轮播）</li>
<li>美化时间轴样式</li>
</ul>
<p>说到福利页面本想着不加来着，因为个别写 demo 的人专门把福利列表拎出来做成妹子 App，既然是干货集中营，就应该多些技术元素，福利都是次要的。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这为止一个 next.js 版本的 gank（干货集中营）完成了，感慨现在开发工具越来越好用，还是之前的想法把好用的工具分享给大家，给一个完整的例子供学习者参考，不再每次都看各个版本的 Hacker News，而是给国内的学习者一个中文版的例子，同时文中也会将实现的时候遇到的问题。</p>
<p>本人 orange 也是再不断的学习当中，本文也是第一次接触学习 next.js 写的项目，文章或项目有不足之处欢迎指正，感谢阅读！</p>
]]></content>
      <tags>
        <tag>SSR</tag>
        <tag>Next</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 实现热区图</title>
    <url>/2018/08/07/vue-hotzone/</url>
    <content><![CDATA[<p><img src="/uploads/vue-hotzone1.png" alt=""></p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>当今流行的前端框架把组件化开发的模式推进的十分出色，也激发了开发者针对各类框架写组件的热情，因为接口明确，上手也相对容易，一个组件只为了解决一个点或一类问题而生。</p>
<p>先看几个问题，由问题带入本文</p>
<ul>
<li>热区图是什么？</li>
</ul>
<p>直接看demo会更好: <a href="https://orangex_c.coding.me/vue-hotzone/" target="_blank" rel="noopener">https://orangex_c.coding.me/vue-hotzone/</a></p>
<blockquote>
<p>记得在 PC 端打开，移动端为了方便展示截图在下面，简单描述就是上图中选定热区，下图中点击热区位置会执行相应的操作（图中例子是点击热区直接跳转到我的 Github 主页），展示的虚线线框是为了方便查看区域边界，真实场景会是设计师放上去的按钮或点击区域</p>
</blockquote>
<p><img src="/uploads/vue-hotzone2.png" alt=""></p>
<ul>
<li>能解决什么问题？</li>
</ul>
<p>看似画蛇添足的功能，有人会想直接在前端用定位+点击事件就能解决的问题，干嘛要一个管理热区的平台呢，这就是重复性工作和造轮子之间的取舍，如果重复性工作带来的开销远大于造轮子，为何不采取工程化和模块化的方案解决呢！</p>
<blockquote>
<p>热区图解决了前端大量的重复写定位样式和事件绑定，我们更希望设计切一张完整的图片，让他们自己框定热区，不希望切多张图片前端定位拼凑，即节约了开发成本，又提升了网站性能。</p>
</blockquote>
<ul>
<li>使用场景有哪些？</li>
</ul>
<ol>
<li>图片内存在多个点击区域</li>
<li>活动弹出框（带有详情和取消按钮）</li>
</ol>
<h2 id="vue-hotzone"><a href="#vue-hotzone" class="headerlink" title="vue-hotzone"></a>vue-hotzone</h2><p>之前看过几个版本的实现，恰好没有 vue 版的，当然本组件也是借鉴其它框架的组件写的，也是一个重复造轮子但不是第一个造轮子的组件</p>
<p>本组件参考：<a href="https://github.com/Deol/regular-hotzone" target="_blank" rel="noopener">regular-hotzone</a><br>react版本：<a href="https://github.com/beizhedenglong/react-multi-crops" target="_blank" rel="noopener">react-multi-crops</a></p>
<p>这里不聊具体实现细节，细节可以看源码</p>
<p>Github: <a href="https://github.com/OrangeXC/vue-hotzone" target="_blank" rel="noopener">https://github.com/OrangeXC/vue-hotzone</a></p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue-hotzone</span><br><span class="line">├── __tests__ (单元测试)</span><br><span class="line">├── lib (此组件)</span><br><span class="line">├── public (DEMO网站入口)</span><br><span class="line">├── src (DEMO网站)</span><br><span class="line">├── .eslintrc.js (eslint配置)</span><br><span class="line">├── jest.config.js (jest配置)</span><br><span class="line">├── vue.config.js (vue配置)</span><br><span class="line">├── package.json</span><br><span class="line">├── ......</span><br></pre></td></tr></table></figure>

<h3 id="功能划分"><a href="#功能划分" class="headerlink" title="功能划分"></a>功能划分</h3><p>在 <code>regular-hotzone</code> 中强调的是管理和展示共存，通过 props 判断是编辑状态还是展示状态</p>
<p>设计之初并没有实现这种模式，因为客户端vue代码短短几句代码就能实现定位，没必要把整体引入进来浪费首屏时间</p>
<p>本组件采用的设计只针对后台编辑端使用，将数据持久化存储后前端调取数据后可以参考 <code>src</code> 下的例子去做</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>存下来的结构可以是带有自定义字段的本例子存的结构，本例如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">zones: [&#123;</span><br><span class="line">  heightPer: <span class="number">0.4374</span>,</span><br><span class="line">  leftPer: <span class="number">0.1153</span>,</span><br><span class="line">  topPer: <span class="number">0.238</span>,</span><br><span class="line">  widthPer: <span class="number">0.2827</span>,</span><br><span class="line">  url: <span class="string">'https://github.com/OrangeXC'</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure>

<p>这里的基础数据都是 <code>Per</code> 结尾的百分比数值，url 是我们自定义绑定到热区上的属性（根据需要可以绑定更多信息）</p>
<h3 id="配置和事件"><a href="#配置和事件" class="headerlink" title="配置和事件"></a>配置和事件</h3><p>参考：<a href="https://github.com/OrangeXC/vue-hotzone#options" target="_blank" rel="noopener">https://github.com/OrangeXC/vue-hotzone#options</a></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这里强调一下行文目的，让这个组件被更多人发现，转变下开发模式或许效率真的可以翻倍，也希望更多的简化操作并可以提高开发效率的组件被开发出来。</p>
<p>至于态度还是开源的态度，也希望区别于直接贴 github 求 star 的文章，实感无聊，有意见欢迎提 pr 和 issue 交流。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>React 和 Redux 快速开发实战</title>
    <url>/2017/03/02/react-redux/</url>
    <content><![CDATA[<p><img src="/uploads/react-redux1.jpg" alt=""></p>
<p>今天聊一聊 react + redux 环境快速搭建，以及实战一个 TodoList，可能是有史以来最简洁的方法哦，是不是很期待，当时橙子也是很吃惊这样的搭建速度。</p>
<p>本文适合有 react 和 redux 基础的同学看，当然你也可以看完本文去学基础。下面进入正题</p>
<a id="more"></a>

<h2 id="快速搭建环境"><a href="#快速搭建环境" class="headerlink" title="快速搭建环境"></a>快速搭建环境</h2><p>没错，看过前面博客的同学猜到，我会选择各种 cli 工具，当然你可能猜错了，这里用的不是 create-react-app 这个 star 最多的构建工具。</p>
<p>这里我们用 <a href="https://github.com/davezuko/react-redux-starter-kit" target="_blank" rel="noopener">react-redux-starter-kit</a></p>
<p>需要 <code>node 4.5.0+ &amp; npm 3.0.0+</code> 即可，首先</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;davezuko&#x2F;react-redux-starter-kit.git &lt;my-project-name&gt;</span><br><span class="line">cd &lt;my-project-name&gt;</span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>

<p>没错你已经搭建环境完毕。好快的样子！</p>
<p>此时你可以看到 <code>localhost：3000</code> 的首屏了，welcome 然后一个鸭子，奇怪的首屏，作者说 duck 是 redux 的谐音，好吧。。。</p>
<p>此时可能你已经兴奋的点完了，这个 cli 的全部内容。</p>
<p>先不急看效果，既然是 redux，就要有对应的 chrome 插件，让我们直观的看到 store 的变化。</p>
<p>推荐 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd" target="_blank" rel="noopener">redux-devtool</a>，点开链接，添加至 chrome 即可。</p>
<p>此时开启控制台，找到 Redux 的 tab，会看到如下界面</p>
<p><img src="/uploads/react-redux2.jpg" alt=""></p>
<p>功能强大，想深入学习的可以看文档，这里我们只关心 Action 和 State 的变化</p>
<p>此时项目在 <code>localhost:3000/counter</code> 这个路由下有个累加器，Increment 每次同步加 1，Double(async) 每次异步乘 2。</p>
<p>异步处理速度慢？不是的看代码会发现这样一段</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> doubleAsync = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, getState</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        dispatch(&#123;</span><br><span class="line">          type    : COUNTER_DOUBLE_ASYNC,</span><br><span class="line">          payload : getState().counter</span><br><span class="line">        &#125;)</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">200</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>没错，是一个 200ms 的 setTimeout。</p>
<p>大家印象里，官方文档有说 action 是立即执行的同步函数，我们可以借助中间件的形式实现异步，这里用的是 <code>redux-thunk</code>，这种方式的确解决了问题，之后的文章还会单独介绍更好的办法。</p>
<p>代码简单过一遍，没什么难点。接下来我们就可以根据这个项目渐进开发了。</p>
<h2 id="实战-TodoList"><a href="#实战-TodoList" class="headerlink" title="实战 TodoList"></a>实战 TodoList</h2><p>好，我们首先添加一个路由</p>
<p>src/compoments/Header/Header.js</p>
<p>在 div 标签内最下面添加如下代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;' · '&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">'/todo'</span> <span class="attr">activeClassName</span>=<span class="string">'route--active'</span>&gt;</span></span><br><span class="line">  Todo</span><br><span class="line"><span class="tag">&lt;/<span class="name">Link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>src/routes/index.js</p>
<p>对应位置如下修改，添加一个子路由。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> CoreLayout <span class="keyword">from</span> <span class="string">'../layouts/CoreLayout'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./Home'</span></span><br><span class="line"><span class="keyword">import</span> CounterRoute <span class="keyword">from</span> <span class="string">'./Counter'</span></span><br><span class="line"><span class="keyword">import</span> TodoRoute <span class="keyword">from</span> <span class="string">'./Todo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> createRoutes = <span class="function">(<span class="params">store</span>) =&gt;</span> (&#123;</span><br><span class="line">  path        : <span class="string">'/'</span>,</span><br><span class="line">  component   : CoreLayout,</span><br><span class="line">  indexRoute  : Home,</span><br><span class="line">  childRoutes : [</span><br><span class="line">    CounterRoute(store),</span><br><span class="line">    TodoRoute(store)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们现在还没有 Todo 对应路由的组件，下面在 routes 下创建 Todo 文件夹，然后文件夹结构如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Todo</span><br><span class="line">  |-components</span><br><span class="line">  |  |-Todo.js</span><br><span class="line">  |</span><br><span class="line">  |-containers</span><br><span class="line">  |  |-TodoContainer.js</span><br><span class="line">  |</span><br><span class="line">  |-modules</span><br><span class="line">  |  |-todo.js</span><br><span class="line">  |</span><br><span class="line">  |-index.js</span><br></pre></td></tr></table></figure>

<p>简单解释一下这个目录结构，index.js 是 Todo 作为路由页面的入口文件，components 下放的是模块的视图部分，containers 作为一个容器来绑定组件的 event、 state 和 prop，modules 主要是负责从 action-&gt;reducer-&gt;newState 的过程。</p>
<p>条例清晰，梳理完结构，看看每个文件都怎么完成的</p>
<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; injectReducer &#125; <span class="keyword">from</span> <span class="string">'../../store/reducers'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (store) =&gt; (&#123;</span><br><span class="line">  path : <span class="string">'todo'</span>,</span><br><span class="line">  getComponent (nextState, cb) &#123;</span><br><span class="line">    <span class="built_in">require</span>.ensure([], (<span class="built_in">require</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> Todo = <span class="built_in">require</span>(<span class="string">'./containers/TodoContainer'</span>).default</span><br><span class="line">      <span class="keyword">const</span> &#123; itemReducer &#125; = <span class="built_in">require</span>(<span class="string">'./modules/todo'</span>)</span><br><span class="line">      <span class="keyword">const</span> &#123; todoListReducer &#125; = <span class="built_in">require</span>(<span class="string">'./modules/todo'</span>)</span><br><span class="line"></span><br><span class="line">      injectReducer(store, &#123; <span class="attr">key</span>: <span class="string">'itemData'</span>, <span class="attr">reducer</span>: itemReducer &#125;)</span><br><span class="line">      injectReducer(store, &#123; <span class="attr">key</span>: <span class="string">'todoList'</span>, <span class="attr">reducer</span>: todoListReducer &#125;)</span><br><span class="line"></span><br><span class="line">      cb(<span class="literal">null</span>, Todo)</span><br><span class="line">    &#125;, <span class="string">'todo'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里将 store 和 reducer 绑定，将 store 注入到 /todo 的路由下的 props 中去</p>
<p>components/Todo.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Todo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          className=<span class="string">'form-control'</span></span><br><span class="line">          style=&#123;&#123; <span class="attr">marginBottom</span>: <span class="string">'10px'</span> &#125;&#125;</span><br><span class="line">          type=<span class="string">'text'</span> ref=<span class="string">'input'</span></span><br><span class="line">          value=&#123;<span class="keyword">this</span>.props.itemData&#125;</span><br><span class="line">          onChange=&#123;(e) =&gt; <span class="keyword">this</span>.handleChange(e)&#125;</span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;button</span><br><span class="line">          className=<span class="string">'btn btn-primary btn-lg btn-block'</span></span><br><span class="line">          style=&#123;&#123; <span class="attr">marginBottom</span>: <span class="string">'10px'</span> &#125;&#125;</span><br><span class="line">          onClick=&#123;(e) =&gt; <span class="keyword">this</span>.handleSubmit(e)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          添加</span><br><span class="line">        &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul className='list-group'&gt;</span></span><br><span class="line"><span class="regexp">          &#123;</span></span><br><span class="line"><span class="regexp">            this.props.todoList.map((item, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">              return &lt;li</span></span><br><span class="line"><span class="regexp">                className='list-group-item'</span></span><br><span class="line"><span class="regexp">                key=&#123;index&#125;</span></span><br><span class="line"><span class="regexp">              &gt;</span></span><br><span class="line"><span class="regexp">                &#123;item&#125;</span></span><br><span class="line"><span class="regexp">                &lt;button</span></span><br><span class="line"><span class="regexp">                  className='btn btn-default'</span></span><br><span class="line"><span class="regexp">                  data-index=&#123;index&#125;</span></span><br><span class="line"><span class="regexp">                  onClick=&#123;(e) =&gt; this.handleDel(e)&#125;</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">                  ❌</span></span><br><span class="line"><span class="regexp">                &lt;/</span>button&gt;</span><br><span class="line">              &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">            &#125;)</span></span><br><span class="line"><span class="regexp">          &#125;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  handleChange (e) &#123;</span></span><br><span class="line"><span class="regexp">    const node = this.refs.input</span></span><br><span class="line"><span class="regexp">    const text = node.value.trim()</span></span><br><span class="line"><span class="regexp">    this.props.updateItem(text)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  handleSubmit (e) &#123;</span></span><br><span class="line"><span class="regexp">    const node = this.refs.input</span></span><br><span class="line"><span class="regexp">    const text = node.value.trim()</span></span><br><span class="line"><span class="regexp">    this.props.addItem(text)</span></span><br><span class="line"><span class="regexp">    this.props.updateItem('')</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">  handleDel (e) &#123;</span></span><br><span class="line"><span class="regexp">    const index = e.target.getAttribute('data-index')</span></span><br><span class="line"><span class="regexp">    this.props.delItem(Number(index))</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">Todo.propTypes = &#123;</span></span><br><span class="line"><span class="regexp">  addItem: React.PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  itemData: React.PropTypes.string.isRequired,</span></span><br><span class="line"><span class="regexp">  updateItem: React.PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  delItem: React.PropTypes.func.isRequired,</span></span><br><span class="line"><span class="regexp">  todoList: React.PropTypes.array.isRequired</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>就是个简单的 jsx，这里后缀没有写成 .jsx 文件，因为 webpack 配置了解析规则，.js 文件也可以正常解析，这里的 onClick 事件写成了 <code>=&gt;</code> 箭头函数的形式，目的是为了锁定 this 的作用域，在 handle 函数内可以拿到 this。</p>
<p>containers/TodoContainer.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123; updateItem, addItem, delItem &#125; <span class="keyword">from</span> <span class="string">'../modules/todo'</span></span><br><span class="line"><span class="keyword">import</span> Todo <span class="keyword">from</span> <span class="string">'../components/Todo'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = &#123;</span><br><span class="line">  updateItem,</span><br><span class="line">  addItem,</span><br><span class="line">  delItem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">  itemData: state.itemData,</span><br><span class="line">  todoList: state.todoList</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Todo)</span><br></pre></td></tr></table></figure>

<p>这里通过一个 connect 方法，将组件的 props 进行绑定。</p>
<p>modules/todo.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> UPDATE_ITEM = <span class="string">'UPDATE_ITEM'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ADD_ITEM = <span class="string">'ADD_ITEM'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> DELETE_ITEM = <span class="string">'DELETE_ITEM'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">updateItem</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: UPDATE_ITEM,</span><br><span class="line">    payload: item</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">addItem</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: ADD_ITEM,</span><br><span class="line">    payload: item</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">delItem</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    type: DELETE_ITEM,</span><br><span class="line">    payload: index</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> actions = &#123;</span><br><span class="line">  updateItem,</span><br><span class="line">  addItem,</span><br><span class="line">  delItem</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ITEM_ACTION_HANDLERS = &#123;</span><br><span class="line">  [UPDATE_ITEM]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> action.payload</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LIST_ACTION_HANDLERS = &#123;</span><br><span class="line">  [ADD_ITEM]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> state.concat(action.payload),</span><br><span class="line">  [DELETE_ITEM]: <span class="function">(<span class="params">state, action</span>) =&gt;</span> state.filter(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> index !== action.payload</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">itemReducer</span> (<span class="params">state = <span class="string">''</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler = ITEM_ACTION_HANDLERS[action.type]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> handler ? handler(state, action) : state</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">todoListReducer</span> (<span class="params">state = [], action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> handler = LIST_ACTION_HANDLERS[action.type]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> handler ? handler(state, action) : state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里 reducer 运用两个数组方法 concat 和 filter，分别做拼接和删除操作，这里意遵循 redux 的官方文档在不修改原 state，而是返回新的 state。在底部将两个 reducer 导出，绑定到 index.js 中。完成一个闭环，数据更新完成。</p>
<p>到这里我们的 todoList 完成了。</p>
<p>一边看界面一边看控制台 redux store 的变化吧！代码没有晦涩难懂的点，一个 todoList 也足以说明列表操作的流程，这也是各大框架都以 todoList 为 demo 的原因。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于复杂的应用 redux 带来的优势不赘述，本文的目的是讲述如何快速开发 react + redux 应用，让大家在配置环境上少踩坑，也通过一个简单的例子，说明我们应该怎么更简单的去使用 redux。动手写起来吧，橙子的文章一般都看不出效果的，亲手实现一遍会有意外收获哦，上面代码也是橙子自己踩过坑后写出来的，各大神有什么建议的地方尽管提出来！感谢阅读。</p>
]]></content>
      <tags>
        <tag>React</tag>
        <tag>Redux</tag>
      </tags>
  </entry>
  <entry>
    <title>Node 版本管理</title>
    <url>/2017/06/06/node-version-management/</url>
    <content><![CDATA[<p><img src="/uploads/node-version-management1.jpg" alt=""></p>
<a id="more"></a>

<p>node 已经成为每个前端必备的技能，就算没研究过 node 的运行机制，也会用到依赖 node 运行的包管理器 npm。</p>
<p>近日 node 发布新版本 8.0，npm 也升级到了 5.0，加了 lock file，社区里关于有没有必要继续使用 yarn 管理工具争论不休，我认为静观其变，待 npm 5 逐渐稳定后再转过去也不迟，目前 yarn 还是比较靠谱的替代方案。</p>
<p>当然本文要讲的不是 node 也不是 npm，但又离不开这两者。</p>
<p>当 node 发布新版本时，每个关注 node 的开发都会安装下新版本尝尝鲜，升级新版本会替换旧版本，典型例子使用 Homebrew 管理软件，当 <code>upgrade node</code> 时，node 的确更新了，但是旧的不见了。</p>
<p>因为 node 升级版本也是遵循版本升级原则，版本号第一位升级代表可能会不兼容之前的版本（删除修改某些 api）。</p>
<p>之前的旧项目可能因为升级跑不起来了，这时候就有多个版本的 node 共存的需求。</p>
<p>Github 上开源的比较好用的有 nvm 和 n，下面分别介绍两者。</p>
<h2 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h2><p>Github 地址：<a href="https://github.com/creationix/nvm" target="_blank" rel="noopener">https://github.com/creationix/nvm</a></p>
<p>nvm 并不支持 windows，不过已经有其它解决方案了，<a href="https://github.com/coreybutler/nvm-windows" target="_blank" rel="noopener">nvm-windows</a> 和 <a href="https://github.com/marcelklehr/nodist" target="_blank" rel="noopener">nodist</a></p>
<p>基本安装：</p>
<p>使用 cURL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>或者 Wget:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>安装的注意事项可以去 github 上查看。</p>
<p>下面说下简单的用法：</p>
<ul>
<li><code>nvm install node</code> 安装 node latest</li>
<li><code>nvm install --version</code> 安装指定版本</li>
<li><code>nvm use node</code> 在任何新的 shell 只是使用已安装的版本</li>
<li><code>nvm use --version</code> 在任何新的 shell 只是使用指定版本</li>
<li><code>nvm run node --version</code> 运行指定版本</li>
<li><code>nvm ls</code> 查看已安装的版本</li>
<li><code>nvm ls-remote</code> 查看可安装版本</li>
</ul>
<p>以上几条是常用的命令，可以解决 node 版本管理的需求。</p>
<h2 id="n"><a href="#n" class="headerlink" title="n"></a>n</h2><p>Github 地址：<a href="https://github.com/tj/n" target="_blank" rel="noopener">https://github.com/tj/n</a></p>
<p>基本安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g n</span><br></pre></td></tr></table></figure>

<p>基本用法：</p>
<ul>
<li><code>n &lt;version&gt;</code> 安装指定版本，如果指定版本已经安装那么会启动此版本</li>
<li><code>n</code> 获取版本列表，上下可以移动选择版本，enter选择版本，^C 退出</li>
<li><code>n latest</code> 安装 lts 版本</li>
<li><code>n stable</code> 安装或运行稳定版本</li>
<li><code>n lts</code> 安装或运行 lts 版本</li>
<li><code>n rm 0.9.4 v0.10.0</code> 移除某些版本，或者简写为 <code>n - 0.9.4</code></li>
<li><code>n prune</code> 删除非当前版本的其它所有版本</li>
</ul>
<p>以上是 n 的简单使用</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇主要是工具篇，简单介绍下两种工具，具体大家可以去 GitHub 查看，在简洁程度上我比较喜欢 n 这个工具，大家可以都尝试尝试，重点在于解决版本切换问题。</p>
]]></content>
      <tags>
        <tag>Node</tag>
      </tags>
  </entry>
  <entry>
    <title>基于 Vue 的直播播放器实战</title>
    <url>/2016/11/14/vue-live-player/</url>
    <content><![CDATA[<p><img src="/uploads/vue-live-player1.jpeg" alt=""></p>
<a id="more"></a>

<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>时下直播的盛行让很多人对直播技术产生浓厚的兴趣，orange 本人也不例外，本文借着实战的目的完成一个 demo，并没有深入的讲解直播技术的实现原理以及推流和拉流的实现，为什么不深入讲解直播的底层技术，原因很简单大公司没必要看我的文章去了解如何搭建直播服务器，小企业又没有不要去搭建自己的直播服务器，因为涉及到的技术繁杂又琐碎，感兴趣的直接谷歌，各位大神有不同深度的讲解怎么去搭建自己的直播服务器，那么小企业人员、资金和技术有限怎么办，没错！买服务！！！</p>
<p>直播云服务也是今年的一个亮点，各大云平台都在做直播的服务，至于快慢选择的话 orange 只用过七牛云直播，没办法拿数据给大家建议</p>
<p>七牛的文档给的比较详细，如何获得自己的直播空间，如何绑定备案域名，如何解析域名，如何创建直播间以及整个的工作流程先上<a href="http://developer.qiniu.com/article/index.html#pili" target="_blank" rel="noopener">七牛官网</a>，其次看 <a href="https://github.com/pili-engineering" target="_blank" rel="noopener">github 上的库</a></p>
<p>整个过程相信大家都能顺利完成，说到我们的播放器拉流，那么播放的来源怎么获取呢？有安卓和ios开发经验的可以用移动端推流，没有经验的也不要紧推荐一个<a href="https://www.douyu.com/cms/zhibo/201311/13/250.shtml" target="_blank" rel="noopener">斗鱼的 OBS 教程</a></p>
<blockquote>
<p>注：以上的直播空间的搭建没有完成也可以看本文，更希望大家可以做成一个完整的 demo，我们的重点还是在于播放器的实现。</p>
</blockquote>
<h2 id="直播协议"><a href="#直播协议" class="headerlink" title="直播协议"></a>直播协议</h2><p>首先，需要知道直播的常用协议，RTMP 和 HLS，经过测试在七牛云直播平台不采用加速的情况下 RTMP 的延时在 10s 内，HLS 在 10-20s。经过优化后的还没测试过。</p>
<p>至于这两个协议的选择还需要根据实际情况而定（只看延时大小是不对滴），还是给链接<a href="http://www.samirchen.com/ios-rtmp-vs-hls/" target="_blank" rel="noopener">直播协议的选择：RTMP vs. HLS</a></p>
<h2 id="Vue-结合"><a href="#Vue-结合" class="headerlink" title="Vue 结合"></a>Vue 结合</h2><p>做过 H5 播放器的对与 video.js 并不陌生，实现的出发点也是在 video.js 上，默认大家都有 Vue 搭建和简单运用能力了，没有经验的可以看 orange 之前写的入门文章。</p>
<p>首先我们要新建一个组件，这个组件就是播放器的组件，组件名随意，最初的想法是直接使用 video.js，但是踩的坑比较深所以不推荐直接使用。</p>
<blockquote>
<p>坑：首次载入不会有问题，路由跳转后再回来如果不刷新页面，import 进来的 videojs 并不会执行，所以需要在 mounted 里执行 videojs() 函数，然后传对应的参数进去，最后需要加入下面代码防止监听函数在切换路由后继续执行。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeDestroy: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.dispose()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>坑也踩完了，于是逛了一圈 github，发现了一个项目叫 <a href="https://github.com/surmon-china/vue-video-player" target="_blank" rel="noopener">vue-video-player</a></p>
<p>先安装依赖</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install vue-video-player --save</span><br></pre></td></tr></table></figure>

<p>引用依赖</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import with ES6</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span> VideoPlayer <span class="keyword">from</span> <span class="string">'vue-video-player'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// require with Node.js/Webpack</span></span><br><span class="line"><span class="keyword">var</span> Vue = <span class="built_in">require</span>(<span class="string">'vue'</span>)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">var</span> VideoPlayer = <span class="built_in">require</span>(<span class="string">'vue-video-player'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The default is to turn off some of the features, you can choose according to their use of certain features enabled, do not enable the introduction will not require the corresponding file. 默认有些功能是不开启的，比如youtube国内不能用，则默认是关闭的，如果不启用对应的功能，则不会引入对应的包，减少项目代码体积，当然也有可能意味着对应的功能可能会出错，true 是开启，false是关闭，正常情况使用者不需要care就可以。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Example(Only applies to the current global mode). 用配置项的话仅支持全局模式来配置，否则不会生效</span></span><br><span class="line">VideoPlayer.config(&#123;</span><br><span class="line">  youtube: <span class="literal">true</span>, <span class="comment">// default false</span></span><br><span class="line">  switcher: <span class="literal">false</span>, <span class="comment">// default true</span></span><br><span class="line">  hls: <span class="literal">false</span> <span class="comment">// default true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// use</span></span><br><span class="line">Vue.use(VideoPlayer)</span><br><span class="line"></span><br><span class="line"><span class="comment">// --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// or use with component(ES6)</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">import</span> &#123; videoPlayer &#125; <span class="keyword">from</span> <span class="string">'vue-video-player'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    videoPlayer</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HLS"><a href="#HLS" class="headerlink" title="HLS"></a>HLS</h3><p>这里默认给出了 HLS 的方案，我们先去全局引入，到 main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> VideoPlayer <span class="keyword">from</span> <span class="string">'vue-video-player'</span>;</span><br><span class="line"></span><br><span class="line">VideoPlayer.config(&#123;</span><br><span class="line">  youtube: <span class="literal">true</span>,</span><br><span class="line">  switcher: <span class="literal">true</span>,</span><br><span class="line">  hls: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.use(VideoPlayer)</span><br></pre></td></tr></table></figure>

<p>下面看下我的 component</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">video-player</span> <span class="attr">:options</span>=<span class="string">"videoOptions"</span>&gt;</span><span class="tag">&lt;/<span class="name">video-player</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'Play'</span>,</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">      videoOptions: &#123;</span><br><span class="line">        source: &#123;</span><br><span class="line"><span class="actionscript">          type: <span class="string">"application/x-mpegURL"</span>,</span></span><br><span class="line"><span class="actionscript">          src: <span class="string">'https://logos-channel.scaleengine.net/logos-channel/live/biblescreen-ad-free/playlist.m3u8'</span>,</span></span><br><span class="line"><span class="actionscript">          withCredentials: <span class="literal">false</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">        language: <span class="string">'zh-CN'</span>,</span></span><br><span class="line"><span class="actionscript">        live: <span class="literal">true</span>,</span></span><br><span class="line"><span class="actionscript">        autoplay: <span class="literal">true</span>,</span></span><br><span class="line">        height: 540</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>到这里你的播放器就可以播放 HLS 链接了</p>
<h3 id="RTMP"><a href="#RTMP" class="headerlink" title="RTMP"></a>RTMP</h3><p>上面说到库底层还是依赖 video.js， 所以呢我们不妨直接这样使用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'Play'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      videoOptions: &#123;</span><br><span class="line">        source: &#123;</span><br><span class="line">          type: <span class="string">"rtmp/mp4"</span>,</span><br><span class="line">          src: <span class="string">'rtmp://your.streaming.provider.net/cfx/st/&amp;mp4:path/to/video.mp4'</span>,</span><br><span class="line">          withCredentials: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        language: <span class="string">'zh-CN'</span>,</span><br><span class="line">        live: <span class="literal">true</span>,</span><br><span class="line">        autoplay: <span class="literal">true</span>,</span><br><span class="line">        height: <span class="number">540</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两种方法均可尝试，上面给出的 src 换成自己的链接就实现拉流播放啦，当然你如果不用 vue 的话也没关系，直接参照 <a href="http://videojs.com/" target="_blank" rel="noopener">video.js 的官网</a>，单是 RTMP 的话不需要第三方库，如果是 HLS 的话需要引入<a href="https://github.com/videojs/videojs-contrib-hls" target="_blank" rel="noopener">videojs-contrib-hls</a>，看具体情况而定。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>Live</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue 基于 NUXT 的 SSR</title>
    <url>/2016/12/27/vue-nuxt-ssr/</url>
    <content><![CDATA[<p><img src="/uploads/vue-nuxt-ssr1.png" alt=""></p>
<a id="more"></a>

<h2 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h2><p>首先说下 SSR，最近很热的词，意为 Server Side Rendering（服务端渲染），目的是为了解决单页面应用的 SEO 的问题，对于一般网站影响不大，但是对于论坛类，内容类网站来说是致命的，搜索引擎无法抓取页面相关内容，也就是用户搜不到此网站的相关信息。</p>
<p>抓取页面的前提是 html 含有被抓取内容，我们不妨看看基于 vue 的线上 SPA 页面请求时返回了什么</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">utf-8</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>iDareX敢玩<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">keywords</span> <span class="attr">content</span>=<span class="string">"敢玩, iDareX, 敢玩TV, 敢玩活动, 敢玩自频道, 敢玩主题, 户外, 极限运动, 周边游, 探险, 时尚, 新潮, 运动视频, 体育, 新奇, 生活方式, 刺激, 惊险, 户外装备, 达人, 90后"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">description</span> <span class="attr">content</span>=<span class="string">自2014年10月创办以来，敢玩专注于极限户外和娱乐体育。从顽童、玩具、玩法三个方面，产出更专注于‘玩’的内容，已打造了一系列深受喜爱的娱乐体育真人秀和引爆网络的运动视频。!</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">renderer</span> <span class="attr">content</span>=<span class="string">webkit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">force-rendering</span> <span class="attr">content</span>=<span class="string">webkit</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">viewport</span> <span class="attr">content</span>=<span class="string">"width=1140"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">X-UA-Compatible</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">static/favicon.ico</span> <span class="attr">type</span>=<span class="string">image/x-icon</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">/static/css/app.eef5b81a3d1bee5054a791f452a34147.css</span> <span class="attr">rel</span>=<span class="string">stylesheet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">app</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/static/js/manifest.6d0adb8f2d8884be1c03.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/static/js/vendor.ec1cc90c9847c434ba7d.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/static/js/app.d7fd10ae7e4a68598037.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们的组件都是这个 html 文件返回后再渲染到 <code>&lt;div id=app&gt;&lt;/div&gt;</code> 里的。这就合理的解释了 SEO 缺陷的原因。</p>
<p>既然说到 SSR 可以解决 SEO 的问题，不难想到原理就是将我们的 html 在服务端渲染，合成完整的 html 文件再输出到浏览器。</p>
<p>另外 SSR 还适用以下场景</p>
<ul>
<li>客户端的网络比较慢</li>
<li>客户端运行在老的或者直接没有 JavaScript 引擎上</li>
</ul>
<p>vue 官网给出了 SSR 原理图片</p>
<p><img src="/uploads/vue-nuxt-ssr2.png" alt=""></p>
<p>对于这幅图的原理官网有详细解释，此类文章也很多，这里不赘述。</p>
<h2 id="NUXT"><a href="#NUXT" class="headerlink" title="NUXT"></a>NUXT</h2><p>我们进入正题说下 NUXT</p>
<blockquote>
<p>Nuxt.js is a minimalistic framework for server-rendered Vue applications (inspired by Next.js)</p>
</blockquote>
<p>作用就是在 node.js 上进一步封装，然后省去我们搭建服务端环境的步骤，只需要遵循这个库的一些规则就能轻松实现 SSR</p>
<h3 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h3><p>Nuxt.js 团队提供了 vue-cli 的初始化模板。前提安装 vue-cli，安装过的忽略此步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g vue-cli</span><br></pre></td></tr></table></figure>

<p>完成后在需要创建的目录下执行以下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue init nuxt/starter &lt;project-name&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>依赖安装完成后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>打开浏览器 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></p>
<blockquote>
<p>说明：Nuxt.js 会监听 <code>pages</code> 目录下的改变，添加新 page 的时候不需要重启服务</p>
</blockquote>
<h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>完成上面命令后你的目录结构会如下</p>
<p><img src="/uploads/vue-nuxt-ssr3.png" alt=""></p>
<p>Nuxt.js 给出了最简单的目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-- pages</span><br><span class="line">    |-- index.vue</span><br><span class="line">|-- package.json</span><br></pre></td></tr></table></figure>

<p>也就是说，至少需要一个 page 来作为展示页。</p>
<p>文件的路径建议都采用绝对路径，表格如下</p>
<p><img src="/uploads/vue-nuxt-ssr4.png" alt=""></p>
<p>例：怎么在 <code>/pages/user/me.vue</code> 引入一个 <code>static</code> 文件夹里的图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;~static&#x2F;img&#x2F;logo.png&quot; alt&#x3D;&quot;Logo&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>

<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p>Nuxt.js 根据 pages 目录结构去生成 vue-router 配置，也就是说 pages 目录的结构直接影响路由结构</p>
<p>例1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-- pages</span><br><span class="line">    |-- posts</span><br><span class="line">        |-- index.vue</span><br><span class="line">        |-- welcome.vue</span><br><span class="line">    |-- about.vue</span><br><span class="line">    |-- index.vue</span><br></pre></td></tr></table></figure>

<p>会生成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/posts'</span>,</span><br><span class="line">    component: <span class="string">'~pages/posts/index.vue'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/posts/welcome'</span>,</span><br><span class="line">    component: <span class="string">'~pages/posts/welcome.vue'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/about'</span>,</span><br><span class="line">    component: <span class="string">'~pages/about.vue'</span></span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: <span class="string">'~pages/index.vue'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>例2:隐藏路由</p>
<p>在文件名前加 <code>_</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">|-- pages</span><br><span class="line">    |-- _about.vue</span><br><span class="line">    |-- index.vue</span><br></pre></td></tr></table></figure>

<p>会生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">  &#123;</span><br><span class="line">    path: &#39;&#x2F;&#39;,</span><br><span class="line">    component: &#39;~pages&#x2F;index.vue&#39;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>目录下的 <code>nuxt.config.js</code> 是我们唯一的配置入口，这里不建议修改 <code>.nuxt</code> 目录，除非特殊需求</p>
<p>默认的给力我们三个配置 ·head·css·loading· 分别是头部设置，全局css，loading进度条</p>
<p>nuxt.config.js 的全部的配置如下,点击查看具体例子</p>
<ol>
<li><a href="https://nuxtjs.org/examples/cached-components" target="_blank" rel="noopener">cache</a></li>
<li><a href="https://nuxtjs.org/examples/custom-loading" target="_blank" rel="noopener">loading</a></li>
<li><a href="https://nuxtjs.org/examples/custom-routes" target="_blank" rel="noopener">router</a></li>
<li><a href="https://nuxtjs.org/examples/global-css" target="_blank" rel="noopener">css</a></li>
<li><a href="https://nuxtjs.org/examples/plugins" target="_blank" rel="noopener">plugins</a></li>
<li><a href="https://nuxtjs.org/examples/seo-html-head" target="_blank" rel="noopener">head</a></li>
</ol>
<p>另外还提供了 vuex 等配置，感兴趣可以去 github 和官网。</p>
<h2 id="NUXT-能为我们做什么"><a href="#NUXT-能为我们做什么" class="headerlink" title="NUXT 能为我们做什么"></a>NUXT 能为我们做什么</h2><p>对于使用就说上面这么多（官网上都有，这里给大家一个概览），说下为什么选择 NUXT 来做 SSR</p>
<p>问题1：就是我们无需为了路由划分而烦恼，你只需要按照对应的文件夹层级创建 .vue 文件就行<br>问题2：无需考虑数据传输问题，nuxt 会在模板输出之前异步请求数据（需要引入 axios 库），而且对 vuex 有进一步的封装<br>问题3：内置了 webpack，省去了配置 webpack 的步骤，nuxt 会根据配置打包对应的文件</p>
<p>还有很多便捷之处，可以尝试去写一写，读读源码</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇主要介绍 nuxt 的便捷之处，在使用上目前不推荐使用，几个原因：</p>
<ul>
<li>文档不完善还有许多是空的，不是说我们什么信息都得不到，可以看文档的 examples，里面列举的比较全面。</li>
<li>目前是 0.8.0 版本，而且 README 里介绍 1.0 即将到来，可能会添加新功能，文档也会完善，待到版本稳定后再部署也不迟。</li>
</ul>
]]></content>
      <tags>
        <tag>SSR</tag>
        <tag>Vue</tag>
        <tag>Nuxt</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈 Vue 项目优化</title>
    <url>/2017/05/15/vue-optimization/</url>
    <content><![CDATA[<p><img src="/uploads/vue-optimization1.png" alt=""></p>
<a id="more"></a>

<p>好久不写博文了，本文作为我使用半年 vue 框架的经验小结，随便谈谈，且本文只适用于 vue-cli 初始化的项目或依赖于 webpack 打包的项目。</p>
<p>前几天看到大家说 vue 项目越大越难优化，带来很多痛苦，这是避免不了的，问题终究要解决，框架的性能是没有问题的，各大测试网站都有相关数据。下面进入正题</p>
<h2 id="基础优化"><a href="#基础优化" class="headerlink" title="基础优化"></a>基础优化</h2><p>所谓的基础优化是任何 web 项目都要做的，并且是问题的根源。HTML，CSS，JS 是第一步要优化的点</p>
<p>分别对应到 .vue 文件内的，<code>&lt;template&gt;,&lt;style&gt;,&lt;script&gt;</code>，下面逐个谈下 vue 项目里都有哪些值得优化的点</p>
<h3 id="template"><a href="#template" class="headerlink" title="template"></a>template</h3><p>语义化标签，避免乱嵌套，合理命名属性等等标准推荐的东西就不谈了。</p>
<p>模板部分帮助我们展示结构化数据，vue 通过数据驱动视图，主要注意一下几点</p>
<ul>
<li>v-show，v-if 用哪个？在我来看要分两个维度去思考问题，第一个维度是权限问题，只要涉及到权限相关的展示无疑要用 <code>v-if</code>，第二个维度在没有权限限制下根据用户点击的频次选择，频繁切换的使用 <code>v-show</code>，不频繁切换的使用 <code>v-if</code>，这里要说的优化点在于减少页面中 dom 总数，我比较倾向于使用 <code>v-if</code>，因为减少了 dom 数量，加快首屏渲染，至于性能方面我感觉肉眼看不出来切换的渲染过程，也不会影响用户的体验。</li>
<li>不要在模板里面写过多的表达式与判断 <code>v-if=&quot;isShow &amp;&amp; isAdmin &amp;&amp; (a || b)&quot;</code>，这种表达式虽说可以识别，但是不是长久之计，当看着不舒服时，适当的写到 methods 和 computed 里面封装成一个方法，这样的好处是方便我们在多处判断相同的表达式，其他权限相同的元素再判断展示的时候调用同一个方法即可。</li>
<li>循环调用子组件时添加 key，key 可以唯一标识一个循环个体，可以使用例如 <code>item.id</code> 作为 key，假如数组数据是这样的 <code>[&#39;a&#39; , &#39;b&#39;, &#39;c&#39;, &#39;a&#39;]</code>,使用 <code>:key=&quot;item&quot;</code> 显然没有意义，更好的办法就是在循环的时候 <code>(item, index) in arr</code>，然后 <code>:key=&quot;index&quot;</code>来确保 key 的唯一性。</li>
</ul>
<h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><ul>
<li>将样式文件放在 vue 文件内还是外？讨论起来没有意义，重点是按模块划分，我的习惯是放在 vue 文件内部，方便写代码是在同一个文件里跳转上下对照，无论内外建议加上 <code>&lt;style scopeed&gt;</code> 将样式文件锁住，目的很简单，再好用的标准也避免不了多人开发的麻烦，约定命名规则也可能会冲突，锁定区域后尽量采用简短的命名规则，不需要 <code>.header-title__text</code> 之类的 class，直接 <code>.title</code> 搞定。</li>
<li>为了和上一条作区分，说下全局的样式文件，全局的样式文件，尽量抽象化，既然不在每一个组件里重复写，就尽量通用，这部分抽象做的越好说明你的样式文件体积越小，复用率越高。建议将复写组件库如 Element 样式的代码也放到全局中去。</li>
<li>不使用 float 布局，之前看到很多人封装了 <code>.fl -- float: left</code> 到全局文件里去，然后又要 <code>.clear</code>，现在的浏览器还不至于弱到非要用 <code>float</code> 去兼容，完全可以 flex，guide 兼容性一般，功能其实 flex 布局都可以实现，float 会带来布局上的麻烦，用过的都知道不相信解释坑了。</li>
</ul>
<p>至于其他通用的规范这里不赘述，相关文章很多。</p>
<h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>这部分也是最难优化的点，说下个人意见吧。</p>
<ul>
<li>多人开发时尽量保持每个组件 <code>export default {}</code> 内的方法顺序一致，方便查找对应的方法。我个人习惯 data、props、钩子、watch、computed、components。</li>
<li>data 里要说的就是初始化数据的结构尽量详细，命名清晰，简单易懂，避免无用的变量，<code>isEditing</code> 实际可以代表两个状态，true 或 false，不要再去定义 <code>notEditing</code> 来控制展示，完全可以在模板里</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;&#123; isEditing ? 编辑中 : 保存 &#125;&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>props 父子组件传值时尽量 <code>:width=&quot;&quot; :heigth=&quot;&quot;</code> 不要 <code>:option={}</code>，细化的好处是只传需要修改的参数，在子组件 props 里加数据类型，是否必传，以及默认值，便于排查错误，让传值更严谨。</li>
<li>钩子理解好生命周期的含义就好，什么时间应该请求，什么时间注销方法，哪些方法需要注销。简单易懂，官网都有写。</li>
<li>metheds 中每一个方法一定要简单，只做一件事，尽量封装可复用的简短的方法，参数不易过多。如果十分依赖 lodash 开发，methed 看着会简洁许多，代价就是整体的 bundle 体积会大，假如项目仅仅用到小部分方法可以局部引入 loadsh，不想用 lodash 的话可以自己封装一个 util.js 文件</li>
<li>watch 和 computed 用哪个的问题看官网的例子，计算属性主要是做一层 filter 转换，切忌加一些调用方法进去，watch 的作用就是监听数据变化去改变数据或触发事件如 <code>this.$store.dispatch(&#39;update&#39;, { ... })</code></li>
</ul>
<h2 id="组件优化"><a href="#组件优化" class="headerlink" title="组件优化"></a>组件优化</h2><p>vue 的组件化深受大家喜爱，到底组件拆到什么程度算是合理，还要因项目大小而异，小型项目可以简单几个组件搞定，甚至不用 vuex，axios 等等，如果规模较大就要细分组件，越细越好，包括布局的封装，按钮，表单，提示框，轮播等，推荐看下 Element 组件库的代码，没时间写这么详细可以直接用 Element 库，分几点进行优化</p>
<ul>
<li>组件有明确含义，只处理类似的业务。复用性越高越好，配置性越强越好。</li>
<li>自己封装组件还是遵循配置 props 细化的规则。</li>
<li>组件分类，我习惯性的按照三类划分，page、page-item 和 layout，page 是路由控制的部分，page-item 属于 page 里各个布局块如 banner、side 等等，layout 里放置多个页面至少出现两次的组件，如 icon, scrollTop 等</li>
</ul>
<h2 id="vue-router-和-vuex-优化"><a href="#vue-router-和-vuex-优化" class="headerlink" title="vue-router 和 vuex 优化"></a>vue-router 和 vuex 优化</h2><p>vue-router 除了切换路由，用的最多的是处理权限的逻辑，关于权限的控制这里不赘述，相关 demo 和文章有许多，那么说到优化，值得一提的就是<a href="https://router.vuejs.org/zh-cn/advanced/lazy-loading.html" target="_blank" rel="noopener">组件懒加载</a></p>
<p>中午官网链接如上，例子如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'./Foo.vue'</span>)), <span class="string">'group-foo'</span>)</span><br><span class="line"><span class="keyword">const</span> Bar = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'./Bar.vue'</span>)), <span class="string">'group-foo'</span>)</span><br><span class="line"><span class="keyword">const</span> Baz = <span class="function"><span class="params">r</span> =&gt;</span> <span class="built_in">require</span>.ensure([], () =&gt; r(<span class="built_in">require</span>(<span class="string">'./Baz.vue'</span>)), <span class="string">'group-foo'</span>)</span><br></pre></td></tr></table></figure>

<p>这段代码将 Foo, Bar, Baz 三个组件打包进了名为 <code>group-foo</code> 的 chunk 文件，当然啦是 js 文件</p>
<p>其余部分正常写就可以，在网站加载时会自动解析需要加载哪个 chunk，虽然分别打包的总体积会变大，但是单看请求首屏速度的话，快了好多。</p>
<p>vuex 面临的问题和解决方案有几点</p>
<ul>
<li>当网站足够大时，一个状态树下，根的部分字段繁多，解决这个问题就要模块化 vuex，官网提供了<a href="https://vuex.vuejs.org/zh-cn/modules.html" target="_blank" rel="noopener">模块化方案</a>，允许我们在初始化 vuex 的时候配置 modules。每一个 module 里面又分别包含 state 、action 等，看似是多个状态树，其实还是基于 rootState 的子树。细分后整个 state 结构就清晰了，管理起来也方便许多。</li>
<li>由于 vuex 的灵活性，带来了编码不统一的情况，完整的闭环是 <code>store.dispatch(&#39;action&#39;) -&gt; action -&gt; commit -&gt; mutation -&gt; getter -&gt; computed</code>，实际上中间的环节有的可以省略，因为 API 文档提供了以下几个方法 mapState、mapGetters、mapActions、mapMutations，然后在组件里可以直接调取任何一步，还是项目小想怎么调用都可以，项目大的时候，就要考虑 vuex 使用的统一性，我的建议是不论多简单的流程都跑完整个闭环，形成代码的统一，方便后期管理，在我的组件里只允许出现 dispatch 和 mapGetters，其余的流程都在名为 store 的 vuex 文件夹里进行。</li>
<li>基于上面一条，说下每个过程里面要做什么，前后端数据一定会有不一致的地方，或是数据结构，或是字段命名，那么究竟应该在哪一步处理数据转换的逻辑呢？有人会说其实哪一步都可以实现，其实不然，我的建议如下</li>
</ul>
<ol>
<li>在发 dispatch 之前就处理好组件内需要传的参数的数据结构和字段名</li>
<li>到了 action 允许我们做的事情很多，因为这部支持异步，支持 state, rootState, commit, dispatch, getters，由此可见责任重大，首先如果后端需要部分其他 module 里面的数据，要通过 rootState 取值再整合到原有数据上，下一步发出请求,建议（<code>async await + axios</code>），拿到数据后进行筛选转换，再发送 commit 到 mutation</li>
<li>这一步是将转换后的数据更新到 state 里，可能会有数据分发的过程（传进一个 object 改变多个 state 中 key 的 value），可以转换数据结构，但是尽量不做字段转换，在上一步做</li>
<li>此时的 store 已经更新，使用 getter 方法来取值，<code>token: state =&gt; state.token</code>，单单的取值，尽量不要做数据转换，需要转换的点在于多个地方用相同的字段，但是结构不同的情况（很少出现）。</li>
<li>在组件里用 mapGetters 拿到对应的 getter 值。</li>
</ol>
<h2 id="打包优化"><a href="#打包优化" class="headerlink" title="打包优化"></a>打包优化</h2><p>上面说了代码方面的规范和优化，下面说下重点的打包优化，前段时间打包的 vender bundle 足足 1.4M，app bundle 也有 270K，app bundle 可以通过组件懒加载解决，vender 包该怎么解决？</p>
<p>有人会质疑是不是没压缩或依赖包没去重，其实都做了就是看到的 1.4M。</p>
<p>解决方法很简单，打包 vender 时不打包 vue、vuex、vue-router、axios 等，换用国内的 <a href="http://www.bootcdn.cn/" target="_blank" rel="noopener">bootcdn</a> 直接引入到根目录的 index.html 中。</p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/vue/2.2.5/vue.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/vue-router/2.3.0/vue-router.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/vuex/2.2.1/vuex.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/axios/0.15.3/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在 webpack 里有个 externals，可以忽略不需要打包的库</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line">  <span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">  <span class="string">'vuex'</span>: <span class="string">'Vuex'</span>,</span><br><span class="line">  <span class="string">'axios'</span>: <span class="string">'axios'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>此时的 vender 包会非常小，如果不够小还可以拆分其他的库，此时增加了请求的数量，但是远比加载一个 1.4M 的 bundle 快的多。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文谈的优化可以解决部分性能问题，实际开发细节很多，总之按着规范写代码，团队的编码风格尽量统一，处理细节上多加思考，大部分性能问题都能迎刃而解。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vuex 实战</title>
    <url>/2016/10/28/vuex/</url>
    <content><![CDATA[<p><img src="/uploads/vuex1.png" alt=""></p>
<p>本文就着之前几天的文章 <a href="http://orangexc.xyz/2016/10/18/Vue2-mobile-terminal-development-environment-to-build/">Vue2 移动端开发环境搭建</a> 继续扩展，上一篇文章有人反馈说讲到最后只有 <code>rem</code> 是移动端相关的知识，没错我个人认为除了 <code>rem</code> 和 <code>touch</code> 事件特殊外其它与 pc 端无异（手机系统版本和浏览器的 bug 放在这里讨论无意义），下面请出今天的大咖 vuex</p>
<a id="more"></a>

<h2 id="状态管理工具"><a href="#状态管理工具" class="headerlink" title="状态管理工具"></a>状态管理工具</h2><p>说到这里有两个疑：</p>
<p>1.什么是状态管理工具？</p>
<p>状态管理工具起源于早期的 Flux，意在管理项目中各个状态，状态保存在 store 中，状态是只读的，只能通过 action 触发 store 的更新。</p>
<p>2.问我们为什么使用状态管理工具？</p>
<p>当一个项目逐渐壮大我们需要管理的状态就会变得繁杂，例如：父级组件传递状态到子组件，子组件再次改变同一个状态时就要想办法告诉父级组件状态改变了，情况再复杂点呢！子组件之间又相互影响，又影响到其他子组件的父组件呢？情况变得越来越糟糕，我们需要一个全局的公共状态管理容器，把我们的状态都放进去统一管理。</p>
<p>大型项目对状态的管理需求越来约大，从而发展到今天的 react + redux 组合，angular + ngRedux 组合， vue + vuex 组合。</p>
<p>这里 redux 作为后起之秀有很多真对 Flux 的改进。感兴趣的可以深入了解，这里只关心 vuex 而且是 2.x，用过 1.x 版本的可以顺利过渡到 2.x。</p>
<h2 id="Vuex2-概览"><a href="#Vuex2-概览" class="headerlink" title="Vuex2 概览"></a>Vuex2 概览</h2><blockquote>
<p>Vuex2 官方文档：<a href="http://vuex.vuejs.org/en/index.html" target="_blank" rel="noopener">http://vuex.vuejs.org/en/index.html</a></p>
</blockquote>
<p>能看懂文档的可以跳过实战了。。。</p>
<p>实战开始之前先放出文档，归根结底还是因为文档描述过于简单（简陋），看的我云里雾里，这个对于搞过 redux 的我而言不是原理不理解，而是用法上没有一个能让我一眼看懂的简单粗暴的例子。</p>
<p>方便大家理解工作流程，先给出官方的配图</p>
<p><img src="/uploads/vuex2.png" alt=""></p>
<p>从左边看 vue components(组件) -&gt;  action（只能通过 dispatch 调用，与此同时可以异步与后端的 API 做交互） -&gt; mutations(只能通过 action 发起 commit 调用，此时开发工具可以监测到数据的流动) -&gt; state （mutations 传递修改过的状态到 state）-&gt; state 自动同步到视图</p>
<p>完成整个循环数据的流动是单向的，从而避免了双向数据流动的复杂性，不同的组件可以修改同一个状态，并将修改后的状态同步到所有关联此状态的组件。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>原理就解释到这，直接上一个实际例子。</p>
<p>这个例子的背景是我需要一个 webview，说到这不得不提 android 和 ios 的区别，目的就是全局判断设备类型存入 state 在局部直接取到类型做判断。</p>
<p>这里其实可以通过 props 传递 data 实现，说到这里考虑到可能产生多级子组件，我每一层都需要 props 传递，又顾及到是全局属性（因为嵌入到哪个平台的页面就走那个平台的接口）</p>
<p>安装 vuex 的步骤就省了，在之前的文章介绍过了</p>
<p>在 src 下新建文件夹 vuex，进入 vuex 新建 store.js</p>
<p>然后去 main.js 加入</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/store'</span></span><br></pre></td></tr></table></figure>

<p>再修改 Vue 实例如下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们去新建的 store.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue  <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    platform: <span class="string">''</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_APP(state, platform) &#123;</span><br><span class="line">      state.platform = platform;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    setApp(&#123;commit&#125;, platform) &#123;</span><br><span class="line">      commit(<span class="string">'SET_APP'</span>, platform);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    getApp: <span class="function">(<span class="params">state</span>) =&gt;</span> state.platform</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>看到这里不急着往下进行，官方给的建议是 state、mutations、actions、getters 都分离成单独文件再引入到 store.js 中，这里只是为了提供一个简单粗暴的例子，把大部分流程都封装在一个文件里了，也方便修改测试。跟着上面工作流程图一步一步的走一遍，不难发现我们整个流程走下来只差组件分别调用 setApp 和 getApp 了。</p>
</blockquote>
<p>说到组件先来看看完整的 App.vue</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"logo"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/logo.png"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article-content</span>&gt;</span><span class="tag">&lt;/<span class="name">article-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">share</span>&gt;</span><span class="tag">&lt;/<span class="name">share</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">comment</span>&gt;</span><span class="tag">&lt;/<span class="name">comment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> comment <span class="keyword">from</span> <span class="string">'./component/Comment.vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> articleContent <span class="keyword">from</span> <span class="string">'./component/ArticleContent.vue'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> share <span class="keyword">from</span> <span class="string">'./component/Share.vue'</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    articleContent,</span><br><span class="line">    comment,</span><br><span class="line">    share</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> u = navigator.userAgent;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">if</span> ( u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Adr'</span>) &gt; <span class="number">-1</span> ) &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'setApp'</span>, <span class="string">'android'</span>);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>) ) &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'setApp'</span>, <span class="string">'ios'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"sass"</span>&gt;</span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">"/style/base.scss"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里引入了三个组件，在 <code>mounted()</code> 里我们判断设备类型并发起 dispatch ，关键方法是 <code>this.$store.dispatch(&#39;setApp&#39;, ...args);</code></p>
<p>简单易懂我们 dispatch 了一个 action（setApp），然后 commit 到 mutations（SET_APP），在 SET_APP 中修改了 state.platform</p>
<p>下面看看子组件是怎么获取,因为都是重复的用法所以只给一个 share 组件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-share-block"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divider-line"</span> <span class="attr">layout</span>=<span class="string">"row"</span> <span class="attr">layout-align</span>=<span class="string">"center center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left-line"</span> <span class="attr">flex</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"label"</span>&gt;</span>分享到<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right-line"</span> <span class="attr">flex</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">layout</span>=<span class="string">"row"</span> <span class="attr">layout-align</span>=<span class="string">"space-between center"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"share-icon"</span> <span class="attr">v-tap</span>=<span class="string">"&#123; methods: share, target: 'wechatTimeline' &#125;"</span> <span class="attr">src</span>=<span class="string">"../img/wechat_timeline.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"share-icon"</span> <span class="attr">v-tap</span>=<span class="string">"&#123; methods: share, target: 'wechatFriend' &#125;"</span> <span class="attr">src</span>=<span class="string">"../img/wechat_friend.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"share-icon"</span> <span class="attr">v-tap</span>=<span class="string">"&#123; methods: share, target: 'weibo' &#125;"</span> <span class="attr">src</span>=<span class="string">"../img/weibo.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"share-icon"</span> <span class="attr">v-tap</span>=<span class="string">"&#123; methods: share, target: 'qq' &#125;"</span> <span class="attr">src</span>=<span class="string">"../img/qq.png"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">  data () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">      platform: <span class="string">''</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted () &#123;</span><br><span class="line"><span class="actionscript">    <span class="keyword">this</span>.platform = <span class="keyword">this</span>.$store.getters.getApp;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    initIOS() &#123;</span><br><span class="line"><span class="javascript">      <span class="built_in">window</span>.connectWebViewJavascriptBridge(<span class="function">(<span class="params">bridge</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.webviewBridge = bridge;</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    share(target) &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">if</span> (<span class="keyword">this</span>.platform === <span class="string">'ios'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.initIOS();</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.webviewBridge.callHandler(<span class="string">'invokeArticleShare'</span>, &#123;</span></span><br><span class="line">          shareTarget: target</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.platform === <span class="string">'android'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.idarex.invokeArticleShare(target);</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"sass"</span>&gt;</span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">"../style/component/share.scss"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>还是看关键语句 <code>this.platform = this.$store.getters.getApp;</code> ，这样我们可以取到 state 中的 platform 完成一个完整存取数据的循环。</p>
<blockquote>
<p>说到这，不要急着把完整的组件粘贴运行，一定会抱错的，因为引入了第三方指令库（v-tap 实现移动端 tap 事件），这些都是次要的也没必要还原我的项目，整个原理和流程说的已经很清楚了，直接创建自己的组件跑一下就没什么问题了，大同小异。</p>
</blockquote>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>vuex 的原理其实简单易懂，本文通过一个小 demo 完成了一个简单流程，但真实项目里我不推荐这么做，最好把 store.js 模块化，方便后期维护，官方还提供了中间件等概念，准备在项目应用的可以研读源代码，从工程化的角度规划一下项目，当前 vue2 比较盛行，相信不久在 github 上会有大量的优秀项目供大家参考。</p>
]]></content>
      <tags>
        <tag>Vue</tag>
        <tag>Vuex</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序实战</title>
    <url>/2017/01/12/wechat-miniprogram/</url>
    <content><![CDATA[<p><img src="/uploads/wechat-miniprogram1.jpeg" alt=""></p>
<p>微信小程序经过几个月的内侧，在今年的 1 月 9 日正式上线，在微信通讯录页面就可以搜索你想找的小程序，然后在发现页最底部就会有你曾经浏览过的小程序的入口。</p>
<p>一番体验后比橙子想象的效果好的多，所以自己起手也写了一个。下面具体介绍细节。</p>
<p>想写小程序的大家都知道只有企业账户可以发布，但是开发却不需要企业账号，但是我们需要实名认证我们的小程序账号。</p>
<a id="more"></a>

<h2 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h2><p>直接给官网链接 <a href="https://mp.weixin.qq.com/debug/wxadoc/introduction/?t=201718#注册小程序帐号" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/introduction/?t=201718#注册小程序帐号</a></p>
<blockquote>
<p>注意：没有企业认证记得在 <strong>选择主体类型</strong> 时选择-&gt;其他组织，组织名称自己起，机构代码只要符合它的规则就行（输入框下有提示直接复制粘贴），公章的扫描件上传随意图片即可，管理员信息务必填写真实信息（切记）</p>
</blockquote>
<h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><p>在官网给出了下载入口 <a href="https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201715" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html?t=201715</a></p>
<p>安装后会有扫码登录，然后按照这个链接执行 <a href="https://mp.weixin.qq.com/debug/wxadoc/introduction/?t=201718#登录" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/introduction/?t=201718#登录</a></p>
<p>记得你在官网注册成功后小程序的 AppID，这里不用选择本地开发目录，为了起手方便当你添加项目时会问你是不是使用它的初始化模板（点击使用）。</p>
<p>现在不出差错的话你的页面会出现 你的 头像、用户名、Hello world</p>
<p>如果显示正常，恭喜你环境配置成功</p>
<p>有时却不是那么顺利，橙子在打开初始化项目报错 <code>Failed to load resource: net::ERR_NAME_NOT_RESOLVED</code></p>
<p>如果你有相同的错误解决办法很简单，关掉你的 vpn 即可（并不是所有 vpn 均存在问题，因为橙子咨询其他人的 vpn 没关也不会产生这个问题），记得重启你的开发者工具。</p>
<h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><p>如果你了解几种文件的作用可以跳过此步，不了解的可以看下官网起步教程，<a href="https://mp.weixin.qq.com/debug/wxadoc/dev/?t=201715" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/wxadoc/dev/?t=201715</a></p>
<p>然后在上面链接仔细过一遍 框架、组件、API（切记认真阅读）</p>
<p>也许你会问官网给的那么详细我写这个文章的意义在哪？</p>
<p>问的好，如果官网能给我一个完整的小程序我也不会费周折去自己写，官网的 API 固然重要，都是人家开发的我们无权篡改，本文的目的是尽量让大家少踩坑。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>自己定义下产品详情，一个展示视频的 app，列表与播放页，非常简单的例子，上手简单</p>
<p>这里涉及到网络请求，首先去管理平台，最下面的设置里配置你的服务器域名，你自己有接口最好，不必走本例的接口，根据官方文档你可以写出自己的程序，另外值得一提的就是 V2EX，知乎日报，豆瓣等都提供外部接口供大家使用</p>
<blockquote>
<p>说明：没有接口的可以用本例的 <code>https://api.idarex.com</code>（去自己的小程序网页控制台-&gt;设置-&gt;填写到<strong>request合法域名</strong>即可），此步不设置后面请求会报错，每月只能修改三次谨慎使用</p>
</blockquote>
<p>两个页面构成？倒也没那个必要，增加整个小程序的体积，而且跨页面传输数据多一层逻辑，这里采用 <code>wx:if</code> 实现条件渲染来实现。</p>
<p>我们只需要保留 <code>index</code> 文件夹下的文件</p>
<p>从全局文件改起 log 部分可以选择保留，获取用户信息部份暂时用不到</p>
<p>app.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">App(&#123;</span><br><span class="line">  onLaunch: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//调用API从本地缓存中获取数据</span></span><br><span class="line">    <span class="keyword">var</span> logs = wx.getStorageSync(<span class="string">'logs'</span>) || []</span><br><span class="line">    logs.unshift(<span class="built_in">Date</span>.now())</span><br><span class="line">    wx.setStorageSync(<span class="string">'logs'</span>, logs)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>全局的配置文件只需要 window 的基础配置，这里修改 navigationBar 的内容样式</p>
<p>app.json</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"pages"</span>:[</span><br><span class="line">    <span class="string">"pages/index/index"</span>,</span><br><span class="line">    <span class="string">"pages/logs/logs"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"window"</span>:&#123;</span><br><span class="line">    <span class="attr">"backgroundTextStyle"</span>:<span class="string">"light"</span>,</span><br><span class="line">    <span class="attr">"navigationBarBackgroundColor"</span>: <span class="string">"#f8ac09"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTitleText"</span>: <span class="string">"敢玩原创视频"</span>,</span><br><span class="line">    <span class="attr">"navigationBarTextStyle"</span>:<span class="string">"black"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>全局样式没有太多规则，这里避免后期的计算误差问题注意两点</p>
<p>app.wxss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 让页面高占满全屏，类似给 html 设置 100% 让子集元素的百分比为全屏的百分比 */</span></span><br><span class="line"><span class="selector-tag">page</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* border-box 非常方便我们计算宽高 */</span></span><br><span class="line"><span class="selector-tag">view</span>, <span class="selector-tag">text</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：<code>*</code> 选择器无效，强烈推荐使用 flex 进行布局，许多场景下普通的布局规则无效</p>
</blockquote>
<p>主页上面一个轮播，轮播图改变时剧集也发生变化，默认的 player 隐藏，页面结构如下</p>
<p>pages/index/index.wxml</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">swiper</span> <span class="attr">class</span>=<span class="string">"swiper"</span> <span class="attr">bindchange</span>=<span class="string">"changeAlbum"</span> <span class="attr">indicator-dots</span>=<span class="string">"&#123;&#123;indicatorDots&#125;&#125;"</span> <span class="attr">autoplay</span>=<span class="string">"&#123;&#123;autoplay&#125;&#125;"</span> <span class="attr">duration</span>=<span class="string">"&#123;&#123;duration&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;albums&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"title"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">swiper-item</span> <span class="attr">class</span>=<span class="string">"swiper-item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item.cover&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"slide-image"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">swiper-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scroll-view</span> <span class="attr">class</span>=<span class="string">"scroll-view"</span> <span class="attr">scroll-y</span>=<span class="string">"true"</span> <span class="attr">scroll-top</span>=<span class="string">"&#123;&#123;scrollTop&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;videoList&#125;&#125;"</span> <span class="attr">wx:key</span>=<span class="string">"id"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"video-item"</span> <span class="attr">data-id</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">catchtap</span>=<span class="string">"playVideo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;item.cover&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"video-cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">image</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"video-info"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"video-title"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"video-play-count"</span>&gt;</span>&#123;&#123;item.play_count&#125;&#125;次播放<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">scroll-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"player"</span> <span class="attr">wx:if</span>=<span class="string">"&#123;&#123;playerShow&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">icon</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">type</span>=<span class="string">"clear"</span> <span class="attr">size</span>=<span class="string">"45"</span> <span class="attr">color</span>=<span class="string">"rgba(255, 255, 255, 0.5)"</span> <span class="attr">catchtap</span>=<span class="string">"closeVideo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">class</span>=<span class="string">"video"</span> <span class="attr">src</span>=<span class="string">"&#123;&#123;videoUrl&#125;&#125;"</span> <span class="attr">autoplay</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"player-title"</span>&gt;</span>第&#123;&#123;videoIndex + 1&#125;&#125;集:&#123;&#123;videoTitle&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">"handle-bar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pre-btn"</span> <span class="attr">catchtap</span>=<span class="string">"preVideo"</span>&gt;</span>上一集<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"next-btn"</span> <span class="attr">catchtap</span>=<span class="string">"nextVideo"</span>&gt;</span>下一集<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"msg"</span>&gt;</span>没看过瘾？返回主页侧滑看更多炸裂专辑<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：<code>wx:for</code> 建议写到外层的 block 标签中，而且必须加上 <code>wx:key</code> 定义你的标志字段，否则报错。绑定事件如果为 tap，强烈建议使用 <code>catchtap</code> 而不采用 <code>bindtap</code>，除非有特殊的冒泡触发事件需求，否则使用 <code>catchtap</code>避免冒泡。这里为什么使用 <code>wx:if</code>（首屏加载块但切换成本大） 而不用官方建议的 hidden（首屏加载慢但切换成本小），在这个场景 player 层会频繁切换适合使用 hidden，但 hidden 存在 bug，它隐藏不掉 view 层里面包含的元素，video 标签依然暴露在且占据空间，破坏了我们的整体布局，实际测试 <code>wx:if</code> 在微应用场景无任何性能问题。</p>
</blockquote>
<p>看下整体的样式文件</p>
<p>pages/index/index.wxss</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.swiper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">40%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.swiper-item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#dedede</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slide-image</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.scroll-view</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-item</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(255, 255, 255, 0.9);</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#dedede</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-cover</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">95px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-info</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-title</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1.5</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video-play-count</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-end;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.player</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.player-title</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">3px</span> solid <span class="number">#ccc</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">overflow</span>:hidden;</span><br><span class="line">  <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">  <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.close</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.video</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.handle-bar</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.pre-btn</span>, <span class="selector-class">.next-btn</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">40%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f49d0d</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#673806</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.button-hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f9bd3a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.msg</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">216px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">108px</span>;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：样式以 flex + 百分比做整体布局，具体块级元素和字体给 px 值</p>
</blockquote>
<p>pages/index/index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取应用实例</span></span><br><span class="line"><span class="keyword">var</span> app = getApp()</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    albums: [],</span><br><span class="line">    videoList: [],</span><br><span class="line">    scrollTop: <span class="number">0</span>,</span><br><span class="line">    indicatorDots: <span class="literal">true</span>,</span><br><span class="line">    autoplay: <span class="literal">false</span>,</span><br><span class="line">    duration: <span class="number">1000</span>,</span><br><span class="line">    playerShow: <span class="literal">false</span>,</span><br><span class="line">    videoUrl: <span class="string">''</span>,</span><br><span class="line">    videoTitle: <span class="string">''</span>,</span><br><span class="line">    videoIndex: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  changeAlbum: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      videoList: <span class="keyword">this</span>.data.albums[e.detail.current].videos,</span><br><span class="line">      scrollTop: <span class="number">0</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  playVideo: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = e.currentTarget.dataset.id</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      videoTitle: <span class="keyword">this</span>.data.videoList[index].title,</span><br><span class="line">      videoUrl: <span class="keyword">this</span>.data.videoList[index].play_url,</span><br><span class="line">      playerShow: <span class="literal">true</span>,</span><br><span class="line">      videoIndex: index</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  closeVideo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">      videoUrl: <span class="string">''</span>,</span><br><span class="line">      playerShow: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  preVideo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="keyword">this</span>.data.videoIndex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'前面没有啦！'</span>,</span><br><span class="line">        icon: <span class="string">'loading'</span>,</span><br><span class="line">        duration: <span class="number">10000</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        wx.hideToast()</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        videoTitle: <span class="keyword">this</span>.data.videoList[index - <span class="number">1</span>].title,</span><br><span class="line">        videoUrl: <span class="keyword">this</span>.data.videoList[index - <span class="number">1</span>].play_url,</span><br><span class="line">        videoIndex: index - <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  nextVideo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="keyword">this</span>.data.videoIndex</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === <span class="keyword">this</span>.data.videoList.length - <span class="number">1</span>) &#123;</span><br><span class="line">      wx.showToast(&#123;</span><br><span class="line">        title: <span class="string">'后面没有啦！'</span>,</span><br><span class="line">        icon: <span class="string">'loading'</span>,</span><br><span class="line">        duration: <span class="number">10000</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        wx.hideToast()</span><br><span class="line">      &#125;,<span class="number">1000</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setData(&#123;</span><br><span class="line">        videoTitle: <span class="keyword">this</span>.data.videoList[index + <span class="number">1</span>].title,</span><br><span class="line">        videoUrl: <span class="keyword">this</span>.data.videoList[index + <span class="number">1</span>].play_url,</span><br><span class="line">        videoIndex: index + <span class="number">1</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> that = <span class="keyword">this</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url: <span class="string">'https://api.idarex.com/www/index'</span>,</span><br><span class="line">      success (res) &#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          albums: res.data.columns,</span><br><span class="line">          videoList: res.data.columns[<span class="number">0</span>].videos</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注：<code>onReady</code> 取代 <code>onLoad</code> 安卓 6.4.3 存在 bug，事件的传参要通过 <code>event.currentTarget.dataset</code> 传递在 wxml 里通过定义 data-xxx 属性绑定 key，其它代码简单易懂没有高级语法，可以直接复制粘贴然后自定义修改</p>
</blockquote>
<p>最后的效果如下</p>
<p><img src="/uploads/wechat-miniprogram2.jpeg" alt=""></p>
<p><img src="/uploads/wechat-miniprogram3.jpeg" alt=""></p>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>如果你的小程序拥有一定的规模你一定会尝试，模块化开发、ES6，7 的高级语法、第三方库等等。</p>
<p>实现原理就是按模块化的开发去写，npm 去安装依赖库，然后编译成微信开发者工具可以识别的项目结构</p>
<p>映着需求簇生的 Github 项目列举几个，<a href="https://github.com/wepyjs/wepy" target="_blank" rel="noopener">wepy</a>、<a href="https://github.com/maichong/labrador" target="_blank" rel="noopener">labrador</a></p>
<p>感兴趣的可以点进去看看，使用与否取决于你项目的复杂程度，你的异步操作过多 ES6 的 promise 无法满足你的需求，ES7 的 async/await 可以帮到你，或是你的状态过多想使用 redux，你就可以尝试微信小程序组件化开发框架。</p>
<p>本例中再封装一层框架纯属没事找事，没有任何意义。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>小程序的评价褒贬不一，与其评价它存在的意义不如看下它的适用场景，对于功能性强的 App 很合适，本例不太合适但是人家腾讯视频可以做小程序我们就可以做，说到以后的发展如何谁都说不准，最起码稳定性可以保证，借着写小程序可以加深对类 vue 框架的了解，内联的事件写法也是今后的一个趋势，数据的绑定类 react 的 setData，如果你之前尝试过这两个框架开发小程序会非常得心应手。</p>
]]></content>
      <tags>
        <tag>Miniprogram</tag>
      </tags>
  </entry>
</search>
